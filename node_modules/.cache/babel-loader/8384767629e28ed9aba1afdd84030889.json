{"ast":null,"code":"/**\n * Core plugin logic that all plugins share.\n *\n * BasePlugin does not contain DOM rendering so it can be used for plugins\n * without a user interface.\n *\n * See `Plugin` for the extended version with Preact rendering for interfaces.\n */\nimport Translator from '@uppy/utils/lib/Translator';\nexport default class BasePlugin {\n  constructor(uppy, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n    this.uppy = uppy;\n    this.opts = opts;\n  }\n  getPluginState() {\n    const {\n      plugins\n    } = this.uppy.getState();\n    return plugins[this.id] || {};\n  }\n  setPluginState(update) {\n    const {\n      plugins\n    } = this.uppy.getState();\n    this.uppy.setState({\n      plugins: {\n        ...plugins,\n        [this.id]: {\n          ...plugins[this.id],\n          ...update\n        }\n      }\n    });\n  }\n  setOptions(newOpts) {\n    this.opts = {\n      ...this.opts,\n      ...newOpts\n    };\n    this.setPluginState(); // so that UI re-renders with new options\n\n    this.i18nInit();\n  }\n  i18nInit() {\n    const translator = new Translator([this.defaultLocale, this.uppy.locale, this.opts.locale]);\n    this.i18n = translator.translate.bind(translator);\n    this.i18nArray = translator.translateArray.bind(translator);\n    this.setPluginState(); // so that UI re-renders and we see the updated locale\n  }\n  /**\n   * Extendable methods\n   * ==================\n   * These methods are here to serve as an overview of the extendable methods as well as\n   * making them not conditional in use, such as `if (this.afterUpdate)`.\n   */\n  // eslint-disable-next-line class-methods-use-this\n\n  addTarget() {\n    throw new Error('Extend the addTarget method to add your plugin to another plugin\\'s target');\n  } // eslint-disable-next-line class-methods-use-this\n\n  install() {} // eslint-disable-next-line class-methods-use-this\n\n  uninstall() {}\n  /**\n   * Called when plugin is mounted, whether in DOM or into another plugin.\n   * Needed because sometimes plugins are mounted separately/after `install`,\n   * so this.el and this.parent might not be available in `install`.\n   * This is the case with @uppy/react plugins, for example.\n   */\n\n  render() {\n    throw new Error('Extend the render method to add your plugin to a DOM element');\n  } // eslint-disable-next-line class-methods-use-this\n\n  update() {} // Called after every state update, after everything's mounted. Debounced.\n  // eslint-disable-next-line class-methods-use-this\n\n  afterUpdate() {}\n}","map":{"version":3,"names":["Translator","BasePlugin","constructor","uppy","opts","getPluginState","plugins","getState","id","setPluginState","update","setState","setOptions","newOpts","i18nInit","translator","defaultLocale","locale","i18n","translate","bind","i18nArray","translateArray","addTarget","Error","install","uninstall","render","afterUpdate"],"sources":["/lab/node_modules/@uppy/core/lib/BasePlugin.js"],"sourcesContent":["/**\n * Core plugin logic that all plugins share.\n *\n * BasePlugin does not contain DOM rendering so it can be used for plugins\n * without a user interface.\n *\n * See `Plugin` for the extended version with Preact rendering for interfaces.\n */\nimport Translator from '@uppy/utils/lib/Translator';\nexport default class BasePlugin {\n  constructor(uppy, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n\n    this.uppy = uppy;\n    this.opts = opts;\n  }\n\n  getPluginState() {\n    const {\n      plugins\n    } = this.uppy.getState();\n    return plugins[this.id] || {};\n  }\n\n  setPluginState(update) {\n    const {\n      plugins\n    } = this.uppy.getState();\n    this.uppy.setState({\n      plugins: { ...plugins,\n        [this.id]: { ...plugins[this.id],\n          ...update\n        }\n      }\n    });\n  }\n\n  setOptions(newOpts) {\n    this.opts = { ...this.opts,\n      ...newOpts\n    };\n    this.setPluginState(); // so that UI re-renders with new options\n\n    this.i18nInit();\n  }\n\n  i18nInit() {\n    const translator = new Translator([this.defaultLocale, this.uppy.locale, this.opts.locale]);\n    this.i18n = translator.translate.bind(translator);\n    this.i18nArray = translator.translateArray.bind(translator);\n    this.setPluginState(); // so that UI re-renders and we see the updated locale\n  }\n  /**\n   * Extendable methods\n   * ==================\n   * These methods are here to serve as an overview of the extendable methods as well as\n   * making them not conditional in use, such as `if (this.afterUpdate)`.\n   */\n  // eslint-disable-next-line class-methods-use-this\n\n\n  addTarget() {\n    throw new Error('Extend the addTarget method to add your plugin to another plugin\\'s target');\n  } // eslint-disable-next-line class-methods-use-this\n\n\n  install() {} // eslint-disable-next-line class-methods-use-this\n\n\n  uninstall() {}\n  /**\n   * Called when plugin is mounted, whether in DOM or into another plugin.\n   * Needed because sometimes plugins are mounted separately/after `install`,\n   * so this.el and this.parent might not be available in `install`.\n   * This is the case with @uppy/react plugins, for example.\n   */\n\n\n  render() {\n    throw new Error('Extend the render method to add your plugin to a DOM element');\n  } // eslint-disable-next-line class-methods-use-this\n\n\n  update() {} // Called after every state update, after everything's mounted. Debounced.\n  // eslint-disable-next-line class-methods-use-this\n\n\n  afterUpdate() {}\n\n}"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,UAAU,MAAM,4BAA4B;AACnD,eAAe,MAAMC,UAAU,CAAC;EAC9BC,WAAW,CAACC,IAAI,EAAEC,IAAI,EAAE;IACtB,IAAIA,IAAI,KAAK,KAAK,CAAC,EAAE;MACnBA,IAAI,GAAG,CAAC,CAAC;IACX;IAEA,IAAI,CAACD,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACC,IAAI,GAAGA,IAAI;EAClB;EAEAC,cAAc,GAAG;IACf,MAAM;MACJC;IACF,CAAC,GAAG,IAAI,CAACH,IAAI,CAACI,QAAQ,EAAE;IACxB,OAAOD,OAAO,CAAC,IAAI,CAACE,EAAE,CAAC,IAAI,CAAC,CAAC;EAC/B;EAEAC,cAAc,CAACC,MAAM,EAAE;IACrB,MAAM;MACJJ;IACF,CAAC,GAAG,IAAI,CAACH,IAAI,CAACI,QAAQ,EAAE;IACxB,IAAI,CAACJ,IAAI,CAACQ,QAAQ,CAAC;MACjBL,OAAO,EAAE;QAAE,GAAGA,OAAO;QACnB,CAAC,IAAI,CAACE,EAAE,GAAG;UAAE,GAAGF,OAAO,CAAC,IAAI,CAACE,EAAE,CAAC;UAC9B,GAAGE;QACL;MACF;IACF,CAAC,CAAC;EACJ;EAEAE,UAAU,CAACC,OAAO,EAAE;IAClB,IAAI,CAACT,IAAI,GAAG;MAAE,GAAG,IAAI,CAACA,IAAI;MACxB,GAAGS;IACL,CAAC;IACD,IAAI,CAACJ,cAAc,EAAE,CAAC,CAAC;;IAEvB,IAAI,CAACK,QAAQ,EAAE;EACjB;EAEAA,QAAQ,GAAG;IACT,MAAMC,UAAU,GAAG,IAAIf,UAAU,CAAC,CAAC,IAAI,CAACgB,aAAa,EAAE,IAAI,CAACb,IAAI,CAACc,MAAM,EAAE,IAAI,CAACb,IAAI,CAACa,MAAM,CAAC,CAAC;IAC3F,IAAI,CAACC,IAAI,GAAGH,UAAU,CAACI,SAAS,CAACC,IAAI,CAACL,UAAU,CAAC;IACjD,IAAI,CAACM,SAAS,GAAGN,UAAU,CAACO,cAAc,CAACF,IAAI,CAACL,UAAU,CAAC;IAC3D,IAAI,CAACN,cAAc,EAAE,CAAC,CAAC;EACzB;EACA;AACF;AACA;AACA;AACA;AACA;EACE;;EAGAc,SAAS,GAAG;IACV,MAAM,IAAIC,KAAK,CAAC,4EAA4E,CAAC;EAC/F,CAAC,CAAC;;EAGFC,OAAO,GAAG,CAAC,CAAC,CAAC;;EAGbC,SAAS,GAAG,CAAC;EACb;AACF;AACA;AACA;AACA;AACA;;EAGEC,MAAM,GAAG;IACP,MAAM,IAAIH,KAAK,CAAC,8DAA8D,CAAC;EACjF,CAAC,CAAC;;EAGFd,MAAM,GAAG,CAAC,CAAC,CAAC;EACZ;;EAGAkB,WAAW,GAAG,CAAC;AAEjB"},"metadata":{},"sourceType":"module"}