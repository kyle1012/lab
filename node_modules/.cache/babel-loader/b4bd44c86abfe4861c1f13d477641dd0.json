{"ast":null,"code":"import getFilesAndDirectoriesFromDirectory from './getFilesAndDirectoriesFromDirectory.js';\n/**\n * Interop between deprecated webkitGetAsEntry and standard getAsFileSystemHandle.\n */\n\nfunction getAsFileSystemHandleFromEntry(entry, logDropError) {\n  if (entry == null) return entry;\n  return {\n    // eslint-disable-next-line no-nested-ternary\n    kind: entry.isFile ? 'file' : entry.isDirectory ? 'directory' : undefined,\n    name: entry.name,\n    getFile() {\n      return new Promise((resolve, reject) => entry.file(resolve, reject));\n    },\n    async *values() {\n      // If the file is a directory.\n      const directoryReader = entry.createReader();\n      const entries = await new Promise(resolve => {\n        getFilesAndDirectoriesFromDirectory(directoryReader, [], logDropError, {\n          onSuccess: dirEntries => resolve(dirEntries.map(file => getAsFileSystemHandleFromEntry(file, logDropError)))\n        });\n      });\n      yield* entries;\n    }\n  };\n}\nasync function* createPromiseToAddFileOrParseDirectory(entry, relativePath) {\n  // For each dropped item, - make sure it's a file/directory, and start deepening in!\n  if (entry.kind === 'file') {\n    const file = await entry.getFile();\n    if (file !== null) {\n      file.relativePath = relativePath ? `${relativePath}/${entry.name}` : null;\n      yield file;\n    }\n  } else if (entry.kind === 'directory') {\n    for await (const handle of entry.values()) {\n      yield* createPromiseToAddFileOrParseDirectory(handle, `${relativePath}/${entry.name}`);\n    }\n  }\n}\nexport default async function* getFilesFromDataTransfer(dataTransfer, logDropError) {\n  const entries = await Promise.all(Array.from(dataTransfer.items, async item => {\n    var _await$item$getAsFile;\n    const lastResortFile = item.getAsFile(); // Chromium bug, see https://github.com/transloadit/uppy/issues/3505.\n\n    const entry = (_await$item$getAsFile = await (item.getAsFileSystemHandle == null ? void 0 : item.getAsFileSystemHandle())) != null ? _await$item$getAsFile : getAsFileSystemHandleFromEntry(item.webkitGetAsEntry(), logDropError);\n    return {\n      lastResortFile,\n      entry\n    };\n  }));\n  for (const {\n    lastResortFile,\n    entry\n  } of entries) {\n    // :entry can be null when we drop the url e.g.\n    if (entry != null) {\n      try {\n        yield* createPromiseToAddFileOrParseDirectory(entry, '');\n      } catch (err) {\n        if (lastResortFile) {\n          yield lastResortFile;\n        } else {\n          logDropError(err);\n        }\n      }\n    }\n  }\n}","map":{"version":3,"names":["getFilesAndDirectoriesFromDirectory","getAsFileSystemHandleFromEntry","entry","logDropError","kind","isFile","isDirectory","undefined","name","getFile","Promise","resolve","reject","file","values","directoryReader","createReader","entries","onSuccess","dirEntries","map","createPromiseToAddFileOrParseDirectory","relativePath","handle","getFilesFromDataTransfer","dataTransfer","all","Array","from","items","item","_await$item$getAsFile","lastResortFile","getAsFile","getAsFileSystemHandle","webkitGetAsEntry","err"],"sources":["/lab/node_modules/@uppy/utils/lib/getDroppedFiles/utils/webkitGetAsEntryApi/index.js"],"sourcesContent":["import getFilesAndDirectoriesFromDirectory from './getFilesAndDirectoriesFromDirectory.js';\n/**\n * Interop between deprecated webkitGetAsEntry and standard getAsFileSystemHandle.\n */\n\nfunction getAsFileSystemHandleFromEntry(entry, logDropError) {\n  if (entry == null) return entry;\n  return {\n    // eslint-disable-next-line no-nested-ternary\n    kind: entry.isFile ? 'file' : entry.isDirectory ? 'directory' : undefined,\n    name: entry.name,\n\n    getFile() {\n      return new Promise((resolve, reject) => entry.file(resolve, reject));\n    },\n\n    async *values() {\n      // If the file is a directory.\n      const directoryReader = entry.createReader();\n      const entries = await new Promise(resolve => {\n        getFilesAndDirectoriesFromDirectory(directoryReader, [], logDropError, {\n          onSuccess: dirEntries => resolve(dirEntries.map(file => getAsFileSystemHandleFromEntry(file, logDropError)))\n        });\n      });\n      yield* entries;\n    }\n\n  };\n}\n\nasync function* createPromiseToAddFileOrParseDirectory(entry, relativePath) {\n  // For each dropped item, - make sure it's a file/directory, and start deepening in!\n  if (entry.kind === 'file') {\n    const file = await entry.getFile();\n\n    if (file !== null) {\n      file.relativePath = relativePath ? `${relativePath}/${entry.name}` : null;\n      yield file;\n    }\n  } else if (entry.kind === 'directory') {\n    for await (const handle of entry.values()) {\n      yield* createPromiseToAddFileOrParseDirectory(handle, `${relativePath}/${entry.name}`);\n    }\n  }\n}\n\nexport default async function* getFilesFromDataTransfer(dataTransfer, logDropError) {\n  const entries = await Promise.all(Array.from(dataTransfer.items, async item => {\n    var _await$item$getAsFile;\n\n    const lastResortFile = item.getAsFile(); // Chromium bug, see https://github.com/transloadit/uppy/issues/3505.\n\n    const entry = (_await$item$getAsFile = await (item.getAsFileSystemHandle == null ? void 0 : item.getAsFileSystemHandle())) != null ? _await$item$getAsFile : getAsFileSystemHandleFromEntry(item.webkitGetAsEntry(), logDropError);\n    return {\n      lastResortFile,\n      entry\n    };\n  }));\n\n  for (const {\n    lastResortFile,\n    entry\n  } of entries) {\n    // :entry can be null when we drop the url e.g.\n    if (entry != null) {\n      try {\n        yield* createPromiseToAddFileOrParseDirectory(entry, '');\n      } catch (err) {\n        if (lastResortFile) {\n          yield lastResortFile;\n        } else {\n          logDropError(err);\n        }\n      }\n    }\n  }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}