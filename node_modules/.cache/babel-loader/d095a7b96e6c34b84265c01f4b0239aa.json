{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/* eslint-disable max-classes-per-file, class-methods-use-this */\nimport prettierBytes from '@transloadit/prettier-bytes';\nimport match from 'mime-match';\nconst defaultOptions = {\n  maxFileSize: null,\n  minFileSize: null,\n  maxTotalFileSize: null,\n  maxNumberOfFiles: null,\n  minNumberOfFiles: null,\n  allowedFileTypes: null,\n  requiredMetaFields: []\n};\nclass RestrictionError extends Error {\n  constructor() {\n    super(...arguments);\n    this.isRestriction = true;\n  }\n}\nclass Restricter {\n  constructor(getOpts, i18n) {\n    this.i18n = i18n;\n    this.getOpts = () => {\n      const opts = getOpts();\n      if (opts.restrictions.allowedFileTypes != null && !Array.isArray(opts.restrictions.allowedFileTypes)) {\n        throw new TypeError('`restrictions.allowedFileTypes` must be an array');\n      }\n      return opts;\n    };\n  }\n  validate(file, files) {\n    const {\n      maxFileSize,\n      minFileSize,\n      maxTotalFileSize,\n      maxNumberOfFiles,\n      allowedFileTypes\n    } = this.getOpts().restrictions;\n    if (maxNumberOfFiles) {\n      const nonGhostFiles = files.filter(f => !f.isGhost);\n      if (nonGhostFiles.length + 1 > maxNumberOfFiles) {\n        throw new RestrictionError(`${this.i18n('youCanOnlyUploadX', {\n          smart_count: maxNumberOfFiles\n        })}`);\n      }\n    }\n    if (allowedFileTypes) {\n      const isCorrectFileType = allowedFileTypes.some(type => {\n        // check if this is a mime-type\n        if (type.includes('/')) {\n          if (!file.type) return false;\n          return match(file.type.replace(/;.*?$/, ''), type);\n        } // otherwise this is likely an extension\n\n        if (type[0] === '.' && file.extension) {\n          return file.extension.toLowerCase() === type.slice(1).toLowerCase();\n        }\n        return false;\n      });\n      if (!isCorrectFileType) {\n        const allowedFileTypesString = allowedFileTypes.join(', ');\n        throw new RestrictionError(this.i18n('youCanOnlyUploadFileTypes', {\n          types: allowedFileTypesString\n        }));\n      }\n    } // We can't check maxTotalFileSize if the size is unknown.\n\n    if (maxTotalFileSize && file.size != null) {\n      const totalFilesSize = files.reduce((total, f) => total + f.size, file.size);\n      if (totalFilesSize > maxTotalFileSize) {\n        throw new RestrictionError(this.i18n('exceedsSize', {\n          size: prettierBytes(maxTotalFileSize),\n          file: file.name\n        }));\n      }\n    } // We can't check maxFileSize if the size is unknown.\n\n    if (maxFileSize && file.size != null && file.size > maxFileSize) {\n      throw new RestrictionError(this.i18n('exceedsSize', {\n        size: prettierBytes(maxFileSize),\n        file: file.name\n      }));\n    } // We can't check minFileSize if the size is unknown.\n\n    if (minFileSize && file.size != null && file.size < minFileSize) {\n      throw new RestrictionError(this.i18n('inferiorSize', {\n        size: prettierBytes(minFileSize)\n      }));\n    }\n  }\n  validateMinNumberOfFiles(files) {\n    const {\n      minNumberOfFiles\n    } = this.getOpts().restrictions;\n    if (Object.keys(files).length < minNumberOfFiles) {\n      throw new RestrictionError(this.i18n('youHaveToAtLeastSelectX', {\n        smart_count: minNumberOfFiles\n      }));\n    }\n  }\n  getMissingRequiredMetaFields(file) {\n    const error = new RestrictionError(this.i18n('missingRequiredMetaFieldOnFile', {\n      fileName: file.name\n    }));\n    const {\n      requiredMetaFields\n    } = this.getOpts().restrictions;\n    const missingFields = [];\n    for (const field of requiredMetaFields) {\n      if (!Object.hasOwn(file.meta, field) || file.meta[field] === '') {\n        missingFields.push(field);\n      }\n    }\n    return {\n      missingFields,\n      error\n    };\n  }\n}\nexport { Restricter, defaultOptions, RestrictionError };","map":{"version":3,"names":["prettierBytes","match","defaultOptions","maxFileSize","minFileSize","maxTotalFileSize","maxNumberOfFiles","minNumberOfFiles","allowedFileTypes","requiredMetaFields","RestrictionError","Error","constructor","arguments","isRestriction","Restricter","getOpts","i18n","opts","restrictions","Array","isArray","TypeError","validate","file","files","nonGhostFiles","filter","f","isGhost","length","smart_count","isCorrectFileType","some","type","includes","replace","extension","toLowerCase","slice","allowedFileTypesString","join","types","size","totalFilesSize","reduce","total","name","validateMinNumberOfFiles","Object","keys","getMissingRequiredMetaFields","error","fileName","missingFields","field","hasOwn","meta","push"],"sources":["/lab/node_modules/@uppy/core/lib/Restricter.js"],"sourcesContent":["/* eslint-disable max-classes-per-file, class-methods-use-this */\nimport prettierBytes from '@transloadit/prettier-bytes';\nimport match from 'mime-match';\nconst defaultOptions = {\n  maxFileSize: null,\n  minFileSize: null,\n  maxTotalFileSize: null,\n  maxNumberOfFiles: null,\n  minNumberOfFiles: null,\n  allowedFileTypes: null,\n  requiredMetaFields: []\n};\n\nclass RestrictionError extends Error {\n  constructor() {\n    super(...arguments);\n    this.isRestriction = true;\n  }\n\n}\n\nclass Restricter {\n  constructor(getOpts, i18n) {\n    this.i18n = i18n;\n\n    this.getOpts = () => {\n      const opts = getOpts();\n\n      if (opts.restrictions.allowedFileTypes != null && !Array.isArray(opts.restrictions.allowedFileTypes)) {\n        throw new TypeError('`restrictions.allowedFileTypes` must be an array');\n      }\n\n      return opts;\n    };\n  }\n\n  validate(file, files) {\n    const {\n      maxFileSize,\n      minFileSize,\n      maxTotalFileSize,\n      maxNumberOfFiles,\n      allowedFileTypes\n    } = this.getOpts().restrictions;\n\n    if (maxNumberOfFiles) {\n      const nonGhostFiles = files.filter(f => !f.isGhost);\n\n      if (nonGhostFiles.length + 1 > maxNumberOfFiles) {\n        throw new RestrictionError(`${this.i18n('youCanOnlyUploadX', {\n          smart_count: maxNumberOfFiles\n        })}`);\n      }\n    }\n\n    if (allowedFileTypes) {\n      const isCorrectFileType = allowedFileTypes.some(type => {\n        // check if this is a mime-type\n        if (type.includes('/')) {\n          if (!file.type) return false;\n          return match(file.type.replace(/;.*?$/, ''), type);\n        } // otherwise this is likely an extension\n\n\n        if (type[0] === '.' && file.extension) {\n          return file.extension.toLowerCase() === type.slice(1).toLowerCase();\n        }\n\n        return false;\n      });\n\n      if (!isCorrectFileType) {\n        const allowedFileTypesString = allowedFileTypes.join(', ');\n        throw new RestrictionError(this.i18n('youCanOnlyUploadFileTypes', {\n          types: allowedFileTypesString\n        }));\n      }\n    } // We can't check maxTotalFileSize if the size is unknown.\n\n\n    if (maxTotalFileSize && file.size != null) {\n      const totalFilesSize = files.reduce((total, f) => total + f.size, file.size);\n\n      if (totalFilesSize > maxTotalFileSize) {\n        throw new RestrictionError(this.i18n('exceedsSize', {\n          size: prettierBytes(maxTotalFileSize),\n          file: file.name\n        }));\n      }\n    } // We can't check maxFileSize if the size is unknown.\n\n\n    if (maxFileSize && file.size != null && file.size > maxFileSize) {\n      throw new RestrictionError(this.i18n('exceedsSize', {\n        size: prettierBytes(maxFileSize),\n        file: file.name\n      }));\n    } // We can't check minFileSize if the size is unknown.\n\n\n    if (minFileSize && file.size != null && file.size < minFileSize) {\n      throw new RestrictionError(this.i18n('inferiorSize', {\n        size: prettierBytes(minFileSize)\n      }));\n    }\n  }\n\n  validateMinNumberOfFiles(files) {\n    const {\n      minNumberOfFiles\n    } = this.getOpts().restrictions;\n\n    if (Object.keys(files).length < minNumberOfFiles) {\n      throw new RestrictionError(this.i18n('youHaveToAtLeastSelectX', {\n        smart_count: minNumberOfFiles\n      }));\n    }\n  }\n\n  getMissingRequiredMetaFields(file) {\n    const error = new RestrictionError(this.i18n('missingRequiredMetaFieldOnFile', {\n      fileName: file.name\n    }));\n    const {\n      requiredMetaFields\n    } = this.getOpts().restrictions;\n    const missingFields = [];\n\n    for (const field of requiredMetaFields) {\n      if (!Object.hasOwn(file.meta, field) || file.meta[field] === '') {\n        missingFields.push(field);\n      }\n    }\n\n    return {\n      missingFields,\n      error\n    };\n  }\n\n}\n\nexport { Restricter, defaultOptions, RestrictionError };"],"mappings":"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"},"metadata":{},"sourceType":"module"}