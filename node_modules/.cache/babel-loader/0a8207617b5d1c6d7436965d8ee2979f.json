{"ast":null,"code":"import { h } from 'preact';\nconst uploadStates = {\n  STATE_ERROR: 'error',\n  STATE_WAITING: 'waiting',\n  STATE_PREPROCESSING: 'preprocessing',\n  STATE_UPLOADING: 'uploading',\n  STATE_POSTPROCESSING: 'postprocessing',\n  STATE_COMPLETE: 'complete',\n  STATE_PAUSED: 'paused'\n};\nfunction getUploadingState(isAllErrored, isAllComplete, isAllPaused, files) {\n  if (files === void 0) {\n    files = {};\n  }\n  if (isAllErrored) {\n    return uploadStates.STATE_ERROR;\n  }\n  if (isAllComplete) {\n    return uploadStates.STATE_COMPLETE;\n  }\n  if (isAllPaused) {\n    return uploadStates.STATE_PAUSED;\n  }\n  let state = uploadStates.STATE_WAITING;\n  const fileIDs = Object.keys(files);\n  for (let i = 0; i < fileIDs.length; i++) {\n    const {\n      progress\n    } = files[fileIDs[i]]; // If ANY files are being uploaded right now, show the uploading state.\n\n    if (progress.uploadStarted && !progress.uploadComplete) {\n      return uploadStates.STATE_UPLOADING;\n    } // If files are being preprocessed AND postprocessed at this time, we show the\n    // preprocess state. If any files are being uploaded we show uploading.\n\n    if (progress.preprocess && state !== uploadStates.STATE_UPLOADING) {\n      state = uploadStates.STATE_PREPROCESSING;\n    } // If NO files are being preprocessed or uploaded right now, but some files are\n    // being postprocessed, show the postprocess state.\n\n    if (progress.postprocess && state !== uploadStates.STATE_UPLOADING && state !== uploadStates.STATE_PREPROCESSING) {\n      state = uploadStates.STATE_POSTPROCESSING;\n    }\n  }\n  return state;\n}\nfunction UploadStatus(_ref) {\n  let {\n    files,\n    i18n,\n    isAllComplete,\n    isAllErrored,\n    isAllPaused,\n    inProgressNotPausedFiles,\n    newFiles,\n    processingFiles\n  } = _ref;\n  const uploadingState = getUploadingState(isAllErrored, isAllComplete, isAllPaused, files);\n  switch (uploadingState) {\n    case 'uploading':\n      return i18n('uploadingXFiles', {\n        smart_count: inProgressNotPausedFiles.length\n      });\n    case 'preprocessing':\n    case 'postprocessing':\n      return i18n('processingXFiles', {\n        smart_count: processingFiles.length\n      });\n    case 'paused':\n      return i18n('uploadPaused');\n    case 'waiting':\n      return i18n('xFilesSelected', {\n        smart_count: newFiles.length\n      });\n    case 'complete':\n      return i18n('uploadComplete');\n    default:\n  }\n}\nfunction PanelTopBar(props) {\n  const {\n    i18n,\n    isAllComplete,\n    hideCancelButton,\n    maxNumberOfFiles,\n    toggleAddFilesPanel,\n    uppy\n  } = props;\n  let {\n    allowNewUpload\n  } = props; // TODO maybe this should be done in ../Dashboard.jsx, then just pass that down as `allowNewUpload`\n\n  if (allowNewUpload && maxNumberOfFiles) {\n    // eslint-disable-next-line react/destructuring-assignment\n    allowNewUpload = props.totalFileCount < props.maxNumberOfFiles;\n  }\n  return h(\"div\", {\n    className: \"uppy-DashboardContent-bar\"\n  }, !isAllComplete && !hideCancelButton ? h(\"button\", {\n    className: \"uppy-DashboardContent-back\",\n    type: \"button\",\n    onClick: () => uppy.cancelAll()\n  }, i18n('cancel')) : h(\"div\", null), h(\"div\", {\n    className: \"uppy-DashboardContent-title\",\n    role: \"heading\",\n    \"aria-level\": \"1\"\n  }, h(UploadStatus, props)), allowNewUpload ? h(\"button\", {\n    className: \"uppy-DashboardContent-addMore\",\n    type: \"button\",\n    \"aria-label\": i18n('addMoreFiles'),\n    title: i18n('addMoreFiles'),\n    onClick: () => toggleAddFilesPanel(true)\n  }, h(\"svg\", {\n    \"aria-hidden\": \"true\",\n    focusable: \"false\",\n    className: \"uppy-c-icon\",\n    width: \"15\",\n    height: \"15\",\n    viewBox: \"0 0 15 15\"\n  }, h(\"path\", {\n    d: \"M8 6.5h6a.5.5 0 0 1 .5.5v.5a.5.5 0 0 1-.5.5H8v6a.5.5 0 0 1-.5.5H7a.5.5 0 0 1-.5-.5V8h-6a.5.5 0 0 1-.5-.5V7a.5.5 0 0 1 .5-.5h6v-6A.5.5 0 0 1 7 0h.5a.5.5 0 0 1 .5.5v6z\"\n  })), h(\"span\", {\n    className: \"uppy-DashboardContent-addMoreCaption\"\n  }, i18n('addMore'))) : h(\"div\", null));\n}\nexport default PanelTopBar;","map":{"version":3,"names":["h","uploadStates","STATE_ERROR","STATE_WAITING","STATE_PREPROCESSING","STATE_UPLOADING","STATE_POSTPROCESSING","STATE_COMPLETE","STATE_PAUSED","getUploadingState","isAllErrored","isAllComplete","isAllPaused","files","state","fileIDs","Object","keys","i","length","progress","uploadStarted","uploadComplete","preprocess","postprocess","UploadStatus","_ref","i18n","inProgressNotPausedFiles","newFiles","processingFiles","uploadingState","smart_count","PanelTopBar","props","hideCancelButton","maxNumberOfFiles","toggleAddFilesPanel","uppy","allowNewUpload","totalFileCount","className","type","onClick","cancelAll","role","title","focusable","width","height","viewBox","d"],"sources":["/lab/node_modules/@uppy/dashboard/lib/components/PickerPanelTopBar.js"],"sourcesContent":["import { h } from 'preact';\nconst uploadStates = {\n  STATE_ERROR: 'error',\n  STATE_WAITING: 'waiting',\n  STATE_PREPROCESSING: 'preprocessing',\n  STATE_UPLOADING: 'uploading',\n  STATE_POSTPROCESSING: 'postprocessing',\n  STATE_COMPLETE: 'complete',\n  STATE_PAUSED: 'paused'\n};\n\nfunction getUploadingState(isAllErrored, isAllComplete, isAllPaused, files) {\n  if (files === void 0) {\n    files = {};\n  }\n\n  if (isAllErrored) {\n    return uploadStates.STATE_ERROR;\n  }\n\n  if (isAllComplete) {\n    return uploadStates.STATE_COMPLETE;\n  }\n\n  if (isAllPaused) {\n    return uploadStates.STATE_PAUSED;\n  }\n\n  let state = uploadStates.STATE_WAITING;\n  const fileIDs = Object.keys(files);\n\n  for (let i = 0; i < fileIDs.length; i++) {\n    const {\n      progress\n    } = files[fileIDs[i]]; // If ANY files are being uploaded right now, show the uploading state.\n\n    if (progress.uploadStarted && !progress.uploadComplete) {\n      return uploadStates.STATE_UPLOADING;\n    } // If files are being preprocessed AND postprocessed at this time, we show the\n    // preprocess state. If any files are being uploaded we show uploading.\n\n\n    if (progress.preprocess && state !== uploadStates.STATE_UPLOADING) {\n      state = uploadStates.STATE_PREPROCESSING;\n    } // If NO files are being preprocessed or uploaded right now, but some files are\n    // being postprocessed, show the postprocess state.\n\n\n    if (progress.postprocess && state !== uploadStates.STATE_UPLOADING && state !== uploadStates.STATE_PREPROCESSING) {\n      state = uploadStates.STATE_POSTPROCESSING;\n    }\n  }\n\n  return state;\n}\n\nfunction UploadStatus(_ref) {\n  let {\n    files,\n    i18n,\n    isAllComplete,\n    isAllErrored,\n    isAllPaused,\n    inProgressNotPausedFiles,\n    newFiles,\n    processingFiles\n  } = _ref;\n  const uploadingState = getUploadingState(isAllErrored, isAllComplete, isAllPaused, files);\n\n  switch (uploadingState) {\n    case 'uploading':\n      return i18n('uploadingXFiles', {\n        smart_count: inProgressNotPausedFiles.length\n      });\n\n    case 'preprocessing':\n    case 'postprocessing':\n      return i18n('processingXFiles', {\n        smart_count: processingFiles.length\n      });\n\n    case 'paused':\n      return i18n('uploadPaused');\n\n    case 'waiting':\n      return i18n('xFilesSelected', {\n        smart_count: newFiles.length\n      });\n\n    case 'complete':\n      return i18n('uploadComplete');\n\n    default:\n  }\n}\n\nfunction PanelTopBar(props) {\n  const {\n    i18n,\n    isAllComplete,\n    hideCancelButton,\n    maxNumberOfFiles,\n    toggleAddFilesPanel,\n    uppy\n  } = props;\n  let {\n    allowNewUpload\n  } = props; // TODO maybe this should be done in ../Dashboard.jsx, then just pass that down as `allowNewUpload`\n\n  if (allowNewUpload && maxNumberOfFiles) {\n    // eslint-disable-next-line react/destructuring-assignment\n    allowNewUpload = props.totalFileCount < props.maxNumberOfFiles;\n  }\n\n  return h(\"div\", {\n    className: \"uppy-DashboardContent-bar\"\n  }, !isAllComplete && !hideCancelButton ? h(\"button\", {\n    className: \"uppy-DashboardContent-back\",\n    type: \"button\",\n    onClick: () => uppy.cancelAll()\n  }, i18n('cancel')) : h(\"div\", null), h(\"div\", {\n    className: \"uppy-DashboardContent-title\",\n    role: \"heading\",\n    \"aria-level\": \"1\"\n  }, h(UploadStatus, props)), allowNewUpload ? h(\"button\", {\n    className: \"uppy-DashboardContent-addMore\",\n    type: \"button\",\n    \"aria-label\": i18n('addMoreFiles'),\n    title: i18n('addMoreFiles'),\n    onClick: () => toggleAddFilesPanel(true)\n  }, h(\"svg\", {\n    \"aria-hidden\": \"true\",\n    focusable: \"false\",\n    className: \"uppy-c-icon\",\n    width: \"15\",\n    height: \"15\",\n    viewBox: \"0 0 15 15\"\n  }, h(\"path\", {\n    d: \"M8 6.5h6a.5.5 0 0 1 .5.5v.5a.5.5 0 0 1-.5.5H8v6a.5.5 0 0 1-.5.5H7a.5.5 0 0 1-.5-.5V8h-6a.5.5 0 0 1-.5-.5V7a.5.5 0 0 1 .5-.5h6v-6A.5.5 0 0 1 7 0h.5a.5.5 0 0 1 .5.5v6z\"\n  })), h(\"span\", {\n    className: \"uppy-DashboardContent-addMoreCaption\"\n  }, i18n('addMore'))) : h(\"div\", null));\n}\n\nexport default PanelTopBar;"],"mappings":"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"},"metadata":{},"sourceType":"module"}