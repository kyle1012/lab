{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport webkitGetAsEntryApi from './utils/webkitGetAsEntryApi/index.js';\nimport fallbackApi from './utils/fallbackApi.js';\n/**\n * Returns a promise that resolves to the array of dropped files (if a folder is\n * dropped, and browser supports folder parsing - promise resolves to the flat\n * array of all files in all directories).\n * Each file has .relativePath prop appended to it (e.g. \"/docs/Prague/ticket_from_prague_to_ufa.pdf\")\n * if browser supports it. Otherwise it's undefined.\n *\n * @param {DataTransfer} dataTransfer\n * @param {Function} logDropError - a function that's called every time some\n * folder or some file error out (e.g. because of the folder name being too long\n * on Windows). Notice that resulting promise will always be resolved anyway.\n *\n * @returns {Promise} - Array<File>\n */\n\nexport default async function getDroppedFiles(dataTransfer, _temp) {\n  let {\n    logDropError = () => {}\n  } = _temp === void 0 ? {} : _temp;\n\n  // Get all files from all subdirs. Works (at least) in Chrome, Mozilla, and Safari\n  try {\n    const accumulator = [];\n    for await (const file of webkitGetAsEntryApi(dataTransfer, logDropError)) {\n      accumulator.push(file);\n    }\n    return accumulator; // Otherwise just return all first-order files\n  } catch {\n    return fallbackApi(dataTransfer);\n  }\n}","map":{"version":3,"names":["webkitGetAsEntryApi","fallbackApi","getDroppedFiles","dataTransfer","_temp","logDropError","accumulator","file","push"],"sources":["/lab/node_modules/@uppy/utils/lib/getDroppedFiles/index.js"],"sourcesContent":["import webkitGetAsEntryApi from './utils/webkitGetAsEntryApi/index.js';\nimport fallbackApi from './utils/fallbackApi.js';\n/**\n * Returns a promise that resolves to the array of dropped files (if a folder is\n * dropped, and browser supports folder parsing - promise resolves to the flat\n * array of all files in all directories).\n * Each file has .relativePath prop appended to it (e.g. \"/docs/Prague/ticket_from_prague_to_ufa.pdf\")\n * if browser supports it. Otherwise it's undefined.\n *\n * @param {DataTransfer} dataTransfer\n * @param {Function} logDropError - a function that's called every time some\n * folder or some file error out (e.g. because of the folder name being too long\n * on Windows). Notice that resulting promise will always be resolved anyway.\n *\n * @returns {Promise} - Array<File>\n */\n\nexport default async function getDroppedFiles(dataTransfer, _temp) {\n  let {\n    logDropError = () => {}\n  } = _temp === void 0 ? {} : _temp;\n\n  // Get all files from all subdirs. Works (at least) in Chrome, Mozilla, and Safari\n  try {\n    const accumulator = [];\n\n    for await (const file of webkitGetAsEntryApi(dataTransfer, logDropError)) {\n      accumulator.push(file);\n    }\n\n    return accumulator; // Otherwise just return all first-order files\n  } catch {\n    return fallbackApi(dataTransfer);\n  }\n}"],"mappings":";AAAA,OAAOA,mBAAmB,MAAM,sCAAsC;AACtE,OAAOC,WAAW,MAAM,wBAAwB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAe,eAAeC,eAAe,CAACC,YAAY,EAAEC,KAAK,EAAE;EACjE,IAAI;IACFC,YAAY,GAAG,MAAM,CAAC;EACxB,CAAC,GAAGD,KAAK,KAAK,KAAK,CAAC,GAAG,CAAC,CAAC,GAAGA,KAAK;;EAEjC;EACA,IAAI;IACF,MAAME,WAAW,GAAG,EAAE;IAEtB,WAAW,MAAMC,IAAI,IAAIP,mBAAmB,CAACG,YAAY,EAAEE,YAAY,CAAC,EAAE;MACxEC,WAAW,CAACE,IAAI,CAACD,IAAI,CAAC;IACxB;IAEA,OAAOD,WAAW,CAAC,CAAC;EACtB,CAAC,CAAC,MAAM;IACN,OAAOL,WAAW,CAACE,YAAY,CAAC;EAClC;AACF"},"metadata":{},"sourceType":"module"}