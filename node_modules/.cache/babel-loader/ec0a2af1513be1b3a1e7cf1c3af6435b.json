{"ast":null,"code":"// axios module import\nimport http from \"../http\";\nexport default {\n  name: \"FormValidation\",\n  components: {},\n  data() {\n    return {\n      selectFile: null,\n      // 파일 객체\n      previewImgUrl: null,\n      // 미리보기 이미지 URL\n      isUploading: false,\n      // 파일 업로드 체크\n      response: null // 파일 업로드후 응답값\n    };\n  },\n\n  methods: {\n    previewFile() {\n      // 선택된 파일이 있는가?\n      if (0 < this.$refs.selectFile.files.length) {\n        // 0 번째 파일을 가져 온다.\n        this.selectFile = this.$refs.selectFile.files[0];\n        // 마지막 . 위치를 찾고 + 1 하여 확장자 명을 가져온다.\n        let fileExt = this.selectFile.name.substring(this.selectFile.name.lastIndexOf(\".\") + 1);\n        // 소문자로 변환\n        fileExt = fileExt.toLowerCase();\n        // 이미지 확장자 체크, 1메가 바이트 이하 인지 체크\n        if ([\"jpeg\", \"png\", \"gif\", \"bmp\", \"pdf\"].includes(fileExt) && this.selectFile.size <= 9048576) {\n          // FileReader 를 활용하여 파일을 읽는다\n          var reader = new FileReader();\n          reader.onload = e => {\n            // base64\n            this.previewImgUrl = e.target.result;\n          };\n          reader.readAsDataURL(this.selectFile);\n        } else if (this.selectFile.size <= 9048576) {\n          // 이미지외 파일\n          this.previewImgUrl = null;\n        } else {\n          alert(\"파일을 다시 선택해 주세요.\");\n          this.selectFile = null;\n          this.previewImgUrl = null;\n        }\n      } else {\n        // 파일을 선택하지 않았을때\n        this.selectFile = null;\n        this.previewImgUrl = null;\n      }\n      console.log(this.selectFile);\n    },\n    async formSubmit() {\n      if (this.selectFile) {\n        // Form 필드 생성\n        //let form = new FormData()\n        //form.append(\"file\", this.selectFile) // api file name\n        //this.isUploading = true\n\n        http.post(\"http://10.1.30.202:5000/upload\").then(res => {\n          this.response = res.data;\n          this.isUploading = false;\n        }).catch(error => {\n          this.response = error;\n          this.isUploading = false;\n        });\n      } else {\n        alert(\"파일을 선택해 주세요.\");\n      }\n      return true;\n    },\n    created() {\n      this.formSubmit();\n    }\n  }\n};","map":{"version":3,"mappings":"AAwBE;AACA,OAAOA,IAAG,MAAO,SAAQ;AAEzB,eAAe;EACbC,IAAI,EAAE,gBAAgB;EACtBC,UAAU,EAAE,CAAC,CAAC;EACdC,IAAI,GAAG;IACL,OAAO;MACLC,UAAU,EAAE,IAAI;MAAE;MAClBC,aAAa,EAAE,IAAI;MAAE;MACrBC,WAAW,EAAE,KAAK;MAAE;MACpBC,QAAQ,EAAE,IAAI,CAAE;IAClB;EACF,CAAC;;EACDC,OAAO,EAAE;IACPC,WAAW,GAAG;MACZ;MACA,IAAI,IAAI,IAAI,CAACC,KAAK,CAACN,UAAU,CAACO,KAAK,CAACC,MAAM,EAAE;QAC1C;QACA,IAAI,CAACR,UAAS,GAAI,IAAI,CAACM,KAAK,CAACN,UAAU,CAACO,KAAK,CAAC,CAAC;QAC/C;QACA,IAAIE,OAAM,GAAI,IAAI,CAACT,UAAU,CAACH,IAAI,CAACa,SAAS,CAC1C,IAAI,CAACV,UAAU,CAACH,IAAI,CAACc,WAAW,CAAC,GAAG,IAAI,EAC1C;QACA;QACAF,OAAM,GAAIA,OAAO,CAACG,WAAW,EAAC;QAC9B;QACA,IACE,CAAC,MAAM,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,CAAC,CAACC,QAAQ,CAACJ,OAAO,KACrD,IAAI,CAACT,UAAU,CAACc,IAAG,IAAK,OAAM,EAC9B;UACA;UACA,IAAIC,MAAK,GAAI,IAAIC,UAAU,EAAC;UAC5BD,MAAM,CAACE,MAAK,GAAIC,KAAK;YACnB;YACA,IAAI,CAACjB,aAAY,GAAIiB,CAAC,CAACC,MAAM,CAACC,MAAK;UACrC;UACAL,MAAM,CAACM,aAAa,CAAC,IAAI,CAACrB,UAAU;QACtC,OAAO,IAAI,IAAI,CAACA,UAAU,CAACc,IAAG,IAAK,OAAO,EAAE;UAC1C;UACA,IAAI,CAACb,aAAY,GAAI,IAAG;QAC1B,OAAO;UACLqB,KAAK,CAAC,iBAAiB;UACvB,IAAI,CAACtB,UAAS,GAAI,IAAG;UACrB,IAAI,CAACC,aAAY,GAAI,IAAG;QAC1B;MACF,OAAO;QACL;QACA,IAAI,CAACD,UAAS,GAAI,IAAG;QACrB,IAAI,CAACC,aAAY,GAAI,IAAG;MAC1B;MACAsB,OAAO,CAACC,GAAG,CAAC,IAAI,CAACxB,UAAU;IAC7B,CAAC;IAED,MAAMyB,UAAU,GAAG;MACjB,IAAI,IAAI,CAACzB,UAAU,EAAE;QACnB;QACA;QACA;QACA;;QAEAJ,IAAG,CACA8B,IAAI,CAAC,gCAAgC,EACrCC,IAAI,CAAEC,GAAG,IAAK;UACb,IAAI,CAACzB,QAAO,GAAIyB,GAAG,CAAC7B,IAAG;UACvB,IAAI,CAACG,WAAU,GAAI,KAAI;QACzB,CAAC,EACA2B,KAAK,CAAEC,KAAK,IAAK;UAChB,IAAI,CAAC3B,QAAO,GAAI2B,KAAI;UACpB,IAAI,CAAC5B,WAAU,GAAI,KAAI;QACzB,CAAC;MACL,OAAO;QACLoB,KAAK,CAAC,cAAc;MACtB;MAEA,OAAO,IAAG;IACZ,CAAC;IACDS,OAAO,GAAE;MACP,IAAI,CAACN,UAAU,EAAE;IACnB;EACF;AACF","names":["http","name","components","data","selectFile","previewImgUrl","isUploading","response","methods","previewFile","$refs","files","length","fileExt","substring","lastIndexOf","toLowerCase","includes","size","reader","FileReader","onload","e","target","result","readAsDataURL","alert","console","log","formSubmit","post","then","res","catch","error","created"],"sourceRoot":"","sources":["/lab/src/components/HelloWorld.vue"],"sourcesContent":["<template>\n  <div class=\"file-upload\">\n    <form @submit.prevent=\"formSubmit\" method=\"post\">\n      <input type=\"file\" ref=\"selectFile\" @change=\"previewFile\" />\n      <ul v-if=\"selectFile\">\n        <li>lastModified : {{ selectFile.lastModified }}</li>\n        <li>lastModifiedDate : {{ selectFile.lastModifiedDate }}</li>\n        <li>name : {{ selectFile.name }}</li>\n        <li>size(byte) : {{ selectFile.size }}</li>\n        <li>type : {{ selectFile.type }}</li>\n        <li>webkitRelativePath : {{ selectFile.webkitRelativePath }}</li>\n      </ul>\n      <img v-if=\"previewImgUrl\" :src=\"previewImgUrl\" />\n      <button type=\"submit\" :disabled=\"isUploading\">Upload</button>\n\n      <div>\n        <hr />\n        response : {{ response }}\n      </div>\n    </form>\n  </div>\n</template>\n\n<script>\n  // axios module import\n  import http from \"../http\"\n\n  export default {\n    name: \"FormValidation\",\n    components: {},\n    data() {\n      return {\n        selectFile: null, // 파일 객체\n        previewImgUrl: null, // 미리보기 이미지 URL\n        isUploading: false, // 파일 업로드 체크\n        response: null, // 파일 업로드후 응답값\n      }\n    },\n    methods: {\n      previewFile() {\n        // 선택된 파일이 있는가?\n        if (0 < this.$refs.selectFile.files.length) {\n          // 0 번째 파일을 가져 온다.\n          this.selectFile = this.$refs.selectFile.files[0]\n          // 마지막 . 위치를 찾고 + 1 하여 확장자 명을 가져온다.\n          let fileExt = this.selectFile.name.substring(\n            this.selectFile.name.lastIndexOf(\".\") + 1\n          )\n          // 소문자로 변환\n          fileExt = fileExt.toLowerCase()\n          // 이미지 확장자 체크, 1메가 바이트 이하 인지 체크\n          if (\n            [\"jpeg\", \"png\", \"gif\", \"bmp\", \"pdf\"].includes(fileExt) &&\n            this.selectFile.size <= 9048576\n          ) {\n            // FileReader 를 활용하여 파일을 읽는다\n            var reader = new FileReader()\n            reader.onload = e => {\n              // base64\n              this.previewImgUrl = e.target.result\n            }\n            reader.readAsDataURL(this.selectFile)\n          } else if (this.selectFile.size <= 9048576) {\n            // 이미지외 파일\n            this.previewImgUrl = null\n          } else {\n            alert(\"파일을 다시 선택해 주세요.\")\n            this.selectFile = null\n            this.previewImgUrl = null\n          }\n        } else {\n          // 파일을 선택하지 않았을때\n          this.selectFile = null\n          this.previewImgUrl = null\n        }\n        console.log(this.selectFile)\n      },\n\n      async formSubmit() {\n        if (this.selectFile) {\n          // Form 필드 생성\n          //let form = new FormData()\n          //form.append(\"file\", this.selectFile) // api file name\n          //this.isUploading = true\n\n          http\n            .post(\"http://10.1.30.202:5000/upload\")\n            .then((res) => {\n              this.response = res.data\n              this.isUploading = false\n            })\n            .catch((error) => {\n              this.response = error\n              this.isUploading = false\n            })\n        } else {\n          alert(\"파일을 선택해 주세요.\")\n        }\n\n        return true\n      },\n      created(){\n        this.formSubmit();\n      },\n    },\n  }\n</script>\n\n<style scoped></style>"]},"metadata":{},"sourceType":"module"}