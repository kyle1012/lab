{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nvar NODE_LIST_CLASSES = {\n  '[object HTMLCollection]': true,\n  '[object NodeList]': true,\n  '[object RadioNodeList]': true\n}; // .type values for elements which can appear in .elements and should be ignored\n\nvar IGNORED_ELEMENT_TYPES = {\n  'button': true,\n  'fieldset': true,\n  'reset': true,\n  'submit': true\n};\nvar CHECKED_INPUT_TYPES = {\n  'checkbox': true,\n  'radio': true\n};\nvar TRIM_RE = /^\\s+|\\s+$/g;\nvar slice = Array.prototype.slice;\nvar toString = Object.prototype.toString;\n/**\n * @param {HTMLFormElement} form\n * @param {Object} [options]\n * @return {Object.<string,boolean|string|string[]>} an object containing\n *   submittable value(s) held in the form's .elements collection, with\n *   properties named as per element names or ids.\n */\n\nexport default function getFormData(form, options) {\n  if (!form) {\n    throw new Error(\"A form is required by getFormData, was given form=\" + form);\n  }\n  options = _extends({\n    includeDisabled: false,\n    trim: false\n  }, options);\n  var data = {};\n  var elementName;\n  var elementNames = [];\n  var elementNameLookup = {}; // Get unique submittable element names for the form\n\n  for (var i = 0, l = form.elements.length; i < l; i++) {\n    var element = form.elements[i];\n    if (IGNORED_ELEMENT_TYPES[element.type] || element.disabled && !options.includeDisabled) {\n      continue;\n    }\n    elementName = element.name || element.id;\n    if (elementName && !elementNameLookup[elementName]) {\n      elementNames.push(elementName);\n      elementNameLookup[elementName] = true;\n    }\n  } // Extract element data name-by-name for consistent handling of special cases\n  // around elements which contain multiple inputs.\n\n  for (var _i = 0, _l = elementNames.length; _i < _l; _i++) {\n    elementName = elementNames[_i];\n    var value = getFieldData(form, elementName, options);\n    if (value != null) {\n      data[elementName] = value;\n    }\n  }\n  return data;\n}\n/**\n * @param {HTMLFormElement} form\n * @param {string} fieldName\n * @param {Object} [options]\n * @return {?(boolean|string|string[]|File|File[])} submittable value(s) in the\n *   form for a  named element from its .elements collection, or null if there\n *   was no element with that name, or the element had no submittable value(s).\n */\n\nexport function getFieldData(form, fieldName, options) {\n  if (!form) {\n    throw new Error(\"A form is required by getFieldData, was given form=\" + form);\n  }\n  if (!fieldName && toString.call(fieldName) !== '[object String]') {\n    throw new Error(\"A field name is required by getFieldData, was given fieldName=\" + fieldName);\n  }\n  options = _extends({\n    includeDisabled: false,\n    trim: false\n  }, options);\n  var element = form.elements[fieldName];\n  if (!element || element.disabled && !options.includeDisabled) {\n    return null;\n  }\n  if (!NODE_LIST_CLASSES[toString.call(element)]) {\n    return getFormElementValue(element, options.trim);\n  } // Deal with multiple form controls which have the same name\n\n  var data = [];\n  var allRadios = true;\n  for (var i = 0, l = element.length; i < l; i++) {\n    if (element[i].disabled && !options.includeDisabled) {\n      continue;\n    }\n    if (allRadios && element[i].type !== 'radio') {\n      allRadios = false;\n    }\n    var value = getFormElementValue(element[i], options.trim);\n    if (value != null) {\n      data = data.concat(value);\n    }\n  } // Special case for an element with multiple same-named inputs which were all\n  // radio buttons: if there was a selected value, only return the value.\n\n  if (allRadios && data.length === 1) {\n    return data[0];\n  }\n  return data.length > 0 ? data : null;\n}\n/**\n * @param {HTMLElement} element a form element.\n * @param {boolean} [trim] should values for text entry inputs be trimmed?\n * @return {?(boolean|string|string[]|File|File[])} the element's submittable\n *   value(s), or null if it had none.\n */\n\nfunction getFormElementValue(element, trim) {\n  var value = null;\n  var type = element.type;\n  if (type === 'select-one') {\n    if (element.options.length) {\n      value = element.options[element.selectedIndex].value;\n    }\n    return value;\n  }\n  if (type === 'select-multiple') {\n    value = [];\n    for (var i = 0, l = element.options.length; i < l; i++) {\n      if (element.options[i].selected) {\n        value.push(element.options[i].value);\n      }\n    }\n    if (value.length === 0) {\n      value = null;\n    }\n    return value;\n  } // If a file input doesn't have a files attribute, fall through to using its\n  // value attribute.\n\n  if (type === 'file' && 'files' in element) {\n    if (element.multiple) {\n      value = slice.call(element.files);\n      if (value.length === 0) {\n        value = null;\n      }\n    } else {\n      // Should be null if not present, according to the spec\n      value = element.files[0];\n    }\n    return value;\n  }\n  if (!CHECKED_INPUT_TYPES[type]) {\n    value = trim ? element.value.replace(TRIM_RE, '') : element.value;\n  } else if (element.checked) {\n    if (type === 'checkbox' && !element.hasAttribute('value')) {\n      value = true;\n    } else {\n      value = element.value;\n    }\n  }\n  return value;\n} // For UMD build access to getFieldData\n\ngetFormData.getFieldData = getFieldData;","map":{"version":3,"names":["_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","NODE_LIST_CLASSES","IGNORED_ELEMENT_TYPES","CHECKED_INPUT_TYPES","TRIM_RE","slice","Array","toString","getFormData","form","options","Error","includeDisabled","trim","data","elementName","elementNames","elementNameLookup","l","elements","element","type","disabled","name","id","push","_i","_l","value","getFieldData","fieldName","getFormElementValue","allRadios","concat","selectedIndex","selected","multiple","files","replace","checked","hasAttribute"],"sources":["/lab/node_modules/get-form-data/es/index.js"],"sourcesContent":["function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nvar NODE_LIST_CLASSES = {\n  '[object HTMLCollection]': true,\n  '[object NodeList]': true,\n  '[object RadioNodeList]': true\n}; // .type values for elements which can appear in .elements and should be ignored\n\nvar IGNORED_ELEMENT_TYPES = {\n  'button': true,\n  'fieldset': true,\n  'reset': true,\n  'submit': true\n};\nvar CHECKED_INPUT_TYPES = {\n  'checkbox': true,\n  'radio': true\n};\nvar TRIM_RE = /^\\s+|\\s+$/g;\nvar slice = Array.prototype.slice;\nvar toString = Object.prototype.toString;\n/**\n * @param {HTMLFormElement} form\n * @param {Object} [options]\n * @return {Object.<string,boolean|string|string[]>} an object containing\n *   submittable value(s) held in the form's .elements collection, with\n *   properties named as per element names or ids.\n */\n\nexport default function getFormData(form, options) {\n  if (!form) {\n    throw new Error(\"A form is required by getFormData, was given form=\" + form);\n  }\n\n  options = _extends({\n    includeDisabled: false,\n    trim: false\n  }, options);\n  var data = {};\n  var elementName;\n  var elementNames = [];\n  var elementNameLookup = {}; // Get unique submittable element names for the form\n\n  for (var i = 0, l = form.elements.length; i < l; i++) {\n    var element = form.elements[i];\n\n    if (IGNORED_ELEMENT_TYPES[element.type] || element.disabled && !options.includeDisabled) {\n      continue;\n    }\n\n    elementName = element.name || element.id;\n\n    if (elementName && !elementNameLookup[elementName]) {\n      elementNames.push(elementName);\n      elementNameLookup[elementName] = true;\n    }\n  } // Extract element data name-by-name for consistent handling of special cases\n  // around elements which contain multiple inputs.\n\n\n  for (var _i = 0, _l = elementNames.length; _i < _l; _i++) {\n    elementName = elementNames[_i];\n    var value = getFieldData(form, elementName, options);\n\n    if (value != null) {\n      data[elementName] = value;\n    }\n  }\n\n  return data;\n}\n/**\n * @param {HTMLFormElement} form\n * @param {string} fieldName\n * @param {Object} [options]\n * @return {?(boolean|string|string[]|File|File[])} submittable value(s) in the\n *   form for a  named element from its .elements collection, or null if there\n *   was no element with that name, or the element had no submittable value(s).\n */\n\nexport function getFieldData(form, fieldName, options) {\n  if (!form) {\n    throw new Error(\"A form is required by getFieldData, was given form=\" + form);\n  }\n\n  if (!fieldName && toString.call(fieldName) !== '[object String]') {\n    throw new Error(\"A field name is required by getFieldData, was given fieldName=\" + fieldName);\n  }\n\n  options = _extends({\n    includeDisabled: false,\n    trim: false\n  }, options);\n  var element = form.elements[fieldName];\n\n  if (!element || element.disabled && !options.includeDisabled) {\n    return null;\n  }\n\n  if (!NODE_LIST_CLASSES[toString.call(element)]) {\n    return getFormElementValue(element, options.trim);\n  } // Deal with multiple form controls which have the same name\n\n\n  var data = [];\n  var allRadios = true;\n\n  for (var i = 0, l = element.length; i < l; i++) {\n    if (element[i].disabled && !options.includeDisabled) {\n      continue;\n    }\n\n    if (allRadios && element[i].type !== 'radio') {\n      allRadios = false;\n    }\n\n    var value = getFormElementValue(element[i], options.trim);\n\n    if (value != null) {\n      data = data.concat(value);\n    }\n  } // Special case for an element with multiple same-named inputs which were all\n  // radio buttons: if there was a selected value, only return the value.\n\n\n  if (allRadios && data.length === 1) {\n    return data[0];\n  }\n\n  return data.length > 0 ? data : null;\n}\n/**\n * @param {HTMLElement} element a form element.\n * @param {boolean} [trim] should values for text entry inputs be trimmed?\n * @return {?(boolean|string|string[]|File|File[])} the element's submittable\n *   value(s), or null if it had none.\n */\n\nfunction getFormElementValue(element, trim) {\n  var value = null;\n  var type = element.type;\n\n  if (type === 'select-one') {\n    if (element.options.length) {\n      value = element.options[element.selectedIndex].value;\n    }\n\n    return value;\n  }\n\n  if (type === 'select-multiple') {\n    value = [];\n\n    for (var i = 0, l = element.options.length; i < l; i++) {\n      if (element.options[i].selected) {\n        value.push(element.options[i].value);\n      }\n    }\n\n    if (value.length === 0) {\n      value = null;\n    }\n\n    return value;\n  } // If a file input doesn't have a files attribute, fall through to using its\n  // value attribute.\n\n\n  if (type === 'file' && 'files' in element) {\n    if (element.multiple) {\n      value = slice.call(element.files);\n\n      if (value.length === 0) {\n        value = null;\n      }\n    } else {\n      // Should be null if not present, according to the spec\n      value = element.files[0];\n    }\n\n    return value;\n  }\n\n  if (!CHECKED_INPUT_TYPES[type]) {\n    value = trim ? element.value.replace(TRIM_RE, '') : element.value;\n  } else if (element.checked) {\n    if (type === 'checkbox' && !element.hasAttribute('value')) {\n      value = true;\n    } else {\n      value = element.value;\n    }\n  }\n\n  return value;\n} // For UMD build access to getFieldData\n\n\ngetFormData.getFieldData = getFieldData;"],"mappings":"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"},"metadata":{},"sourceType":"module"}