{"ast":null,"code":"import { UIPlugin } from '@uppy/core';\nimport toArray from '@uppy/utils/lib/toArray';\nimport { h } from 'preact';\nconst packageJson = {\n  \"version\": \"3.0.1\"\n};\nimport locale from './locale.js';\nexport default class FileInput extends UIPlugin {\n  constructor(uppy, opts) {\n    super(uppy, opts);\n    this.id = this.opts.id || 'FileInput';\n    this.title = 'File Input';\n    this.type = 'acquirer';\n    this.defaultLocale = locale; // Default options, must be kept in sync with @uppy/react/src/FileInput.js.\n\n    const defaultOptions = {\n      target: null,\n      pretty: true,\n      inputName: 'files[]'\n    }; // Merge default options with the ones set by user\n\n    this.opts = {\n      ...defaultOptions,\n      ...opts\n    };\n    this.i18nInit();\n    this.render = this.render.bind(this);\n    this.handleInputChange = this.handleInputChange.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n  }\n  addFiles(files) {\n    const descriptors = files.map(file => ({\n      source: this.id,\n      name: file.name,\n      type: file.type,\n      data: file\n    }));\n    try {\n      this.uppy.addFiles(descriptors);\n    } catch (err) {\n      this.uppy.log(err);\n    }\n  }\n  handleInputChange(event) {\n    this.uppy.log('[FileInput] Something selected through input...');\n    const files = toArray(event.target.files);\n    this.addFiles(files); // We clear the input after a file is selected, because otherwise\n    // change event is not fired in Chrome and Safari when a file\n    // with the same name is selected.\n    // ___Why not use value=\"\" on <input/> instead?\n    //    Because if we use that method of clearing the input,\n    //    Chrome will not trigger change if we drop the same file twice (Issue #768).\n\n    event.target.value = null; // eslint-disable-line no-param-reassign\n  }\n\n  handleClick() {\n    this.input.click();\n  }\n  render() {\n    /* http://tympanus.net/codrops/2015/09/15/styling-customizing-file-inputs-smart-way/ */\n    const hiddenInputStyle = {\n      width: '0.1px',\n      height: '0.1px',\n      opacity: 0,\n      overflow: 'hidden',\n      position: 'absolute',\n      zIndex: -1\n    };\n    const {\n      restrictions\n    } = this.uppy.opts;\n    const accept = restrictions.allowedFileTypes ? restrictions.allowedFileTypes.join(',') : null;\n    return h(\"div\", {\n      className: \"uppy-FileInput-container\"\n    }, h(\"input\", {\n      className: \"uppy-FileInput-input\",\n      style: this.opts.pretty && hiddenInputStyle,\n      type: \"file\",\n      name: this.opts.inputName,\n      onChange: this.handleInputChange,\n      multiple: restrictions.maxNumberOfFiles !== 1,\n      accept: accept,\n      ref: input => {\n        this.input = input;\n      }\n    }), this.opts.pretty && h(\"button\", {\n      className: \"uppy-FileInput-btn\",\n      type: \"button\",\n      onClick: this.handleClick\n    }, this.i18n('chooseFiles')));\n  }\n  install() {\n    const {\n      target\n    } = this.opts;\n    if (target) {\n      this.mount(target, this);\n    }\n  }\n  uninstall() {\n    this.unmount();\n  }\n}\nFileInput.VERSION = packageJson.version;","map":{"version":3,"names":["UIPlugin","toArray","h","packageJson","locale","FileInput","constructor","uppy","opts","id","title","type","defaultLocale","defaultOptions","target","pretty","inputName","i18nInit","render","bind","handleInputChange","handleClick","addFiles","files","descriptors","map","file","source","name","data","err","log","event","value","input","click","hiddenInputStyle","width","height","opacity","overflow","position","zIndex","restrictions","accept","allowedFileTypes","join","className","style","onChange","multiple","maxNumberOfFiles","ref","onClick","i18n","install","mount","uninstall","unmount","VERSION","version"],"sources":["/lab/node_modules/@uppy/file-input/lib/FileInput.js"],"sourcesContent":["import { UIPlugin } from '@uppy/core';\nimport toArray from '@uppy/utils/lib/toArray';\nimport { h } from 'preact';\nconst packageJson = {\n  \"version\": \"3.0.1\"\n};\nimport locale from './locale.js';\nexport default class FileInput extends UIPlugin {\n  constructor(uppy, opts) {\n    super(uppy, opts);\n    this.id = this.opts.id || 'FileInput';\n    this.title = 'File Input';\n    this.type = 'acquirer';\n    this.defaultLocale = locale; // Default options, must be kept in sync with @uppy/react/src/FileInput.js.\n\n    const defaultOptions = {\n      target: null,\n      pretty: true,\n      inputName: 'files[]'\n    }; // Merge default options with the ones set by user\n\n    this.opts = { ...defaultOptions,\n      ...opts\n    };\n    this.i18nInit();\n    this.render = this.render.bind(this);\n    this.handleInputChange = this.handleInputChange.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  addFiles(files) {\n    const descriptors = files.map(file => ({\n      source: this.id,\n      name: file.name,\n      type: file.type,\n      data: file\n    }));\n\n    try {\n      this.uppy.addFiles(descriptors);\n    } catch (err) {\n      this.uppy.log(err);\n    }\n  }\n\n  handleInputChange(event) {\n    this.uppy.log('[FileInput] Something selected through input...');\n    const files = toArray(event.target.files);\n    this.addFiles(files); // We clear the input after a file is selected, because otherwise\n    // change event is not fired in Chrome and Safari when a file\n    // with the same name is selected.\n    // ___Why not use value=\"\" on <input/> instead?\n    //    Because if we use that method of clearing the input,\n    //    Chrome will not trigger change if we drop the same file twice (Issue #768).\n\n    event.target.value = null; // eslint-disable-line no-param-reassign\n  }\n\n  handleClick() {\n    this.input.click();\n  }\n\n  render() {\n    /* http://tympanus.net/codrops/2015/09/15/styling-customizing-file-inputs-smart-way/ */\n    const hiddenInputStyle = {\n      width: '0.1px',\n      height: '0.1px',\n      opacity: 0,\n      overflow: 'hidden',\n      position: 'absolute',\n      zIndex: -1\n    };\n    const {\n      restrictions\n    } = this.uppy.opts;\n    const accept = restrictions.allowedFileTypes ? restrictions.allowedFileTypes.join(',') : null;\n    return h(\"div\", {\n      className: \"uppy-FileInput-container\"\n    }, h(\"input\", {\n      className: \"uppy-FileInput-input\",\n      style: this.opts.pretty && hiddenInputStyle,\n      type: \"file\",\n      name: this.opts.inputName,\n      onChange: this.handleInputChange,\n      multiple: restrictions.maxNumberOfFiles !== 1,\n      accept: accept,\n      ref: input => {\n        this.input = input;\n      }\n    }), this.opts.pretty && h(\"button\", {\n      className: \"uppy-FileInput-btn\",\n      type: \"button\",\n      onClick: this.handleClick\n    }, this.i18n('chooseFiles')));\n  }\n\n  install() {\n    const {\n      target\n    } = this.opts;\n\n    if (target) {\n      this.mount(target, this);\n    }\n  }\n\n  uninstall() {\n    this.unmount();\n  }\n\n}\nFileInput.VERSION = packageJson.version;"],"mappings":"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"},"metadata":{},"sourceType":"module"}