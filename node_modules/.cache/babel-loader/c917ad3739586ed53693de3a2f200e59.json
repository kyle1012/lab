{"ast":null,"code":"import toArray from '@uppy/utils/lib/toArray';\nimport FOCUSABLE_ELEMENTS from '@uppy/utils/lib/FOCUSABLE_ELEMENTS';\nimport getActiveOverlayEl from './getActiveOverlayEl.js';\nfunction focusOnFirstNode(event, nodes) {\n  const node = nodes[0];\n  if (node) {\n    node.focus();\n    event.preventDefault();\n  }\n}\nfunction focusOnLastNode(event, nodes) {\n  const node = nodes[nodes.length - 1];\n  if (node) {\n    node.focus();\n    event.preventDefault();\n  }\n} // ___Why not just use (focusedItemIndex === -1)?\n//    Firefox thinks <ul> is focusable, but we don't have <ul>s in our FOCUSABLE_ELEMENTS. Which means that if we tab into\n//    the <ul>, code will think that we are not in the active overlay, and we should focusOnFirstNode() of the currently\n//    active overlay!\n//    [Practical check] if we use (focusedItemIndex === -1), instagram provider in firefox will never get focus on its pics\n//    in the <ul>.\n\nfunction isFocusInOverlay(activeOverlayEl) {\n  return activeOverlayEl.contains(document.activeElement);\n}\nfunction trapFocus(event, activeOverlayType, dashboardEl) {\n  const activeOverlayEl = getActiveOverlayEl(dashboardEl, activeOverlayType);\n  const focusableNodes = toArray(activeOverlayEl.querySelectorAll(FOCUSABLE_ELEMENTS));\n  const focusedItemIndex = focusableNodes.indexOf(document.activeElement); // If we pressed tab, and focus is not yet within the current overlay - focus on\n  // the first element within the current overlay.\n  // This is a safety measure (for when user returns from another tab e.g.), most\n  // plugins will try to focus on some important element as it loads.\n\n  if (!isFocusInOverlay(activeOverlayEl)) {\n    focusOnFirstNode(event, focusableNodes); // If we pressed shift + tab, and we're on the first element of a modal\n  } else if (event.shiftKey && focusedItemIndex === 0) {\n    focusOnLastNode(event, focusableNodes); // If we pressed tab, and we're on the last element of the modal\n  } else if (!event.shiftKey && focusedItemIndex === focusableNodes.length - 1) {\n    focusOnFirstNode(event, focusableNodes);\n  }\n} // Traps focus inside of the currently open overlay (e.g. Dashboard, or e.g. Instagram),\n// never lets focus disappear from the modal.\n\nexport { trapFocus as forModal }; // Traps focus inside of the currently open overlay, unless overlay is null - then let the user tab away.\n\nexport function forInline(event, activeOverlayType, dashboardEl) {\n  // ___When we're in the bare 'Drop files here, paste, browse or import from' screen\n  if (activeOverlayType === null) {// Do nothing and let the browser handle it, user can tab away from Uppy to other elements on the page\n    // ___When there is some overlay with 'Done' button\n  } else {\n    // Trap the focus inside this overlay!\n    // User can close the overlay (click 'Done') if they want to travel away from Uppy.\n    trapFocus(event, activeOverlayType, dashboardEl);\n  }\n}","map":{"version":3,"names":["toArray","FOCUSABLE_ELEMENTS","getActiveOverlayEl","focusOnFirstNode","event","nodes","node","focus","preventDefault","focusOnLastNode","length","isFocusInOverlay","activeOverlayEl","contains","document","activeElement","trapFocus","activeOverlayType","dashboardEl","focusableNodes","querySelectorAll","focusedItemIndex","indexOf","shiftKey","forModal","forInline"],"sources":["/lab/node_modules/@uppy/dashboard/lib/utils/trapFocus.js"],"sourcesContent":["import toArray from '@uppy/utils/lib/toArray';\nimport FOCUSABLE_ELEMENTS from '@uppy/utils/lib/FOCUSABLE_ELEMENTS';\nimport getActiveOverlayEl from './getActiveOverlayEl.js';\n\nfunction focusOnFirstNode(event, nodes) {\n  const node = nodes[0];\n\n  if (node) {\n    node.focus();\n    event.preventDefault();\n  }\n}\n\nfunction focusOnLastNode(event, nodes) {\n  const node = nodes[nodes.length - 1];\n\n  if (node) {\n    node.focus();\n    event.preventDefault();\n  }\n} // ___Why not just use (focusedItemIndex === -1)?\n//    Firefox thinks <ul> is focusable, but we don't have <ul>s in our FOCUSABLE_ELEMENTS. Which means that if we tab into\n//    the <ul>, code will think that we are not in the active overlay, and we should focusOnFirstNode() of the currently\n//    active overlay!\n//    [Practical check] if we use (focusedItemIndex === -1), instagram provider in firefox will never get focus on its pics\n//    in the <ul>.\n\n\nfunction isFocusInOverlay(activeOverlayEl) {\n  return activeOverlayEl.contains(document.activeElement);\n}\n\nfunction trapFocus(event, activeOverlayType, dashboardEl) {\n  const activeOverlayEl = getActiveOverlayEl(dashboardEl, activeOverlayType);\n  const focusableNodes = toArray(activeOverlayEl.querySelectorAll(FOCUSABLE_ELEMENTS));\n  const focusedItemIndex = focusableNodes.indexOf(document.activeElement); // If we pressed tab, and focus is not yet within the current overlay - focus on\n  // the first element within the current overlay.\n  // This is a safety measure (for when user returns from another tab e.g.), most\n  // plugins will try to focus on some important element as it loads.\n\n  if (!isFocusInOverlay(activeOverlayEl)) {\n    focusOnFirstNode(event, focusableNodes); // If we pressed shift + tab, and we're on the first element of a modal\n  } else if (event.shiftKey && focusedItemIndex === 0) {\n    focusOnLastNode(event, focusableNodes); // If we pressed tab, and we're on the last element of the modal\n  } else if (!event.shiftKey && focusedItemIndex === focusableNodes.length - 1) {\n    focusOnFirstNode(event, focusableNodes);\n  }\n} // Traps focus inside of the currently open overlay (e.g. Dashboard, or e.g. Instagram),\n// never lets focus disappear from the modal.\n\n\nexport { trapFocus as forModal }; // Traps focus inside of the currently open overlay, unless overlay is null - then let the user tab away.\n\nexport function forInline(event, activeOverlayType, dashboardEl) {\n  // ___When we're in the bare 'Drop files here, paste, browse or import from' screen\n  if (activeOverlayType === null) {// Do nothing and let the browser handle it, user can tab away from Uppy to other elements on the page\n    // ___When there is some overlay with 'Done' button\n  } else {\n    // Trap the focus inside this overlay!\n    // User can close the overlay (click 'Done') if they want to travel away from Uppy.\n    trapFocus(event, activeOverlayType, dashboardEl);\n  }\n}"],"mappings":"AAAA,OAAOA,OAAO,MAAM,yBAAyB;AAC7C,OAAOC,kBAAkB,MAAM,oCAAoC;AACnE,OAAOC,kBAAkB,MAAM,yBAAyB;AAExD,SAASC,gBAAgB,CAACC,KAAK,EAAEC,KAAK,EAAE;EACtC,MAAMC,IAAI,GAAGD,KAAK,CAAC,CAAC,CAAC;EAErB,IAAIC,IAAI,EAAE;IACRA,IAAI,CAACC,KAAK,EAAE;IACZH,KAAK,CAACI,cAAc,EAAE;EACxB;AACF;AAEA,SAASC,eAAe,CAACL,KAAK,EAAEC,KAAK,EAAE;EACrC,MAAMC,IAAI,GAAGD,KAAK,CAACA,KAAK,CAACK,MAAM,GAAG,CAAC,CAAC;EAEpC,IAAIJ,IAAI,EAAE;IACRA,IAAI,CAACC,KAAK,EAAE;IACZH,KAAK,CAACI,cAAc,EAAE;EACxB;AACF,CAAC,CAAC;AACF;AACA;AACA;AACA;AACA;;AAGA,SAASG,gBAAgB,CAACC,eAAe,EAAE;EACzC,OAAOA,eAAe,CAACC,QAAQ,CAACC,QAAQ,CAACC,aAAa,CAAC;AACzD;AAEA,SAASC,SAAS,CAACZ,KAAK,EAAEa,iBAAiB,EAAEC,WAAW,EAAE;EACxD,MAAMN,eAAe,GAAGV,kBAAkB,CAACgB,WAAW,EAAED,iBAAiB,CAAC;EAC1E,MAAME,cAAc,GAAGnB,OAAO,CAACY,eAAe,CAACQ,gBAAgB,CAACnB,kBAAkB,CAAC,CAAC;EACpF,MAAMoB,gBAAgB,GAAGF,cAAc,CAACG,OAAO,CAACR,QAAQ,CAACC,aAAa,CAAC,CAAC,CAAC;EACzE;EACA;EACA;;EAEA,IAAI,CAACJ,gBAAgB,CAACC,eAAe,CAAC,EAAE;IACtCT,gBAAgB,CAACC,KAAK,EAAEe,cAAc,CAAC,CAAC,CAAC;EAC3C,CAAC,MAAM,IAAIf,KAAK,CAACmB,QAAQ,IAAIF,gBAAgB,KAAK,CAAC,EAAE;IACnDZ,eAAe,CAACL,KAAK,EAAEe,cAAc,CAAC,CAAC,CAAC;EAC1C,CAAC,MAAM,IAAI,CAACf,KAAK,CAACmB,QAAQ,IAAIF,gBAAgB,KAAKF,cAAc,CAACT,MAAM,GAAG,CAAC,EAAE;IAC5EP,gBAAgB,CAACC,KAAK,EAAEe,cAAc,CAAC;EACzC;AACF,CAAC,CAAC;AACF;;AAGA,SAASH,SAAS,IAAIQ,QAAQ,GAAG,CAAC;;AAElC,OAAO,SAASC,SAAS,CAACrB,KAAK,EAAEa,iBAAiB,EAAEC,WAAW,EAAE;EAC/D;EACA,IAAID,iBAAiB,KAAK,IAAI,EAAE,CAAC;IAC/B;EACF,CAAC,MAAM;IACL;IACA;IACAD,SAAS,CAACZ,KAAK,EAAEa,iBAAiB,EAAEC,WAAW,CAAC;EAClD;AACF"},"metadata":{},"sourceType":"module"}