{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default function calculateProcessingProgress(files) {\n  const values = [];\n  let mode;\n  let message;\n  for (const {\n    progress\n  } of Object.values(files)) {\n    const {\n      preprocess,\n      postprocess\n    } = progress; // In the future we should probably do this differently. For now we'll take the\n    // mode and message from the first file…\n\n    if (message == null && (preprocess || postprocess)) {\n      ({\n        mode,\n        message\n      } = preprocess || postprocess);\n    }\n    if ((preprocess == null ? void 0 : preprocess.mode) === 'determinate') values.push(preprocess.value);\n    if ((postprocess == null ? void 0 : postprocess.mode) === 'determinate') values.push(postprocess.value);\n  }\n  const value = values.reduce((total, progressValue) => {\n    return total + progressValue / values.length;\n  }, 0);\n  return {\n    mode,\n    message,\n    value\n  };\n}","map":{"version":3,"names":["calculateProcessingProgress","files","values","mode","message","progress","Object","preprocess","postprocess","push","value","reduce","total","progressValue","length"],"sources":["/lab/node_modules/@uppy/status-bar/lib/calculateProcessingProgress.js"],"sourcesContent":["export default function calculateProcessingProgress(files) {\n  const values = [];\n  let mode;\n  let message;\n\n  for (const {\n    progress\n  } of Object.values(files)) {\n    const {\n      preprocess,\n      postprocess\n    } = progress; // In the future we should probably do this differently. For now we'll take the\n    // mode and message from the first file…\n\n    if (message == null && (preprocess || postprocess)) {\n      ({\n        mode,\n        message\n      } = preprocess || postprocess);\n    }\n\n    if ((preprocess == null ? void 0 : preprocess.mode) === 'determinate') values.push(preprocess.value);\n    if ((postprocess == null ? void 0 : postprocess.mode) === 'determinate') values.push(postprocess.value);\n  }\n\n  const value = values.reduce((total, progressValue) => {\n    return total + progressValue / values.length;\n  }, 0);\n  return {\n    mode,\n    message,\n    value\n  };\n}"],"mappings":";AAAA,eAAe,SAASA,2BAA2B,CAACC,KAAK,EAAE;EACzD,MAAMC,MAAM,GAAG,EAAE;EACjB,IAAIC,IAAI;EACR,IAAIC,OAAO;EAEX,KAAK,MAAM;IACTC;EACF,CAAC,IAAIC,MAAM,CAACJ,MAAM,CAACD,KAAK,CAAC,EAAE;IACzB,MAAM;MACJM,UAAU;MACVC;IACF,CAAC,GAAGH,QAAQ,CAAC,CAAC;IACd;;IAEA,IAAID,OAAO,IAAI,IAAI,KAAKG,UAAU,IAAIC,WAAW,CAAC,EAAE;MAClD,CAAC;QACCL,IAAI;QACJC;MACF,CAAC,GAAGG,UAAU,IAAIC,WAAW;IAC/B;IAEA,IAAI,CAACD,UAAU,IAAI,IAAI,GAAG,KAAK,CAAC,GAAGA,UAAU,CAACJ,IAAI,MAAM,aAAa,EAAED,MAAM,CAACO,IAAI,CAACF,UAAU,CAACG,KAAK,CAAC;IACpG,IAAI,CAACF,WAAW,IAAI,IAAI,GAAG,KAAK,CAAC,GAAGA,WAAW,CAACL,IAAI,MAAM,aAAa,EAAED,MAAM,CAACO,IAAI,CAACD,WAAW,CAACE,KAAK,CAAC;EACzG;EAEA,MAAMA,KAAK,GAAGR,MAAM,CAACS,MAAM,CAAC,CAACC,KAAK,EAAEC,aAAa,KAAK;IACpD,OAAOD,KAAK,GAAGC,aAAa,GAAGX,MAAM,CAACY,MAAM;EAC9C,CAAC,EAAE,CAAC,CAAC;EACL,OAAO;IACLX,IAAI;IACJC,OAAO;IACPM;EACF,CAAC;AACH"},"metadata":{},"sourceType":"module"}