{"ast":null,"code":"require(\"core-js/modules/es.array.push.js\");\nrequire(\"core-js/modules/es.typed-array.find-last.js\");\nrequire(\"core-js/modules/es.typed-array.find-last-index.js\");\nrequire(\"core-js/modules/web.dom-exception.stack.js\");\n/**\n * web-streams-polyfill v3.2.1\n */\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) : typeof define === 'function' && define.amd ? define(['exports'], factory) : (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.WebStreamsPolyfill = {}));\n})(this, function (exports) {\n  'use strict';\n\n  /// <reference lib=\"es2015.symbol\" />\n  var SymbolPolyfill = typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol' ? Symbol : function (description) {\n    return \"Symbol(\" + description + \")\";\n  };\n\n  /// <reference lib=\"dom\" />\n  function noop() {\n    return undefined;\n  }\n  function getGlobals() {\n    if (typeof self !== 'undefined') {\n      return self;\n    } else if (typeof window !== 'undefined') {\n      return window;\n    } else if (typeof global !== 'undefined') {\n      return global;\n    }\n    return undefined;\n  }\n  var globals = getGlobals();\n  function typeIsObject(x) {\n    return typeof x === 'object' && x !== null || typeof x === 'function';\n  }\n  var rethrowAssertionErrorRejection = noop;\n  var originalPromise = Promise;\n  var originalPromiseThen = Promise.prototype.then;\n  var originalPromiseResolve = Promise.resolve.bind(originalPromise);\n  var originalPromiseReject = Promise.reject.bind(originalPromise);\n  function newPromise(executor) {\n    return new originalPromise(executor);\n  }\n  function promiseResolvedWith(value) {\n    return originalPromiseResolve(value);\n  }\n  function promiseRejectedWith(reason) {\n    return originalPromiseReject(reason);\n  }\n  function PerformPromiseThen(promise, onFulfilled, onRejected) {\n    // There doesn't appear to be any way to correctly emulate the behaviour from JavaScript, so this is just an\n    // approximation.\n    return originalPromiseThen.call(promise, onFulfilled, onRejected);\n  }\n  function uponPromise(promise, onFulfilled, onRejected) {\n    PerformPromiseThen(PerformPromiseThen(promise, onFulfilled, onRejected), undefined, rethrowAssertionErrorRejection);\n  }\n  function uponFulfillment(promise, onFulfilled) {\n    uponPromise(promise, onFulfilled);\n  }\n  function uponRejection(promise, onRejected) {\n    uponPromise(promise, undefined, onRejected);\n  }\n  function transformPromiseWith(promise, fulfillmentHandler, rejectionHandler) {\n    return PerformPromiseThen(promise, fulfillmentHandler, rejectionHandler);\n  }\n  function setPromiseIsHandledToTrue(promise) {\n    PerformPromiseThen(promise, undefined, rethrowAssertionErrorRejection);\n  }\n  var queueMicrotask = function () {\n    var globalQueueMicrotask = globals && globals.queueMicrotask;\n    if (typeof globalQueueMicrotask === 'function') {\n      return globalQueueMicrotask;\n    }\n    var resolvedPromise = promiseResolvedWith(undefined);\n    return function (fn) {\n      return PerformPromiseThen(resolvedPromise, fn);\n    };\n  }();\n  function reflectCall(F, V, args) {\n    if (typeof F !== 'function') {\n      throw new TypeError('Argument is not a function');\n    }\n    return Function.prototype.apply.call(F, V, args);\n  }\n  function promiseCall(F, V, args) {\n    try {\n      return promiseResolvedWith(reflectCall(F, V, args));\n    } catch (value) {\n      return promiseRejectedWith(value);\n    }\n  }\n\n  // Original from Chromium\n  // https://chromium.googlesource.com/chromium/src/+/0aee4434a4dba42a42abaea9bfbc0cd196a63bc1/third_party/blink/renderer/core/streams/SimpleQueue.js\n  var QUEUE_MAX_ARRAY_SIZE = 16384;\n  /**\n   * Simple queue structure.\n   *\n   * Avoids scalability issues with using a packed array directly by using\n   * multiple arrays in a linked list and keeping the array size bounded.\n   */\n  var SimpleQueue = /** @class */function () {\n    function SimpleQueue() {\n      this._cursor = 0;\n      this._size = 0;\n      // _front and _back are always defined.\n      this._front = {\n        _elements: [],\n        _next: undefined\n      };\n      this._back = this._front;\n      // The cursor is used to avoid calling Array.shift().\n      // It contains the index of the front element of the array inside the\n      // front-most node. It is always in the range [0, QUEUE_MAX_ARRAY_SIZE).\n      this._cursor = 0;\n      // When there is only one node, size === elements.length - cursor.\n      this._size = 0;\n    }\n    Object.defineProperty(SimpleQueue.prototype, \"length\", {\n      get: function () {\n        return this._size;\n      },\n      enumerable: false,\n      configurable: true\n    });\n    // For exception safety, this method is structured in order:\n    // 1. Read state\n    // 2. Calculate required state mutations\n    // 3. Perform state mutations\n    SimpleQueue.prototype.push = function (element) {\n      var oldBack = this._back;\n      var newBack = oldBack;\n      if (oldBack._elements.length === QUEUE_MAX_ARRAY_SIZE - 1) {\n        newBack = {\n          _elements: [],\n          _next: undefined\n        };\n      }\n      // push() is the mutation most likely to throw an exception, so it\n      // goes first.\n      oldBack._elements.push(element);\n      if (newBack !== oldBack) {\n        this._back = newBack;\n        oldBack._next = newBack;\n      }\n      ++this._size;\n    };\n    // Like push(), shift() follows the read -> calculate -> mutate pattern for\n    // exception safety.\n    SimpleQueue.prototype.shift = function () {\n      // must not be called on an empty queue\n      var oldFront = this._front;\n      var newFront = oldFront;\n      var oldCursor = this._cursor;\n      var newCursor = oldCursor + 1;\n      var elements = oldFront._elements;\n      var element = elements[oldCursor];\n      if (newCursor === QUEUE_MAX_ARRAY_SIZE) {\n        newFront = oldFront._next;\n        newCursor = 0;\n      }\n      // No mutations before this point.\n      --this._size;\n      this._cursor = newCursor;\n      if (oldFront !== newFront) {\n        this._front = newFront;\n      }\n      // Permit shifted element to be garbage collected.\n      elements[oldCursor] = undefined;\n      return element;\n    };\n    // The tricky thing about forEach() is that it can be called\n    // re-entrantly. The queue may be mutated inside the callback. It is easy to\n    // see that push() within the callback has no negative effects since the end\n    // of the queue is checked for on every iteration. If shift() is called\n    // repeatedly within the callback then the next iteration may return an\n    // element that has been removed. In this case the callback will be called\n    // with undefined values until we either \"catch up\" with elements that still\n    // exist or reach the back of the queue.\n    SimpleQueue.prototype.forEach = function (callback) {\n      var i = this._cursor;\n      var node = this._front;\n      var elements = node._elements;\n      while (i !== elements.length || node._next !== undefined) {\n        if (i === elements.length) {\n          node = node._next;\n          elements = node._elements;\n          i = 0;\n          if (elements.length === 0) {\n            break;\n          }\n        }\n        callback(elements[i]);\n        ++i;\n      }\n    };\n    // Return the element that would be returned if shift() was called now,\n    // without modifying the queue.\n    SimpleQueue.prototype.peek = function () {\n      // must not be called on an empty queue\n      var front = this._front;\n      var cursor = this._cursor;\n      return front._elements[cursor];\n    };\n    return SimpleQueue;\n  }();\n  function ReadableStreamReaderGenericInitialize(reader, stream) {\n    reader._ownerReadableStream = stream;\n    stream._reader = reader;\n    if (stream._state === 'readable') {\n      defaultReaderClosedPromiseInitialize(reader);\n    } else if (stream._state === 'closed') {\n      defaultReaderClosedPromiseInitializeAsResolved(reader);\n    } else {\n      defaultReaderClosedPromiseInitializeAsRejected(reader, stream._storedError);\n    }\n  }\n  // A client of ReadableStreamDefaultReader and ReadableStreamBYOBReader may use these functions directly to bypass state\n  // check.\n  function ReadableStreamReaderGenericCancel(reader, reason) {\n    var stream = reader._ownerReadableStream;\n    return ReadableStreamCancel(stream, reason);\n  }\n  function ReadableStreamReaderGenericRelease(reader) {\n    if (reader._ownerReadableStream._state === 'readable') {\n      defaultReaderClosedPromiseReject(reader, new TypeError(\"Reader was released and can no longer be used to monitor the stream's closedness\"));\n    } else {\n      defaultReaderClosedPromiseResetToRejected(reader, new TypeError(\"Reader was released and can no longer be used to monitor the stream's closedness\"));\n    }\n    reader._ownerReadableStream._reader = undefined;\n    reader._ownerReadableStream = undefined;\n  }\n  // Helper functions for the readers.\n  function readerLockException(name) {\n    return new TypeError('Cannot ' + name + ' a stream using a released reader');\n  }\n  // Helper functions for the ReadableStreamDefaultReader.\n  function defaultReaderClosedPromiseInitialize(reader) {\n    reader._closedPromise = newPromise(function (resolve, reject) {\n      reader._closedPromise_resolve = resolve;\n      reader._closedPromise_reject = reject;\n    });\n  }\n  function defaultReaderClosedPromiseInitializeAsRejected(reader, reason) {\n    defaultReaderClosedPromiseInitialize(reader);\n    defaultReaderClosedPromiseReject(reader, reason);\n  }\n  function defaultReaderClosedPromiseInitializeAsResolved(reader) {\n    defaultReaderClosedPromiseInitialize(reader);\n    defaultReaderClosedPromiseResolve(reader);\n  }\n  function defaultReaderClosedPromiseReject(reader, reason) {\n    if (reader._closedPromise_reject === undefined) {\n      return;\n    }\n    setPromiseIsHandledToTrue(reader._closedPromise);\n    reader._closedPromise_reject(reason);\n    reader._closedPromise_resolve = undefined;\n    reader._closedPromise_reject = undefined;\n  }\n  function defaultReaderClosedPromiseResetToRejected(reader, reason) {\n    defaultReaderClosedPromiseInitializeAsRejected(reader, reason);\n  }\n  function defaultReaderClosedPromiseResolve(reader) {\n    if (reader._closedPromise_resolve === undefined) {\n      return;\n    }\n    reader._closedPromise_resolve(undefined);\n    reader._closedPromise_resolve = undefined;\n    reader._closedPromise_reject = undefined;\n  }\n  var AbortSteps = SymbolPolyfill('[[AbortSteps]]');\n  var ErrorSteps = SymbolPolyfill('[[ErrorSteps]]');\n  var CancelSteps = SymbolPolyfill('[[CancelSteps]]');\n  var PullSteps = SymbolPolyfill('[[PullSteps]]');\n\n  /// <reference lib=\"es2015.core\" />\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isFinite#Polyfill\n  var NumberIsFinite = Number.isFinite || function (x) {\n    return typeof x === 'number' && isFinite(x);\n  };\n\n  /// <reference lib=\"es2015.core\" />\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/trunc#Polyfill\n  var MathTrunc = Math.trunc || function (v) {\n    return v < 0 ? Math.ceil(v) : Math.floor(v);\n  };\n\n  // https://heycam.github.io/webidl/#idl-dictionaries\n  function isDictionary(x) {\n    return typeof x === 'object' || typeof x === 'function';\n  }\n  function assertDictionary(obj, context) {\n    if (obj !== undefined && !isDictionary(obj)) {\n      throw new TypeError(context + \" is not an object.\");\n    }\n  }\n  // https://heycam.github.io/webidl/#idl-callback-functions\n  function assertFunction(x, context) {\n    if (typeof x !== 'function') {\n      throw new TypeError(context + \" is not a function.\");\n    }\n  }\n  // https://heycam.github.io/webidl/#idl-object\n  function isObject(x) {\n    return typeof x === 'object' && x !== null || typeof x === 'function';\n  }\n  function assertObject(x, context) {\n    if (!isObject(x)) {\n      throw new TypeError(context + \" is not an object.\");\n    }\n  }\n  function assertRequiredArgument(x, position, context) {\n    if (x === undefined) {\n      throw new TypeError(\"Parameter \" + position + \" is required in '\" + context + \"'.\");\n    }\n  }\n  function assertRequiredField(x, field, context) {\n    if (x === undefined) {\n      throw new TypeError(field + \" is required in '\" + context + \"'.\");\n    }\n  }\n  // https://heycam.github.io/webidl/#idl-unrestricted-double\n  function convertUnrestrictedDouble(value) {\n    return Number(value);\n  }\n  function censorNegativeZero(x) {\n    return x === 0 ? 0 : x;\n  }\n  function integerPart(x) {\n    return censorNegativeZero(MathTrunc(x));\n  }\n  // https://heycam.github.io/webidl/#idl-unsigned-long-long\n  function convertUnsignedLongLongWithEnforceRange(value, context) {\n    var lowerBound = 0;\n    var upperBound = Number.MAX_SAFE_INTEGER;\n    var x = Number(value);\n    x = censorNegativeZero(x);\n    if (!NumberIsFinite(x)) {\n      throw new TypeError(context + \" is not a finite number\");\n    }\n    x = integerPart(x);\n    if (x < lowerBound || x > upperBound) {\n      throw new TypeError(context + \" is outside the accepted range of \" + lowerBound + \" to \" + upperBound + \", inclusive\");\n    }\n    if (!NumberIsFinite(x) || x === 0) {\n      return 0;\n    }\n    // TODO Use BigInt if supported?\n    // let xBigInt = BigInt(integerPart(x));\n    // xBigInt = BigInt.asUintN(64, xBigInt);\n    // return Number(xBigInt);\n    return x;\n  }\n  function assertReadableStream(x, context) {\n    if (!IsReadableStream(x)) {\n      throw new TypeError(context + \" is not a ReadableStream.\");\n    }\n  }\n\n  // Abstract operations for the ReadableStream.\n  function AcquireReadableStreamDefaultReader(stream) {\n    return new ReadableStreamDefaultReader(stream);\n  }\n  // ReadableStream API exposed for controllers.\n  function ReadableStreamAddReadRequest(stream, readRequest) {\n    stream._reader._readRequests.push(readRequest);\n  }\n  function ReadableStreamFulfillReadRequest(stream, chunk, done) {\n    var reader = stream._reader;\n    var readRequest = reader._readRequests.shift();\n    if (done) {\n      readRequest._closeSteps();\n    } else {\n      readRequest._chunkSteps(chunk);\n    }\n  }\n  function ReadableStreamGetNumReadRequests(stream) {\n    return stream._reader._readRequests.length;\n  }\n  function ReadableStreamHasDefaultReader(stream) {\n    var reader = stream._reader;\n    if (reader === undefined) {\n      return false;\n    }\n    if (!IsReadableStreamDefaultReader(reader)) {\n      return false;\n    }\n    return true;\n  }\n  /**\n   * A default reader vended by a {@link ReadableStream}.\n   *\n   * @public\n   */\n  var ReadableStreamDefaultReader = /** @class */function () {\n    function ReadableStreamDefaultReader(stream) {\n      assertRequiredArgument(stream, 1, 'ReadableStreamDefaultReader');\n      assertReadableStream(stream, 'First parameter');\n      if (IsReadableStreamLocked(stream)) {\n        throw new TypeError('This stream has already been locked for exclusive reading by another reader');\n      }\n      ReadableStreamReaderGenericInitialize(this, stream);\n      this._readRequests = new SimpleQueue();\n    }\n    Object.defineProperty(ReadableStreamDefaultReader.prototype, \"closed\", {\n      /**\n       * Returns a promise that will be fulfilled when the stream becomes closed,\n       * or rejected if the stream ever errors or the reader's lock is released before the stream finishes closing.\n       */\n      get: function () {\n        if (!IsReadableStreamDefaultReader(this)) {\n          return promiseRejectedWith(defaultReaderBrandCheckException('closed'));\n        }\n        return this._closedPromise;\n      },\n      enumerable: false,\n      configurable: true\n    });\n    /**\n     * If the reader is active, behaves the same as {@link ReadableStream.cancel | stream.cancel(reason)}.\n     */\n    ReadableStreamDefaultReader.prototype.cancel = function (reason) {\n      if (reason === void 0) {\n        reason = undefined;\n      }\n      if (!IsReadableStreamDefaultReader(this)) {\n        return promiseRejectedWith(defaultReaderBrandCheckException('cancel'));\n      }\n      if (this._ownerReadableStream === undefined) {\n        return promiseRejectedWith(readerLockException('cancel'));\n      }\n      return ReadableStreamReaderGenericCancel(this, reason);\n    };\n    /**\n     * Returns a promise that allows access to the next chunk from the stream's internal queue, if available.\n     *\n     * If reading a chunk causes the queue to become empty, more data will be pulled from the underlying source.\n     */\n    ReadableStreamDefaultReader.prototype.read = function () {\n      if (!IsReadableStreamDefaultReader(this)) {\n        return promiseRejectedWith(defaultReaderBrandCheckException('read'));\n      }\n      if (this._ownerReadableStream === undefined) {\n        return promiseRejectedWith(readerLockException('read from'));\n      }\n      var resolvePromise;\n      var rejectPromise;\n      var promise = newPromise(function (resolve, reject) {\n        resolvePromise = resolve;\n        rejectPromise = reject;\n      });\n      var readRequest = {\n        _chunkSteps: function (chunk) {\n          return resolvePromise({\n            value: chunk,\n            done: false\n          });\n        },\n        _closeSteps: function () {\n          return resolvePromise({\n            value: undefined,\n            done: true\n          });\n        },\n        _errorSteps: function (e) {\n          return rejectPromise(e);\n        }\n      };\n      ReadableStreamDefaultReaderRead(this, readRequest);\n      return promise;\n    };\n    /**\n     * Releases the reader's lock on the corresponding stream. After the lock is released, the reader is no longer active.\n     * If the associated stream is errored when the lock is released, the reader will appear errored in the same way\n     * from now on; otherwise, the reader will appear closed.\n     *\n     * A reader's lock cannot be released while it still has a pending read request, i.e., if a promise returned by\n     * the reader's {@link ReadableStreamDefaultReader.read | read()} method has not yet been settled. Attempting to\n     * do so will throw a `TypeError` and leave the reader locked to the stream.\n     */\n    ReadableStreamDefaultReader.prototype.releaseLock = function () {\n      if (!IsReadableStreamDefaultReader(this)) {\n        throw defaultReaderBrandCheckException('releaseLock');\n      }\n      if (this._ownerReadableStream === undefined) {\n        return;\n      }\n      if (this._readRequests.length > 0) {\n        throw new TypeError('Tried to release a reader lock when that reader has pending read() calls un-settled');\n      }\n      ReadableStreamReaderGenericRelease(this);\n    };\n    return ReadableStreamDefaultReader;\n  }();\n  Object.defineProperties(ReadableStreamDefaultReader.prototype, {\n    cancel: {\n      enumerable: true\n    },\n    read: {\n      enumerable: true\n    },\n    releaseLock: {\n      enumerable: true\n    },\n    closed: {\n      enumerable: true\n    }\n  });\n  if (typeof SymbolPolyfill.toStringTag === 'symbol') {\n    Object.defineProperty(ReadableStreamDefaultReader.prototype, SymbolPolyfill.toStringTag, {\n      value: 'ReadableStreamDefaultReader',\n      configurable: true\n    });\n  }\n  // Abstract operations for the readers.\n  function IsReadableStreamDefaultReader(x) {\n    if (!typeIsObject(x)) {\n      return false;\n    }\n    if (!Object.prototype.hasOwnProperty.call(x, '_readRequests')) {\n      return false;\n    }\n    return x instanceof ReadableStreamDefaultReader;\n  }\n  function ReadableStreamDefaultReaderRead(reader, readRequest) {\n    var stream = reader._ownerReadableStream;\n    stream._disturbed = true;\n    if (stream._state === 'closed') {\n      readRequest._closeSteps();\n    } else if (stream._state === 'errored') {\n      readRequest._errorSteps(stream._storedError);\n    } else {\n      stream._readableStreamController[PullSteps](readRequest);\n    }\n  }\n  // Helper functions for the ReadableStreamDefaultReader.\n  function defaultReaderBrandCheckException(name) {\n    return new TypeError(\"ReadableStreamDefaultReader.prototype.\" + name + \" can only be used on a ReadableStreamDefaultReader\");\n  }\n\n  /// <reference lib=\"es2018.asynciterable\" />\n  var _a;\n  var AsyncIteratorPrototype;\n  if (typeof SymbolPolyfill.asyncIterator === 'symbol') {\n    // We're running inside a ES2018+ environment, but we're compiling to an older syntax.\n    // We cannot access %AsyncIteratorPrototype% without non-ES2018 syntax, but we can re-create it.\n    AsyncIteratorPrototype = (_a = {},\n    // 25.1.3.1 %AsyncIteratorPrototype% [ @@asyncIterator ] ( )\n    // https://tc39.github.io/ecma262/#sec-asynciteratorprototype-asynciterator\n    _a[SymbolPolyfill.asyncIterator] = function () {\n      return this;\n    }, _a);\n    Object.defineProperty(AsyncIteratorPrototype, SymbolPolyfill.asyncIterator, {\n      enumerable: false\n    });\n  }\n\n  /// <reference lib=\"es2018.asynciterable\" />\n  var ReadableStreamAsyncIteratorImpl = /** @class */function () {\n    function ReadableStreamAsyncIteratorImpl(reader, preventCancel) {\n      this._ongoingPromise = undefined;\n      this._isFinished = false;\n      this._reader = reader;\n      this._preventCancel = preventCancel;\n    }\n    ReadableStreamAsyncIteratorImpl.prototype.next = function () {\n      var _this = this;\n      var nextSteps = function () {\n        return _this._nextSteps();\n      };\n      this._ongoingPromise = this._ongoingPromise ? transformPromiseWith(this._ongoingPromise, nextSteps, nextSteps) : nextSteps();\n      return this._ongoingPromise;\n    };\n    ReadableStreamAsyncIteratorImpl.prototype.return = function (value) {\n      var _this = this;\n      var returnSteps = function () {\n        return _this._returnSteps(value);\n      };\n      return this._ongoingPromise ? transformPromiseWith(this._ongoingPromise, returnSteps, returnSteps) : returnSteps();\n    };\n    ReadableStreamAsyncIteratorImpl.prototype._nextSteps = function () {\n      var _this = this;\n      if (this._isFinished) {\n        return Promise.resolve({\n          value: undefined,\n          done: true\n        });\n      }\n      var reader = this._reader;\n      if (reader._ownerReadableStream === undefined) {\n        return promiseRejectedWith(readerLockException('iterate'));\n      }\n      var resolvePromise;\n      var rejectPromise;\n      var promise = newPromise(function (resolve, reject) {\n        resolvePromise = resolve;\n        rejectPromise = reject;\n      });\n      var readRequest = {\n        _chunkSteps: function (chunk) {\n          _this._ongoingPromise = undefined;\n          // This needs to be delayed by one microtask, otherwise we stop pulling too early which breaks a test.\n          // FIXME Is this a bug in the specification, or in the test?\n          queueMicrotask(function () {\n            return resolvePromise({\n              value: chunk,\n              done: false\n            });\n          });\n        },\n        _closeSteps: function () {\n          _this._ongoingPromise = undefined;\n          _this._isFinished = true;\n          ReadableStreamReaderGenericRelease(reader);\n          resolvePromise({\n            value: undefined,\n            done: true\n          });\n        },\n        _errorSteps: function (reason) {\n          _this._ongoingPromise = undefined;\n          _this._isFinished = true;\n          ReadableStreamReaderGenericRelease(reader);\n          rejectPromise(reason);\n        }\n      };\n      ReadableStreamDefaultReaderRead(reader, readRequest);\n      return promise;\n    };\n    ReadableStreamAsyncIteratorImpl.prototype._returnSteps = function (value) {\n      if (this._isFinished) {\n        return Promise.resolve({\n          value: value,\n          done: true\n        });\n      }\n      this._isFinished = true;\n      var reader = this._reader;\n      if (reader._ownerReadableStream === undefined) {\n        return promiseRejectedWith(readerLockException('finish iterating'));\n      }\n      if (!this._preventCancel) {\n        var result = ReadableStreamReaderGenericCancel(reader, value);\n        ReadableStreamReaderGenericRelease(reader);\n        return transformPromiseWith(result, function () {\n          return {\n            value: value,\n            done: true\n          };\n        });\n      }\n      ReadableStreamReaderGenericRelease(reader);\n      return promiseResolvedWith({\n        value: value,\n        done: true\n      });\n    };\n    return ReadableStreamAsyncIteratorImpl;\n  }();\n  var ReadableStreamAsyncIteratorPrototype = {\n    next: function () {\n      if (!IsReadableStreamAsyncIterator(this)) {\n        return promiseRejectedWith(streamAsyncIteratorBrandCheckException('next'));\n      }\n      return this._asyncIteratorImpl.next();\n    },\n    return: function (value) {\n      if (!IsReadableStreamAsyncIterator(this)) {\n        return promiseRejectedWith(streamAsyncIteratorBrandCheckException('return'));\n      }\n      return this._asyncIteratorImpl.return(value);\n    }\n  };\n  if (AsyncIteratorPrototype !== undefined) {\n    Object.setPrototypeOf(ReadableStreamAsyncIteratorPrototype, AsyncIteratorPrototype);\n  }\n  // Abstract operations for the ReadableStream.\n  function AcquireReadableStreamAsyncIterator(stream, preventCancel) {\n    var reader = AcquireReadableStreamDefaultReader(stream);\n    var impl = new ReadableStreamAsyncIteratorImpl(reader, preventCancel);\n    var iterator = Object.create(ReadableStreamAsyncIteratorPrototype);\n    iterator._asyncIteratorImpl = impl;\n    return iterator;\n  }\n  function IsReadableStreamAsyncIterator(x) {\n    if (!typeIsObject(x)) {\n      return false;\n    }\n    if (!Object.prototype.hasOwnProperty.call(x, '_asyncIteratorImpl')) {\n      return false;\n    }\n    try {\n      // noinspection SuspiciousTypeOfGuard\n      return x._asyncIteratorImpl instanceof ReadableStreamAsyncIteratorImpl;\n    } catch (_a) {\n      return false;\n    }\n  }\n  // Helper functions for the ReadableStream.\n  function streamAsyncIteratorBrandCheckException(name) {\n    return new TypeError(\"ReadableStreamAsyncIterator.\" + name + \" can only be used on a ReadableSteamAsyncIterator\");\n  }\n\n  /// <reference lib=\"es2015.core\" />\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isNaN#Polyfill\n  var NumberIsNaN = Number.isNaN || function (x) {\n    // eslint-disable-next-line no-self-compare\n    return x !== x;\n  };\n  function CreateArrayFromList(elements) {\n    // We use arrays to represent lists, so this is basically a no-op.\n    // Do a slice though just in case we happen to depend on the unique-ness.\n    return elements.slice();\n  }\n  function CopyDataBlockBytes(dest, destOffset, src, srcOffset, n) {\n    new Uint8Array(dest).set(new Uint8Array(src, srcOffset, n), destOffset);\n  }\n  // Not implemented correctly\n  function TransferArrayBuffer(O) {\n    return O;\n  }\n  // Not implemented correctly\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  function IsDetachedBuffer(O) {\n    return false;\n  }\n  function ArrayBufferSlice(buffer, begin, end) {\n    // ArrayBuffer.prototype.slice is not available on IE10\n    // https://www.caniuse.com/mdn-javascript_builtins_arraybuffer_slice\n    if (buffer.slice) {\n      return buffer.slice(begin, end);\n    }\n    var length = end - begin;\n    var slice = new ArrayBuffer(length);\n    CopyDataBlockBytes(slice, 0, buffer, begin, length);\n    return slice;\n  }\n  function IsNonNegativeNumber(v) {\n    if (typeof v !== 'number') {\n      return false;\n    }\n    if (NumberIsNaN(v)) {\n      return false;\n    }\n    if (v < 0) {\n      return false;\n    }\n    return true;\n  }\n  function CloneAsUint8Array(O) {\n    var buffer = ArrayBufferSlice(O.buffer, O.byteOffset, O.byteOffset + O.byteLength);\n    return new Uint8Array(buffer);\n  }\n  function DequeueValue(container) {\n    var pair = container._queue.shift();\n    container._queueTotalSize -= pair.size;\n    if (container._queueTotalSize < 0) {\n      container._queueTotalSize = 0;\n    }\n    return pair.value;\n  }\n  function EnqueueValueWithSize(container, value, size) {\n    if (!IsNonNegativeNumber(size) || size === Infinity) {\n      throw new RangeError('Size must be a finite, non-NaN, non-negative number.');\n    }\n    container._queue.push({\n      value: value,\n      size: size\n    });\n    container._queueTotalSize += size;\n  }\n  function PeekQueueValue(container) {\n    var pair = container._queue.peek();\n    return pair.value;\n  }\n  function ResetQueue(container) {\n    container._queue = new SimpleQueue();\n    container._queueTotalSize = 0;\n  }\n\n  /**\n   * A pull-into request in a {@link ReadableByteStreamController}.\n   *\n   * @public\n   */\n  var ReadableStreamBYOBRequest = /** @class */function () {\n    function ReadableStreamBYOBRequest() {\n      throw new TypeError('Illegal constructor');\n    }\n    Object.defineProperty(ReadableStreamBYOBRequest.prototype, \"view\", {\n      /**\n       * Returns the view for writing in to, or `null` if the BYOB request has already been responded to.\n       */\n      get: function () {\n        if (!IsReadableStreamBYOBRequest(this)) {\n          throw byobRequestBrandCheckException('view');\n        }\n        return this._view;\n      },\n      enumerable: false,\n      configurable: true\n    });\n    ReadableStreamBYOBRequest.prototype.respond = function (bytesWritten) {\n      if (!IsReadableStreamBYOBRequest(this)) {\n        throw byobRequestBrandCheckException('respond');\n      }\n      assertRequiredArgument(bytesWritten, 1, 'respond');\n      bytesWritten = convertUnsignedLongLongWithEnforceRange(bytesWritten, 'First parameter');\n      if (this._associatedReadableByteStreamController === undefined) {\n        throw new TypeError('This BYOB request has been invalidated');\n      }\n      if (IsDetachedBuffer(this._view.buffer)) ;\n      ReadableByteStreamControllerRespond(this._associatedReadableByteStreamController, bytesWritten);\n    };\n    ReadableStreamBYOBRequest.prototype.respondWithNewView = function (view) {\n      if (!IsReadableStreamBYOBRequest(this)) {\n        throw byobRequestBrandCheckException('respondWithNewView');\n      }\n      assertRequiredArgument(view, 1, 'respondWithNewView');\n      if (!ArrayBuffer.isView(view)) {\n        throw new TypeError('You can only respond with array buffer views');\n      }\n      if (this._associatedReadableByteStreamController === undefined) {\n        throw new TypeError('This BYOB request has been invalidated');\n      }\n      if (IsDetachedBuffer(view.buffer)) ;\n      ReadableByteStreamControllerRespondWithNewView(this._associatedReadableByteStreamController, view);\n    };\n    return ReadableStreamBYOBRequest;\n  }();\n  Object.defineProperties(ReadableStreamBYOBRequest.prototype, {\n    respond: {\n      enumerable: true\n    },\n    respondWithNewView: {\n      enumerable: true\n    },\n    view: {\n      enumerable: true\n    }\n  });\n  if (typeof SymbolPolyfill.toStringTag === 'symbol') {\n    Object.defineProperty(ReadableStreamBYOBRequest.prototype, SymbolPolyfill.toStringTag, {\n      value: 'ReadableStreamBYOBRequest',\n      configurable: true\n    });\n  }\n  /**\n   * Allows control of a {@link ReadableStream | readable byte stream}'s state and internal queue.\n   *\n   * @public\n   */\n  var ReadableByteStreamController = /** @class */function () {\n    function ReadableByteStreamController() {\n      throw new TypeError('Illegal constructor');\n    }\n    Object.defineProperty(ReadableByteStreamController.prototype, \"byobRequest\", {\n      /**\n       * Returns the current BYOB pull request, or `null` if there isn't one.\n       */\n      get: function () {\n        if (!IsReadableByteStreamController(this)) {\n          throw byteStreamControllerBrandCheckException('byobRequest');\n        }\n        return ReadableByteStreamControllerGetBYOBRequest(this);\n      },\n      enumerable: false,\n      configurable: true\n    });\n    Object.defineProperty(ReadableByteStreamController.prototype, \"desiredSize\", {\n      /**\n       * Returns the desired size to fill the controlled stream's internal queue. It can be negative, if the queue is\n       * over-full. An underlying byte source ought to use this information to determine when and how to apply backpressure.\n       */\n      get: function () {\n        if (!IsReadableByteStreamController(this)) {\n          throw byteStreamControllerBrandCheckException('desiredSize');\n        }\n        return ReadableByteStreamControllerGetDesiredSize(this);\n      },\n      enumerable: false,\n      configurable: true\n    });\n    /**\n     * Closes the controlled readable stream. Consumers will still be able to read any previously-enqueued chunks from\n     * the stream, but once those are read, the stream will become closed.\n     */\n    ReadableByteStreamController.prototype.close = function () {\n      if (!IsReadableByteStreamController(this)) {\n        throw byteStreamControllerBrandCheckException('close');\n      }\n      if (this._closeRequested) {\n        throw new TypeError('The stream has already been closed; do not close it again!');\n      }\n      var state = this._controlledReadableByteStream._state;\n      if (state !== 'readable') {\n        throw new TypeError(\"The stream (in \" + state + \" state) is not in the readable state and cannot be closed\");\n      }\n      ReadableByteStreamControllerClose(this);\n    };\n    ReadableByteStreamController.prototype.enqueue = function (chunk) {\n      if (!IsReadableByteStreamController(this)) {\n        throw byteStreamControllerBrandCheckException('enqueue');\n      }\n      assertRequiredArgument(chunk, 1, 'enqueue');\n      if (!ArrayBuffer.isView(chunk)) {\n        throw new TypeError('chunk must be an array buffer view');\n      }\n      if (chunk.byteLength === 0) {\n        throw new TypeError('chunk must have non-zero byteLength');\n      }\n      if (chunk.buffer.byteLength === 0) {\n        throw new TypeError(\"chunk's buffer must have non-zero byteLength\");\n      }\n      if (this._closeRequested) {\n        throw new TypeError('stream is closed or draining');\n      }\n      var state = this._controlledReadableByteStream._state;\n      if (state !== 'readable') {\n        throw new TypeError(\"The stream (in \" + state + \" state) is not in the readable state and cannot be enqueued to\");\n      }\n      ReadableByteStreamControllerEnqueue(this, chunk);\n    };\n    /**\n     * Errors the controlled readable stream, making all future interactions with it fail with the given error `e`.\n     */\n    ReadableByteStreamController.prototype.error = function (e) {\n      if (e === void 0) {\n        e = undefined;\n      }\n      if (!IsReadableByteStreamController(this)) {\n        throw byteStreamControllerBrandCheckException('error');\n      }\n      ReadableByteStreamControllerError(this, e);\n    };\n    /** @internal */\n    ReadableByteStreamController.prototype[CancelSteps] = function (reason) {\n      ReadableByteStreamControllerClearPendingPullIntos(this);\n      ResetQueue(this);\n      var result = this._cancelAlgorithm(reason);\n      ReadableByteStreamControllerClearAlgorithms(this);\n      return result;\n    };\n    /** @internal */\n    ReadableByteStreamController.prototype[PullSteps] = function (readRequest) {\n      var stream = this._controlledReadableByteStream;\n      if (this._queueTotalSize > 0) {\n        var entry = this._queue.shift();\n        this._queueTotalSize -= entry.byteLength;\n        ReadableByteStreamControllerHandleQueueDrain(this);\n        var view = new Uint8Array(entry.buffer, entry.byteOffset, entry.byteLength);\n        readRequest._chunkSteps(view);\n        return;\n      }\n      var autoAllocateChunkSize = this._autoAllocateChunkSize;\n      if (autoAllocateChunkSize !== undefined) {\n        var buffer = void 0;\n        try {\n          buffer = new ArrayBuffer(autoAllocateChunkSize);\n        } catch (bufferE) {\n          readRequest._errorSteps(bufferE);\n          return;\n        }\n        var pullIntoDescriptor = {\n          buffer: buffer,\n          bufferByteLength: autoAllocateChunkSize,\n          byteOffset: 0,\n          byteLength: autoAllocateChunkSize,\n          bytesFilled: 0,\n          elementSize: 1,\n          viewConstructor: Uint8Array,\n          readerType: 'default'\n        };\n        this._pendingPullIntos.push(pullIntoDescriptor);\n      }\n      ReadableStreamAddReadRequest(stream, readRequest);\n      ReadableByteStreamControllerCallPullIfNeeded(this);\n    };\n    return ReadableByteStreamController;\n  }();\n  Object.defineProperties(ReadableByteStreamController.prototype, {\n    close: {\n      enumerable: true\n    },\n    enqueue: {\n      enumerable: true\n    },\n    error: {\n      enumerable: true\n    },\n    byobRequest: {\n      enumerable: true\n    },\n    desiredSize: {\n      enumerable: true\n    }\n  });\n  if (typeof SymbolPolyfill.toStringTag === 'symbol') {\n    Object.defineProperty(ReadableByteStreamController.prototype, SymbolPolyfill.toStringTag, {\n      value: 'ReadableByteStreamController',\n      configurable: true\n    });\n  }\n  // Abstract operations for the ReadableByteStreamController.\n  function IsReadableByteStreamController(x) {\n    if (!typeIsObject(x)) {\n      return false;\n    }\n    if (!Object.prototype.hasOwnProperty.call(x, '_controlledReadableByteStream')) {\n      return false;\n    }\n    return x instanceof ReadableByteStreamController;\n  }\n  function IsReadableStreamBYOBRequest(x) {\n    if (!typeIsObject(x)) {\n      return false;\n    }\n    if (!Object.prototype.hasOwnProperty.call(x, '_associatedReadableByteStreamController')) {\n      return false;\n    }\n    return x instanceof ReadableStreamBYOBRequest;\n  }\n  function ReadableByteStreamControllerCallPullIfNeeded(controller) {\n    var shouldPull = ReadableByteStreamControllerShouldCallPull(controller);\n    if (!shouldPull) {\n      return;\n    }\n    if (controller._pulling) {\n      controller._pullAgain = true;\n      return;\n    }\n    controller._pulling = true;\n    // TODO: Test controller argument\n    var pullPromise = controller._pullAlgorithm();\n    uponPromise(pullPromise, function () {\n      controller._pulling = false;\n      if (controller._pullAgain) {\n        controller._pullAgain = false;\n        ReadableByteStreamControllerCallPullIfNeeded(controller);\n      }\n    }, function (e) {\n      ReadableByteStreamControllerError(controller, e);\n    });\n  }\n  function ReadableByteStreamControllerClearPendingPullIntos(controller) {\n    ReadableByteStreamControllerInvalidateBYOBRequest(controller);\n    controller._pendingPullIntos = new SimpleQueue();\n  }\n  function ReadableByteStreamControllerCommitPullIntoDescriptor(stream, pullIntoDescriptor) {\n    var done = false;\n    if (stream._state === 'closed') {\n      done = true;\n    }\n    var filledView = ReadableByteStreamControllerConvertPullIntoDescriptor(pullIntoDescriptor);\n    if (pullIntoDescriptor.readerType === 'default') {\n      ReadableStreamFulfillReadRequest(stream, filledView, done);\n    } else {\n      ReadableStreamFulfillReadIntoRequest(stream, filledView, done);\n    }\n  }\n  function ReadableByteStreamControllerConvertPullIntoDescriptor(pullIntoDescriptor) {\n    var bytesFilled = pullIntoDescriptor.bytesFilled;\n    var elementSize = pullIntoDescriptor.elementSize;\n    return new pullIntoDescriptor.viewConstructor(pullIntoDescriptor.buffer, pullIntoDescriptor.byteOffset, bytesFilled / elementSize);\n  }\n  function ReadableByteStreamControllerEnqueueChunkToQueue(controller, buffer, byteOffset, byteLength) {\n    controller._queue.push({\n      buffer: buffer,\n      byteOffset: byteOffset,\n      byteLength: byteLength\n    });\n    controller._queueTotalSize += byteLength;\n  }\n  function ReadableByteStreamControllerFillPullIntoDescriptorFromQueue(controller, pullIntoDescriptor) {\n    var elementSize = pullIntoDescriptor.elementSize;\n    var currentAlignedBytes = pullIntoDescriptor.bytesFilled - pullIntoDescriptor.bytesFilled % elementSize;\n    var maxBytesToCopy = Math.min(controller._queueTotalSize, pullIntoDescriptor.byteLength - pullIntoDescriptor.bytesFilled);\n    var maxBytesFilled = pullIntoDescriptor.bytesFilled + maxBytesToCopy;\n    var maxAlignedBytes = maxBytesFilled - maxBytesFilled % elementSize;\n    var totalBytesToCopyRemaining = maxBytesToCopy;\n    var ready = false;\n    if (maxAlignedBytes > currentAlignedBytes) {\n      totalBytesToCopyRemaining = maxAlignedBytes - pullIntoDescriptor.bytesFilled;\n      ready = true;\n    }\n    var queue = controller._queue;\n    while (totalBytesToCopyRemaining > 0) {\n      var headOfQueue = queue.peek();\n      var bytesToCopy = Math.min(totalBytesToCopyRemaining, headOfQueue.byteLength);\n      var destStart = pullIntoDescriptor.byteOffset + pullIntoDescriptor.bytesFilled;\n      CopyDataBlockBytes(pullIntoDescriptor.buffer, destStart, headOfQueue.buffer, headOfQueue.byteOffset, bytesToCopy);\n      if (headOfQueue.byteLength === bytesToCopy) {\n        queue.shift();\n      } else {\n        headOfQueue.byteOffset += bytesToCopy;\n        headOfQueue.byteLength -= bytesToCopy;\n      }\n      controller._queueTotalSize -= bytesToCopy;\n      ReadableByteStreamControllerFillHeadPullIntoDescriptor(controller, bytesToCopy, pullIntoDescriptor);\n      totalBytesToCopyRemaining -= bytesToCopy;\n    }\n    return ready;\n  }\n  function ReadableByteStreamControllerFillHeadPullIntoDescriptor(controller, size, pullIntoDescriptor) {\n    pullIntoDescriptor.bytesFilled += size;\n  }\n  function ReadableByteStreamControllerHandleQueueDrain(controller) {\n    if (controller._queueTotalSize === 0 && controller._closeRequested) {\n      ReadableByteStreamControllerClearAlgorithms(controller);\n      ReadableStreamClose(controller._controlledReadableByteStream);\n    } else {\n      ReadableByteStreamControllerCallPullIfNeeded(controller);\n    }\n  }\n  function ReadableByteStreamControllerInvalidateBYOBRequest(controller) {\n    if (controller._byobRequest === null) {\n      return;\n    }\n    controller._byobRequest._associatedReadableByteStreamController = undefined;\n    controller._byobRequest._view = null;\n    controller._byobRequest = null;\n  }\n  function ReadableByteStreamControllerProcessPullIntoDescriptorsUsingQueue(controller) {\n    while (controller._pendingPullIntos.length > 0) {\n      if (controller._queueTotalSize === 0) {\n        return;\n      }\n      var pullIntoDescriptor = controller._pendingPullIntos.peek();\n      if (ReadableByteStreamControllerFillPullIntoDescriptorFromQueue(controller, pullIntoDescriptor)) {\n        ReadableByteStreamControllerShiftPendingPullInto(controller);\n        ReadableByteStreamControllerCommitPullIntoDescriptor(controller._controlledReadableByteStream, pullIntoDescriptor);\n      }\n    }\n  }\n  function ReadableByteStreamControllerPullInto(controller, view, readIntoRequest) {\n    var stream = controller._controlledReadableByteStream;\n    var elementSize = 1;\n    if (view.constructor !== DataView) {\n      elementSize = view.constructor.BYTES_PER_ELEMENT;\n    }\n    var ctor = view.constructor;\n    // try {\n    var buffer = TransferArrayBuffer(view.buffer);\n    // } catch (e) {\n    //   readIntoRequest._errorSteps(e);\n    //   return;\n    // }\n    var pullIntoDescriptor = {\n      buffer: buffer,\n      bufferByteLength: buffer.byteLength,\n      byteOffset: view.byteOffset,\n      byteLength: view.byteLength,\n      bytesFilled: 0,\n      elementSize: elementSize,\n      viewConstructor: ctor,\n      readerType: 'byob'\n    };\n    if (controller._pendingPullIntos.length > 0) {\n      controller._pendingPullIntos.push(pullIntoDescriptor);\n      // No ReadableByteStreamControllerCallPullIfNeeded() call since:\n      // - No change happens on desiredSize\n      // - The source has already been notified of that there's at least 1 pending read(view)\n      ReadableStreamAddReadIntoRequest(stream, readIntoRequest);\n      return;\n    }\n    if (stream._state === 'closed') {\n      var emptyView = new ctor(pullIntoDescriptor.buffer, pullIntoDescriptor.byteOffset, 0);\n      readIntoRequest._closeSteps(emptyView);\n      return;\n    }\n    if (controller._queueTotalSize > 0) {\n      if (ReadableByteStreamControllerFillPullIntoDescriptorFromQueue(controller, pullIntoDescriptor)) {\n        var filledView = ReadableByteStreamControllerConvertPullIntoDescriptor(pullIntoDescriptor);\n        ReadableByteStreamControllerHandleQueueDrain(controller);\n        readIntoRequest._chunkSteps(filledView);\n        return;\n      }\n      if (controller._closeRequested) {\n        var e = new TypeError('Insufficient bytes to fill elements in the given buffer');\n        ReadableByteStreamControllerError(controller, e);\n        readIntoRequest._errorSteps(e);\n        return;\n      }\n    }\n    controller._pendingPullIntos.push(pullIntoDescriptor);\n    ReadableStreamAddReadIntoRequest(stream, readIntoRequest);\n    ReadableByteStreamControllerCallPullIfNeeded(controller);\n  }\n  function ReadableByteStreamControllerRespondInClosedState(controller, firstDescriptor) {\n    var stream = controller._controlledReadableByteStream;\n    if (ReadableStreamHasBYOBReader(stream)) {\n      while (ReadableStreamGetNumReadIntoRequests(stream) > 0) {\n        var pullIntoDescriptor = ReadableByteStreamControllerShiftPendingPullInto(controller);\n        ReadableByteStreamControllerCommitPullIntoDescriptor(stream, pullIntoDescriptor);\n      }\n    }\n  }\n  function ReadableByteStreamControllerRespondInReadableState(controller, bytesWritten, pullIntoDescriptor) {\n    ReadableByteStreamControllerFillHeadPullIntoDescriptor(controller, bytesWritten, pullIntoDescriptor);\n    if (pullIntoDescriptor.bytesFilled < pullIntoDescriptor.elementSize) {\n      return;\n    }\n    ReadableByteStreamControllerShiftPendingPullInto(controller);\n    var remainderSize = pullIntoDescriptor.bytesFilled % pullIntoDescriptor.elementSize;\n    if (remainderSize > 0) {\n      var end = pullIntoDescriptor.byteOffset + pullIntoDescriptor.bytesFilled;\n      var remainder = ArrayBufferSlice(pullIntoDescriptor.buffer, end - remainderSize, end);\n      ReadableByteStreamControllerEnqueueChunkToQueue(controller, remainder, 0, remainder.byteLength);\n    }\n    pullIntoDescriptor.bytesFilled -= remainderSize;\n    ReadableByteStreamControllerCommitPullIntoDescriptor(controller._controlledReadableByteStream, pullIntoDescriptor);\n    ReadableByteStreamControllerProcessPullIntoDescriptorsUsingQueue(controller);\n  }\n  function ReadableByteStreamControllerRespondInternal(controller, bytesWritten) {\n    var firstDescriptor = controller._pendingPullIntos.peek();\n    ReadableByteStreamControllerInvalidateBYOBRequest(controller);\n    var state = controller._controlledReadableByteStream._state;\n    if (state === 'closed') {\n      ReadableByteStreamControllerRespondInClosedState(controller);\n    } else {\n      ReadableByteStreamControllerRespondInReadableState(controller, bytesWritten, firstDescriptor);\n    }\n    ReadableByteStreamControllerCallPullIfNeeded(controller);\n  }\n  function ReadableByteStreamControllerShiftPendingPullInto(controller) {\n    var descriptor = controller._pendingPullIntos.shift();\n    return descriptor;\n  }\n  function ReadableByteStreamControllerShouldCallPull(controller) {\n    var stream = controller._controlledReadableByteStream;\n    if (stream._state !== 'readable') {\n      return false;\n    }\n    if (controller._closeRequested) {\n      return false;\n    }\n    if (!controller._started) {\n      return false;\n    }\n    if (ReadableStreamHasDefaultReader(stream) && ReadableStreamGetNumReadRequests(stream) > 0) {\n      return true;\n    }\n    if (ReadableStreamHasBYOBReader(stream) && ReadableStreamGetNumReadIntoRequests(stream) > 0) {\n      return true;\n    }\n    var desiredSize = ReadableByteStreamControllerGetDesiredSize(controller);\n    if (desiredSize > 0) {\n      return true;\n    }\n    return false;\n  }\n  function ReadableByteStreamControllerClearAlgorithms(controller) {\n    controller._pullAlgorithm = undefined;\n    controller._cancelAlgorithm = undefined;\n  }\n  // A client of ReadableByteStreamController may use these functions directly to bypass state check.\n  function ReadableByteStreamControllerClose(controller) {\n    var stream = controller._controlledReadableByteStream;\n    if (controller._closeRequested || stream._state !== 'readable') {\n      return;\n    }\n    if (controller._queueTotalSize > 0) {\n      controller._closeRequested = true;\n      return;\n    }\n    if (controller._pendingPullIntos.length > 0) {\n      var firstPendingPullInto = controller._pendingPullIntos.peek();\n      if (firstPendingPullInto.bytesFilled > 0) {\n        var e = new TypeError('Insufficient bytes to fill elements in the given buffer');\n        ReadableByteStreamControllerError(controller, e);\n        throw e;\n      }\n    }\n    ReadableByteStreamControllerClearAlgorithms(controller);\n    ReadableStreamClose(stream);\n  }\n  function ReadableByteStreamControllerEnqueue(controller, chunk) {\n    var stream = controller._controlledReadableByteStream;\n    if (controller._closeRequested || stream._state !== 'readable') {\n      return;\n    }\n    var buffer = chunk.buffer;\n    var byteOffset = chunk.byteOffset;\n    var byteLength = chunk.byteLength;\n    var transferredBuffer = TransferArrayBuffer(buffer);\n    if (controller._pendingPullIntos.length > 0) {\n      var firstPendingPullInto = controller._pendingPullIntos.peek();\n      if (IsDetachedBuffer(firstPendingPullInto.buffer)) ;\n      firstPendingPullInto.buffer = TransferArrayBuffer(firstPendingPullInto.buffer);\n    }\n    ReadableByteStreamControllerInvalidateBYOBRequest(controller);\n    if (ReadableStreamHasDefaultReader(stream)) {\n      if (ReadableStreamGetNumReadRequests(stream) === 0) {\n        ReadableByteStreamControllerEnqueueChunkToQueue(controller, transferredBuffer, byteOffset, byteLength);\n      } else {\n        if (controller._pendingPullIntos.length > 0) {\n          ReadableByteStreamControllerShiftPendingPullInto(controller);\n        }\n        var transferredView = new Uint8Array(transferredBuffer, byteOffset, byteLength);\n        ReadableStreamFulfillReadRequest(stream, transferredView, false);\n      }\n    } else if (ReadableStreamHasBYOBReader(stream)) {\n      // TODO: Ideally in this branch detaching should happen only if the buffer is not consumed fully.\n      ReadableByteStreamControllerEnqueueChunkToQueue(controller, transferredBuffer, byteOffset, byteLength);\n      ReadableByteStreamControllerProcessPullIntoDescriptorsUsingQueue(controller);\n    } else {\n      ReadableByteStreamControllerEnqueueChunkToQueue(controller, transferredBuffer, byteOffset, byteLength);\n    }\n    ReadableByteStreamControllerCallPullIfNeeded(controller);\n  }\n  function ReadableByteStreamControllerError(controller, e) {\n    var stream = controller._controlledReadableByteStream;\n    if (stream._state !== 'readable') {\n      return;\n    }\n    ReadableByteStreamControllerClearPendingPullIntos(controller);\n    ResetQueue(controller);\n    ReadableByteStreamControllerClearAlgorithms(controller);\n    ReadableStreamError(stream, e);\n  }\n  function ReadableByteStreamControllerGetBYOBRequest(controller) {\n    if (controller._byobRequest === null && controller._pendingPullIntos.length > 0) {\n      var firstDescriptor = controller._pendingPullIntos.peek();\n      var view = new Uint8Array(firstDescriptor.buffer, firstDescriptor.byteOffset + firstDescriptor.bytesFilled, firstDescriptor.byteLength - firstDescriptor.bytesFilled);\n      var byobRequest = Object.create(ReadableStreamBYOBRequest.prototype);\n      SetUpReadableStreamBYOBRequest(byobRequest, controller, view);\n      controller._byobRequest = byobRequest;\n    }\n    return controller._byobRequest;\n  }\n  function ReadableByteStreamControllerGetDesiredSize(controller) {\n    var state = controller._controlledReadableByteStream._state;\n    if (state === 'errored') {\n      return null;\n    }\n    if (state === 'closed') {\n      return 0;\n    }\n    return controller._strategyHWM - controller._queueTotalSize;\n  }\n  function ReadableByteStreamControllerRespond(controller, bytesWritten) {\n    var firstDescriptor = controller._pendingPullIntos.peek();\n    var state = controller._controlledReadableByteStream._state;\n    if (state === 'closed') {\n      if (bytesWritten !== 0) {\n        throw new TypeError('bytesWritten must be 0 when calling respond() on a closed stream');\n      }\n    } else {\n      if (bytesWritten === 0) {\n        throw new TypeError('bytesWritten must be greater than 0 when calling respond() on a readable stream');\n      }\n      if (firstDescriptor.bytesFilled + bytesWritten > firstDescriptor.byteLength) {\n        throw new RangeError('bytesWritten out of range');\n      }\n    }\n    firstDescriptor.buffer = TransferArrayBuffer(firstDescriptor.buffer);\n    ReadableByteStreamControllerRespondInternal(controller, bytesWritten);\n  }\n  function ReadableByteStreamControllerRespondWithNewView(controller, view) {\n    var firstDescriptor = controller._pendingPullIntos.peek();\n    var state = controller._controlledReadableByteStream._state;\n    if (state === 'closed') {\n      if (view.byteLength !== 0) {\n        throw new TypeError('The view\\'s length must be 0 when calling respondWithNewView() on a closed stream');\n      }\n    } else {\n      if (view.byteLength === 0) {\n        throw new TypeError('The view\\'s length must be greater than 0 when calling respondWithNewView() on a readable stream');\n      }\n    }\n    if (firstDescriptor.byteOffset + firstDescriptor.bytesFilled !== view.byteOffset) {\n      throw new RangeError('The region specified by view does not match byobRequest');\n    }\n    if (firstDescriptor.bufferByteLength !== view.buffer.byteLength) {\n      throw new RangeError('The buffer of view has different capacity than byobRequest');\n    }\n    if (firstDescriptor.bytesFilled + view.byteLength > firstDescriptor.byteLength) {\n      throw new RangeError('The region specified by view is larger than byobRequest');\n    }\n    var viewByteLength = view.byteLength;\n    firstDescriptor.buffer = TransferArrayBuffer(view.buffer);\n    ReadableByteStreamControllerRespondInternal(controller, viewByteLength);\n  }\n  function SetUpReadableByteStreamController(stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark, autoAllocateChunkSize) {\n    controller._controlledReadableByteStream = stream;\n    controller._pullAgain = false;\n    controller._pulling = false;\n    controller._byobRequest = null;\n    // Need to set the slots so that the assert doesn't fire. In the spec the slots already exist implicitly.\n    controller._queue = controller._queueTotalSize = undefined;\n    ResetQueue(controller);\n    controller._closeRequested = false;\n    controller._started = false;\n    controller._strategyHWM = highWaterMark;\n    controller._pullAlgorithm = pullAlgorithm;\n    controller._cancelAlgorithm = cancelAlgorithm;\n    controller._autoAllocateChunkSize = autoAllocateChunkSize;\n    controller._pendingPullIntos = new SimpleQueue();\n    stream._readableStreamController = controller;\n    var startResult = startAlgorithm();\n    uponPromise(promiseResolvedWith(startResult), function () {\n      controller._started = true;\n      ReadableByteStreamControllerCallPullIfNeeded(controller);\n    }, function (r) {\n      ReadableByteStreamControllerError(controller, r);\n    });\n  }\n  function SetUpReadableByteStreamControllerFromUnderlyingSource(stream, underlyingByteSource, highWaterMark) {\n    var controller = Object.create(ReadableByteStreamController.prototype);\n    var startAlgorithm = function () {\n      return undefined;\n    };\n    var pullAlgorithm = function () {\n      return promiseResolvedWith(undefined);\n    };\n    var cancelAlgorithm = function () {\n      return promiseResolvedWith(undefined);\n    };\n    if (underlyingByteSource.start !== undefined) {\n      startAlgorithm = function () {\n        return underlyingByteSource.start(controller);\n      };\n    }\n    if (underlyingByteSource.pull !== undefined) {\n      pullAlgorithm = function () {\n        return underlyingByteSource.pull(controller);\n      };\n    }\n    if (underlyingByteSource.cancel !== undefined) {\n      cancelAlgorithm = function (reason) {\n        return underlyingByteSource.cancel(reason);\n      };\n    }\n    var autoAllocateChunkSize = underlyingByteSource.autoAllocateChunkSize;\n    if (autoAllocateChunkSize === 0) {\n      throw new TypeError('autoAllocateChunkSize must be greater than 0');\n    }\n    SetUpReadableByteStreamController(stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark, autoAllocateChunkSize);\n  }\n  function SetUpReadableStreamBYOBRequest(request, controller, view) {\n    request._associatedReadableByteStreamController = controller;\n    request._view = view;\n  }\n  // Helper functions for the ReadableStreamBYOBRequest.\n  function byobRequestBrandCheckException(name) {\n    return new TypeError(\"ReadableStreamBYOBRequest.prototype.\" + name + \" can only be used on a ReadableStreamBYOBRequest\");\n  }\n  // Helper functions for the ReadableByteStreamController.\n  function byteStreamControllerBrandCheckException(name) {\n    return new TypeError(\"ReadableByteStreamController.prototype.\" + name + \" can only be used on a ReadableByteStreamController\");\n  }\n\n  // Abstract operations for the ReadableStream.\n  function AcquireReadableStreamBYOBReader(stream) {\n    return new ReadableStreamBYOBReader(stream);\n  }\n  // ReadableStream API exposed for controllers.\n  function ReadableStreamAddReadIntoRequest(stream, readIntoRequest) {\n    stream._reader._readIntoRequests.push(readIntoRequest);\n  }\n  function ReadableStreamFulfillReadIntoRequest(stream, chunk, done) {\n    var reader = stream._reader;\n    var readIntoRequest = reader._readIntoRequests.shift();\n    if (done) {\n      readIntoRequest._closeSteps(chunk);\n    } else {\n      readIntoRequest._chunkSteps(chunk);\n    }\n  }\n  function ReadableStreamGetNumReadIntoRequests(stream) {\n    return stream._reader._readIntoRequests.length;\n  }\n  function ReadableStreamHasBYOBReader(stream) {\n    var reader = stream._reader;\n    if (reader === undefined) {\n      return false;\n    }\n    if (!IsReadableStreamBYOBReader(reader)) {\n      return false;\n    }\n    return true;\n  }\n  /**\n   * A BYOB reader vended by a {@link ReadableStream}.\n   *\n   * @public\n   */\n  var ReadableStreamBYOBReader = /** @class */function () {\n    function ReadableStreamBYOBReader(stream) {\n      assertRequiredArgument(stream, 1, 'ReadableStreamBYOBReader');\n      assertReadableStream(stream, 'First parameter');\n      if (IsReadableStreamLocked(stream)) {\n        throw new TypeError('This stream has already been locked for exclusive reading by another reader');\n      }\n      if (!IsReadableByteStreamController(stream._readableStreamController)) {\n        throw new TypeError('Cannot construct a ReadableStreamBYOBReader for a stream not constructed with a byte ' + 'source');\n      }\n      ReadableStreamReaderGenericInitialize(this, stream);\n      this._readIntoRequests = new SimpleQueue();\n    }\n    Object.defineProperty(ReadableStreamBYOBReader.prototype, \"closed\", {\n      /**\n       * Returns a promise that will be fulfilled when the stream becomes closed, or rejected if the stream ever errors or\n       * the reader's lock is released before the stream finishes closing.\n       */\n      get: function () {\n        if (!IsReadableStreamBYOBReader(this)) {\n          return promiseRejectedWith(byobReaderBrandCheckException('closed'));\n        }\n        return this._closedPromise;\n      },\n      enumerable: false,\n      configurable: true\n    });\n    /**\n     * If the reader is active, behaves the same as {@link ReadableStream.cancel | stream.cancel(reason)}.\n     */\n    ReadableStreamBYOBReader.prototype.cancel = function (reason) {\n      if (reason === void 0) {\n        reason = undefined;\n      }\n      if (!IsReadableStreamBYOBReader(this)) {\n        return promiseRejectedWith(byobReaderBrandCheckException('cancel'));\n      }\n      if (this._ownerReadableStream === undefined) {\n        return promiseRejectedWith(readerLockException('cancel'));\n      }\n      return ReadableStreamReaderGenericCancel(this, reason);\n    };\n    /**\n     * Attempts to reads bytes into view, and returns a promise resolved with the result.\n     *\n     * If reading a chunk causes the queue to become empty, more data will be pulled from the underlying source.\n     */\n    ReadableStreamBYOBReader.prototype.read = function (view) {\n      if (!IsReadableStreamBYOBReader(this)) {\n        return promiseRejectedWith(byobReaderBrandCheckException('read'));\n      }\n      if (!ArrayBuffer.isView(view)) {\n        return promiseRejectedWith(new TypeError('view must be an array buffer view'));\n      }\n      if (view.byteLength === 0) {\n        return promiseRejectedWith(new TypeError('view must have non-zero byteLength'));\n      }\n      if (view.buffer.byteLength === 0) {\n        return promiseRejectedWith(new TypeError(\"view's buffer must have non-zero byteLength\"));\n      }\n      if (IsDetachedBuffer(view.buffer)) ;\n      if (this._ownerReadableStream === undefined) {\n        return promiseRejectedWith(readerLockException('read from'));\n      }\n      var resolvePromise;\n      var rejectPromise;\n      var promise = newPromise(function (resolve, reject) {\n        resolvePromise = resolve;\n        rejectPromise = reject;\n      });\n      var readIntoRequest = {\n        _chunkSteps: function (chunk) {\n          return resolvePromise({\n            value: chunk,\n            done: false\n          });\n        },\n        _closeSteps: function (chunk) {\n          return resolvePromise({\n            value: chunk,\n            done: true\n          });\n        },\n        _errorSteps: function (e) {\n          return rejectPromise(e);\n        }\n      };\n      ReadableStreamBYOBReaderRead(this, view, readIntoRequest);\n      return promise;\n    };\n    /**\n     * Releases the reader's lock on the corresponding stream. After the lock is released, the reader is no longer active.\n     * If the associated stream is errored when the lock is released, the reader will appear errored in the same way\n     * from now on; otherwise, the reader will appear closed.\n     *\n     * A reader's lock cannot be released while it still has a pending read request, i.e., if a promise returned by\n     * the reader's {@link ReadableStreamBYOBReader.read | read()} method has not yet been settled. Attempting to\n     * do so will throw a `TypeError` and leave the reader locked to the stream.\n     */\n    ReadableStreamBYOBReader.prototype.releaseLock = function () {\n      if (!IsReadableStreamBYOBReader(this)) {\n        throw byobReaderBrandCheckException('releaseLock');\n      }\n      if (this._ownerReadableStream === undefined) {\n        return;\n      }\n      if (this._readIntoRequests.length > 0) {\n        throw new TypeError('Tried to release a reader lock when that reader has pending read() calls un-settled');\n      }\n      ReadableStreamReaderGenericRelease(this);\n    };\n    return ReadableStreamBYOBReader;\n  }();\n  Object.defineProperties(ReadableStreamBYOBReader.prototype, {\n    cancel: {\n      enumerable: true\n    },\n    read: {\n      enumerable: true\n    },\n    releaseLock: {\n      enumerable: true\n    },\n    closed: {\n      enumerable: true\n    }\n  });\n  if (typeof SymbolPolyfill.toStringTag === 'symbol') {\n    Object.defineProperty(ReadableStreamBYOBReader.prototype, SymbolPolyfill.toStringTag, {\n      value: 'ReadableStreamBYOBReader',\n      configurable: true\n    });\n  }\n  // Abstract operations for the readers.\n  function IsReadableStreamBYOBReader(x) {\n    if (!typeIsObject(x)) {\n      return false;\n    }\n    if (!Object.prototype.hasOwnProperty.call(x, '_readIntoRequests')) {\n      return false;\n    }\n    return x instanceof ReadableStreamBYOBReader;\n  }\n  function ReadableStreamBYOBReaderRead(reader, view, readIntoRequest) {\n    var stream = reader._ownerReadableStream;\n    stream._disturbed = true;\n    if (stream._state === 'errored') {\n      readIntoRequest._errorSteps(stream._storedError);\n    } else {\n      ReadableByteStreamControllerPullInto(stream._readableStreamController, view, readIntoRequest);\n    }\n  }\n  // Helper functions for the ReadableStreamBYOBReader.\n  function byobReaderBrandCheckException(name) {\n    return new TypeError(\"ReadableStreamBYOBReader.prototype.\" + name + \" can only be used on a ReadableStreamBYOBReader\");\n  }\n  function ExtractHighWaterMark(strategy, defaultHWM) {\n    var highWaterMark = strategy.highWaterMark;\n    if (highWaterMark === undefined) {\n      return defaultHWM;\n    }\n    if (NumberIsNaN(highWaterMark) || highWaterMark < 0) {\n      throw new RangeError('Invalid highWaterMark');\n    }\n    return highWaterMark;\n  }\n  function ExtractSizeAlgorithm(strategy) {\n    var size = strategy.size;\n    if (!size) {\n      return function () {\n        return 1;\n      };\n    }\n    return size;\n  }\n  function convertQueuingStrategy(init, context) {\n    assertDictionary(init, context);\n    var highWaterMark = init === null || init === void 0 ? void 0 : init.highWaterMark;\n    var size = init === null || init === void 0 ? void 0 : init.size;\n    return {\n      highWaterMark: highWaterMark === undefined ? undefined : convertUnrestrictedDouble(highWaterMark),\n      size: size === undefined ? undefined : convertQueuingStrategySize(size, context + \" has member 'size' that\")\n    };\n  }\n  function convertQueuingStrategySize(fn, context) {\n    assertFunction(fn, context);\n    return function (chunk) {\n      return convertUnrestrictedDouble(fn(chunk));\n    };\n  }\n  function convertUnderlyingSink(original, context) {\n    assertDictionary(original, context);\n    var abort = original === null || original === void 0 ? void 0 : original.abort;\n    var close = original === null || original === void 0 ? void 0 : original.close;\n    var start = original === null || original === void 0 ? void 0 : original.start;\n    var type = original === null || original === void 0 ? void 0 : original.type;\n    var write = original === null || original === void 0 ? void 0 : original.write;\n    return {\n      abort: abort === undefined ? undefined : convertUnderlyingSinkAbortCallback(abort, original, context + \" has member 'abort' that\"),\n      close: close === undefined ? undefined : convertUnderlyingSinkCloseCallback(close, original, context + \" has member 'close' that\"),\n      start: start === undefined ? undefined : convertUnderlyingSinkStartCallback(start, original, context + \" has member 'start' that\"),\n      write: write === undefined ? undefined : convertUnderlyingSinkWriteCallback(write, original, context + \" has member 'write' that\"),\n      type: type\n    };\n  }\n  function convertUnderlyingSinkAbortCallback(fn, original, context) {\n    assertFunction(fn, context);\n    return function (reason) {\n      return promiseCall(fn, original, [reason]);\n    };\n  }\n  function convertUnderlyingSinkCloseCallback(fn, original, context) {\n    assertFunction(fn, context);\n    return function () {\n      return promiseCall(fn, original, []);\n    };\n  }\n  function convertUnderlyingSinkStartCallback(fn, original, context) {\n    assertFunction(fn, context);\n    return function (controller) {\n      return reflectCall(fn, original, [controller]);\n    };\n  }\n  function convertUnderlyingSinkWriteCallback(fn, original, context) {\n    assertFunction(fn, context);\n    return function (chunk, controller) {\n      return promiseCall(fn, original, [chunk, controller]);\n    };\n  }\n  function assertWritableStream(x, context) {\n    if (!IsWritableStream(x)) {\n      throw new TypeError(context + \" is not a WritableStream.\");\n    }\n  }\n  function isAbortSignal(value) {\n    if (typeof value !== 'object' || value === null) {\n      return false;\n    }\n    try {\n      return typeof value.aborted === 'boolean';\n    } catch (_a) {\n      // AbortSignal.prototype.aborted throws if its brand check fails\n      return false;\n    }\n  }\n  var supportsAbortController = typeof AbortController === 'function';\n  /**\n   * Construct a new AbortController, if supported by the platform.\n   *\n   * @internal\n   */\n  function createAbortController() {\n    if (supportsAbortController) {\n      return new AbortController();\n    }\n    return undefined;\n  }\n\n  /**\n   * A writable stream represents a destination for data, into which you can write.\n   *\n   * @public\n   */\n  var WritableStream = /** @class */function () {\n    function WritableStream(rawUnderlyingSink, rawStrategy) {\n      if (rawUnderlyingSink === void 0) {\n        rawUnderlyingSink = {};\n      }\n      if (rawStrategy === void 0) {\n        rawStrategy = {};\n      }\n      if (rawUnderlyingSink === undefined) {\n        rawUnderlyingSink = null;\n      } else {\n        assertObject(rawUnderlyingSink, 'First parameter');\n      }\n      var strategy = convertQueuingStrategy(rawStrategy, 'Second parameter');\n      var underlyingSink = convertUnderlyingSink(rawUnderlyingSink, 'First parameter');\n      InitializeWritableStream(this);\n      var type = underlyingSink.type;\n      if (type !== undefined) {\n        throw new RangeError('Invalid type is specified');\n      }\n      var sizeAlgorithm = ExtractSizeAlgorithm(strategy);\n      var highWaterMark = ExtractHighWaterMark(strategy, 1);\n      SetUpWritableStreamDefaultControllerFromUnderlyingSink(this, underlyingSink, highWaterMark, sizeAlgorithm);\n    }\n    Object.defineProperty(WritableStream.prototype, \"locked\", {\n      /**\n       * Returns whether or not the writable stream is locked to a writer.\n       */\n      get: function () {\n        if (!IsWritableStream(this)) {\n          throw streamBrandCheckException$2('locked');\n        }\n        return IsWritableStreamLocked(this);\n      },\n      enumerable: false,\n      configurable: true\n    });\n    /**\n     * Aborts the stream, signaling that the producer can no longer successfully write to the stream and it is to be\n     * immediately moved to an errored state, with any queued-up writes discarded. This will also execute any abort\n     * mechanism of the underlying sink.\n     *\n     * The returned promise will fulfill if the stream shuts down successfully, or reject if the underlying sink signaled\n     * that there was an error doing so. Additionally, it will reject with a `TypeError` (without attempting to cancel\n     * the stream) if the stream is currently locked.\n     */\n    WritableStream.prototype.abort = function (reason) {\n      if (reason === void 0) {\n        reason = undefined;\n      }\n      if (!IsWritableStream(this)) {\n        return promiseRejectedWith(streamBrandCheckException$2('abort'));\n      }\n      if (IsWritableStreamLocked(this)) {\n        return promiseRejectedWith(new TypeError('Cannot abort a stream that already has a writer'));\n      }\n      return WritableStreamAbort(this, reason);\n    };\n    /**\n     * Closes the stream. The underlying sink will finish processing any previously-written chunks, before invoking its\n     * close behavior. During this time any further attempts to write will fail (without erroring the stream).\n     *\n     * The method returns a promise that will fulfill if all remaining chunks are successfully written and the stream\n     * successfully closes, or rejects if an error is encountered during this process. Additionally, it will reject with\n     * a `TypeError` (without attempting to cancel the stream) if the stream is currently locked.\n     */\n    WritableStream.prototype.close = function () {\n      if (!IsWritableStream(this)) {\n        return promiseRejectedWith(streamBrandCheckException$2('close'));\n      }\n      if (IsWritableStreamLocked(this)) {\n        return promiseRejectedWith(new TypeError('Cannot close a stream that already has a writer'));\n      }\n      if (WritableStreamCloseQueuedOrInFlight(this)) {\n        return promiseRejectedWith(new TypeError('Cannot close an already-closing stream'));\n      }\n      return WritableStreamClose(this);\n    };\n    /**\n     * Creates a {@link WritableStreamDefaultWriter | writer} and locks the stream to the new writer. While the stream\n     * is locked, no other writer can be acquired until this one is released.\n     *\n     * This functionality is especially useful for creating abstractions that desire the ability to write to a stream\n     * without interruption or interleaving. By getting a writer for the stream, you can ensure nobody else can write at\n     * the same time, which would cause the resulting written data to be unpredictable and probably useless.\n     */\n    WritableStream.prototype.getWriter = function () {\n      if (!IsWritableStream(this)) {\n        throw streamBrandCheckException$2('getWriter');\n      }\n      return AcquireWritableStreamDefaultWriter(this);\n    };\n    return WritableStream;\n  }();\n  Object.defineProperties(WritableStream.prototype, {\n    abort: {\n      enumerable: true\n    },\n    close: {\n      enumerable: true\n    },\n    getWriter: {\n      enumerable: true\n    },\n    locked: {\n      enumerable: true\n    }\n  });\n  if (typeof SymbolPolyfill.toStringTag === 'symbol') {\n    Object.defineProperty(WritableStream.prototype, SymbolPolyfill.toStringTag, {\n      value: 'WritableStream',\n      configurable: true\n    });\n  }\n  // Abstract operations for the WritableStream.\n  function AcquireWritableStreamDefaultWriter(stream) {\n    return new WritableStreamDefaultWriter(stream);\n  }\n  // Throws if and only if startAlgorithm throws.\n  function CreateWritableStream(startAlgorithm, writeAlgorithm, closeAlgorithm, abortAlgorithm, highWaterMark, sizeAlgorithm) {\n    if (highWaterMark === void 0) {\n      highWaterMark = 1;\n    }\n    if (sizeAlgorithm === void 0) {\n      sizeAlgorithm = function () {\n        return 1;\n      };\n    }\n    var stream = Object.create(WritableStream.prototype);\n    InitializeWritableStream(stream);\n    var controller = Object.create(WritableStreamDefaultController.prototype);\n    SetUpWritableStreamDefaultController(stream, controller, startAlgorithm, writeAlgorithm, closeAlgorithm, abortAlgorithm, highWaterMark, sizeAlgorithm);\n    return stream;\n  }\n  function InitializeWritableStream(stream) {\n    stream._state = 'writable';\n    // The error that will be reported by new method calls once the state becomes errored. Only set when [[state]] is\n    // 'erroring' or 'errored'. May be set to an undefined value.\n    stream._storedError = undefined;\n    stream._writer = undefined;\n    // Initialize to undefined first because the constructor of the controller checks this\n    // variable to validate the caller.\n    stream._writableStreamController = undefined;\n    // This queue is placed here instead of the writer class in order to allow for passing a writer to the next data\n    // producer without waiting for the queued writes to finish.\n    stream._writeRequests = new SimpleQueue();\n    // Write requests are removed from _writeRequests when write() is called on the underlying sink. This prevents\n    // them from being erroneously rejected on error. If a write() call is in-flight, the request is stored here.\n    stream._inFlightWriteRequest = undefined;\n    // The promise that was returned from writer.close(). Stored here because it may be fulfilled after the writer\n    // has been detached.\n    stream._closeRequest = undefined;\n    // Close request is removed from _closeRequest when close() is called on the underlying sink. This prevents it\n    // from being erroneously rejected on error. If a close() call is in-flight, the request is stored here.\n    stream._inFlightCloseRequest = undefined;\n    // The promise that was returned from writer.abort(). This may also be fulfilled after the writer has detached.\n    stream._pendingAbortRequest = undefined;\n    // The backpressure signal set by the controller.\n    stream._backpressure = false;\n  }\n  function IsWritableStream(x) {\n    if (!typeIsObject(x)) {\n      return false;\n    }\n    if (!Object.prototype.hasOwnProperty.call(x, '_writableStreamController')) {\n      return false;\n    }\n    return x instanceof WritableStream;\n  }\n  function IsWritableStreamLocked(stream) {\n    if (stream._writer === undefined) {\n      return false;\n    }\n    return true;\n  }\n  function WritableStreamAbort(stream, reason) {\n    var _a;\n    if (stream._state === 'closed' || stream._state === 'errored') {\n      return promiseResolvedWith(undefined);\n    }\n    stream._writableStreamController._abortReason = reason;\n    (_a = stream._writableStreamController._abortController) === null || _a === void 0 ? void 0 : _a.abort();\n    // TypeScript narrows the type of `stream._state` down to 'writable' | 'erroring',\n    // but it doesn't know that signaling abort runs author code that might have changed the state.\n    // Widen the type again by casting to WritableStreamState.\n    var state = stream._state;\n    if (state === 'closed' || state === 'errored') {\n      return promiseResolvedWith(undefined);\n    }\n    if (stream._pendingAbortRequest !== undefined) {\n      return stream._pendingAbortRequest._promise;\n    }\n    var wasAlreadyErroring = false;\n    if (state === 'erroring') {\n      wasAlreadyErroring = true;\n      // reason will not be used, so don't keep a reference to it.\n      reason = undefined;\n    }\n    var promise = newPromise(function (resolve, reject) {\n      stream._pendingAbortRequest = {\n        _promise: undefined,\n        _resolve: resolve,\n        _reject: reject,\n        _reason: reason,\n        _wasAlreadyErroring: wasAlreadyErroring\n      };\n    });\n    stream._pendingAbortRequest._promise = promise;\n    if (!wasAlreadyErroring) {\n      WritableStreamStartErroring(stream, reason);\n    }\n    return promise;\n  }\n  function WritableStreamClose(stream) {\n    var state = stream._state;\n    if (state === 'closed' || state === 'errored') {\n      return promiseRejectedWith(new TypeError(\"The stream (in \" + state + \" state) is not in the writable state and cannot be closed\"));\n    }\n    var promise = newPromise(function (resolve, reject) {\n      var closeRequest = {\n        _resolve: resolve,\n        _reject: reject\n      };\n      stream._closeRequest = closeRequest;\n    });\n    var writer = stream._writer;\n    if (writer !== undefined && stream._backpressure && state === 'writable') {\n      defaultWriterReadyPromiseResolve(writer);\n    }\n    WritableStreamDefaultControllerClose(stream._writableStreamController);\n    return promise;\n  }\n  // WritableStream API exposed for controllers.\n  function WritableStreamAddWriteRequest(stream) {\n    var promise = newPromise(function (resolve, reject) {\n      var writeRequest = {\n        _resolve: resolve,\n        _reject: reject\n      };\n      stream._writeRequests.push(writeRequest);\n    });\n    return promise;\n  }\n  function WritableStreamDealWithRejection(stream, error) {\n    var state = stream._state;\n    if (state === 'writable') {\n      WritableStreamStartErroring(stream, error);\n      return;\n    }\n    WritableStreamFinishErroring(stream);\n  }\n  function WritableStreamStartErroring(stream, reason) {\n    var controller = stream._writableStreamController;\n    stream._state = 'erroring';\n    stream._storedError = reason;\n    var writer = stream._writer;\n    if (writer !== undefined) {\n      WritableStreamDefaultWriterEnsureReadyPromiseRejected(writer, reason);\n    }\n    if (!WritableStreamHasOperationMarkedInFlight(stream) && controller._started) {\n      WritableStreamFinishErroring(stream);\n    }\n  }\n  function WritableStreamFinishErroring(stream) {\n    stream._state = 'errored';\n    stream._writableStreamController[ErrorSteps]();\n    var storedError = stream._storedError;\n    stream._writeRequests.forEach(function (writeRequest) {\n      writeRequest._reject(storedError);\n    });\n    stream._writeRequests = new SimpleQueue();\n    if (stream._pendingAbortRequest === undefined) {\n      WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream);\n      return;\n    }\n    var abortRequest = stream._pendingAbortRequest;\n    stream._pendingAbortRequest = undefined;\n    if (abortRequest._wasAlreadyErroring) {\n      abortRequest._reject(storedError);\n      WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream);\n      return;\n    }\n    var promise = stream._writableStreamController[AbortSteps](abortRequest._reason);\n    uponPromise(promise, function () {\n      abortRequest._resolve();\n      WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream);\n    }, function (reason) {\n      abortRequest._reject(reason);\n      WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream);\n    });\n  }\n  function WritableStreamFinishInFlightWrite(stream) {\n    stream._inFlightWriteRequest._resolve(undefined);\n    stream._inFlightWriteRequest = undefined;\n  }\n  function WritableStreamFinishInFlightWriteWithError(stream, error) {\n    stream._inFlightWriteRequest._reject(error);\n    stream._inFlightWriteRequest = undefined;\n    WritableStreamDealWithRejection(stream, error);\n  }\n  function WritableStreamFinishInFlightClose(stream) {\n    stream._inFlightCloseRequest._resolve(undefined);\n    stream._inFlightCloseRequest = undefined;\n    var state = stream._state;\n    if (state === 'erroring') {\n      // The error was too late to do anything, so it is ignored.\n      stream._storedError = undefined;\n      if (stream._pendingAbortRequest !== undefined) {\n        stream._pendingAbortRequest._resolve();\n        stream._pendingAbortRequest = undefined;\n      }\n    }\n    stream._state = 'closed';\n    var writer = stream._writer;\n    if (writer !== undefined) {\n      defaultWriterClosedPromiseResolve(writer);\n    }\n  }\n  function WritableStreamFinishInFlightCloseWithError(stream, error) {\n    stream._inFlightCloseRequest._reject(error);\n    stream._inFlightCloseRequest = undefined;\n    // Never execute sink abort() after sink close().\n    if (stream._pendingAbortRequest !== undefined) {\n      stream._pendingAbortRequest._reject(error);\n      stream._pendingAbortRequest = undefined;\n    }\n    WritableStreamDealWithRejection(stream, error);\n  }\n  // TODO(ricea): Fix alphabetical order.\n  function WritableStreamCloseQueuedOrInFlight(stream) {\n    if (stream._closeRequest === undefined && stream._inFlightCloseRequest === undefined) {\n      return false;\n    }\n    return true;\n  }\n  function WritableStreamHasOperationMarkedInFlight(stream) {\n    if (stream._inFlightWriteRequest === undefined && stream._inFlightCloseRequest === undefined) {\n      return false;\n    }\n    return true;\n  }\n  function WritableStreamMarkCloseRequestInFlight(stream) {\n    stream._inFlightCloseRequest = stream._closeRequest;\n    stream._closeRequest = undefined;\n  }\n  function WritableStreamMarkFirstWriteRequestInFlight(stream) {\n    stream._inFlightWriteRequest = stream._writeRequests.shift();\n  }\n  function WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream) {\n    if (stream._closeRequest !== undefined) {\n      stream._closeRequest._reject(stream._storedError);\n      stream._closeRequest = undefined;\n    }\n    var writer = stream._writer;\n    if (writer !== undefined) {\n      defaultWriterClosedPromiseReject(writer, stream._storedError);\n    }\n  }\n  function WritableStreamUpdateBackpressure(stream, backpressure) {\n    var writer = stream._writer;\n    if (writer !== undefined && backpressure !== stream._backpressure) {\n      if (backpressure) {\n        defaultWriterReadyPromiseReset(writer);\n      } else {\n        defaultWriterReadyPromiseResolve(writer);\n      }\n    }\n    stream._backpressure = backpressure;\n  }\n  /**\n   * A default writer vended by a {@link WritableStream}.\n   *\n   * @public\n   */\n  var WritableStreamDefaultWriter = /** @class */function () {\n    function WritableStreamDefaultWriter(stream) {\n      assertRequiredArgument(stream, 1, 'WritableStreamDefaultWriter');\n      assertWritableStream(stream, 'First parameter');\n      if (IsWritableStreamLocked(stream)) {\n        throw new TypeError('This stream has already been locked for exclusive writing by another writer');\n      }\n      this._ownerWritableStream = stream;\n      stream._writer = this;\n      var state = stream._state;\n      if (state === 'writable') {\n        if (!WritableStreamCloseQueuedOrInFlight(stream) && stream._backpressure) {\n          defaultWriterReadyPromiseInitialize(this);\n        } else {\n          defaultWriterReadyPromiseInitializeAsResolved(this);\n        }\n        defaultWriterClosedPromiseInitialize(this);\n      } else if (state === 'erroring') {\n        defaultWriterReadyPromiseInitializeAsRejected(this, stream._storedError);\n        defaultWriterClosedPromiseInitialize(this);\n      } else if (state === 'closed') {\n        defaultWriterReadyPromiseInitializeAsResolved(this);\n        defaultWriterClosedPromiseInitializeAsResolved(this);\n      } else {\n        var storedError = stream._storedError;\n        defaultWriterReadyPromiseInitializeAsRejected(this, storedError);\n        defaultWriterClosedPromiseInitializeAsRejected(this, storedError);\n      }\n    }\n    Object.defineProperty(WritableStreamDefaultWriter.prototype, \"closed\", {\n      /**\n       * Returns a promise that will be fulfilled when the stream becomes closed, or rejected if the stream ever errors or\n       * the writer’s lock is released before the stream finishes closing.\n       */\n      get: function () {\n        if (!IsWritableStreamDefaultWriter(this)) {\n          return promiseRejectedWith(defaultWriterBrandCheckException('closed'));\n        }\n        return this._closedPromise;\n      },\n      enumerable: false,\n      configurable: true\n    });\n    Object.defineProperty(WritableStreamDefaultWriter.prototype, \"desiredSize\", {\n      /**\n       * Returns the desired size to fill the stream’s internal queue. It can be negative, if the queue is over-full.\n       * A producer can use this information to determine the right amount of data to write.\n       *\n       * It will be `null` if the stream cannot be successfully written to (due to either being errored, or having an abort\n       * queued up). It will return zero if the stream is closed. And the getter will throw an exception if invoked when\n       * the writer’s lock is released.\n       */\n      get: function () {\n        if (!IsWritableStreamDefaultWriter(this)) {\n          throw defaultWriterBrandCheckException('desiredSize');\n        }\n        if (this._ownerWritableStream === undefined) {\n          throw defaultWriterLockException('desiredSize');\n        }\n        return WritableStreamDefaultWriterGetDesiredSize(this);\n      },\n      enumerable: false,\n      configurable: true\n    });\n    Object.defineProperty(WritableStreamDefaultWriter.prototype, \"ready\", {\n      /**\n       * Returns a promise that will be fulfilled when the desired size to fill the stream’s internal queue transitions\n       * from non-positive to positive, signaling that it is no longer applying backpressure. Once the desired size dips\n       * back to zero or below, the getter will return a new promise that stays pending until the next transition.\n       *\n       * If the stream becomes errored or aborted, or the writer’s lock is released, the returned promise will become\n       * rejected.\n       */\n      get: function () {\n        if (!IsWritableStreamDefaultWriter(this)) {\n          return promiseRejectedWith(defaultWriterBrandCheckException('ready'));\n        }\n        return this._readyPromise;\n      },\n      enumerable: false,\n      configurable: true\n    });\n    /**\n     * If the reader is active, behaves the same as {@link WritableStream.abort | stream.abort(reason)}.\n     */\n    WritableStreamDefaultWriter.prototype.abort = function (reason) {\n      if (reason === void 0) {\n        reason = undefined;\n      }\n      if (!IsWritableStreamDefaultWriter(this)) {\n        return promiseRejectedWith(defaultWriterBrandCheckException('abort'));\n      }\n      if (this._ownerWritableStream === undefined) {\n        return promiseRejectedWith(defaultWriterLockException('abort'));\n      }\n      return WritableStreamDefaultWriterAbort(this, reason);\n    };\n    /**\n     * If the reader is active, behaves the same as {@link WritableStream.close | stream.close()}.\n     */\n    WritableStreamDefaultWriter.prototype.close = function () {\n      if (!IsWritableStreamDefaultWriter(this)) {\n        return promiseRejectedWith(defaultWriterBrandCheckException('close'));\n      }\n      var stream = this._ownerWritableStream;\n      if (stream === undefined) {\n        return promiseRejectedWith(defaultWriterLockException('close'));\n      }\n      if (WritableStreamCloseQueuedOrInFlight(stream)) {\n        return promiseRejectedWith(new TypeError('Cannot close an already-closing stream'));\n      }\n      return WritableStreamDefaultWriterClose(this);\n    };\n    /**\n     * Releases the writer’s lock on the corresponding stream. After the lock is released, the writer is no longer active.\n     * If the associated stream is errored when the lock is released, the writer will appear errored in the same way from\n     * now on; otherwise, the writer will appear closed.\n     *\n     * Note that the lock can still be released even if some ongoing writes have not yet finished (i.e. even if the\n     * promises returned from previous calls to {@link WritableStreamDefaultWriter.write | write()} have not yet settled).\n     * It’s not necessary to hold the lock on the writer for the duration of the write; the lock instead simply prevents\n     * other producers from writing in an interleaved manner.\n     */\n    WritableStreamDefaultWriter.prototype.releaseLock = function () {\n      if (!IsWritableStreamDefaultWriter(this)) {\n        throw defaultWriterBrandCheckException('releaseLock');\n      }\n      var stream = this._ownerWritableStream;\n      if (stream === undefined) {\n        return;\n      }\n      WritableStreamDefaultWriterRelease(this);\n    };\n    WritableStreamDefaultWriter.prototype.write = function (chunk) {\n      if (chunk === void 0) {\n        chunk = undefined;\n      }\n      if (!IsWritableStreamDefaultWriter(this)) {\n        return promiseRejectedWith(defaultWriterBrandCheckException('write'));\n      }\n      if (this._ownerWritableStream === undefined) {\n        return promiseRejectedWith(defaultWriterLockException('write to'));\n      }\n      return WritableStreamDefaultWriterWrite(this, chunk);\n    };\n    return WritableStreamDefaultWriter;\n  }();\n  Object.defineProperties(WritableStreamDefaultWriter.prototype, {\n    abort: {\n      enumerable: true\n    },\n    close: {\n      enumerable: true\n    },\n    releaseLock: {\n      enumerable: true\n    },\n    write: {\n      enumerable: true\n    },\n    closed: {\n      enumerable: true\n    },\n    desiredSize: {\n      enumerable: true\n    },\n    ready: {\n      enumerable: true\n    }\n  });\n  if (typeof SymbolPolyfill.toStringTag === 'symbol') {\n    Object.defineProperty(WritableStreamDefaultWriter.prototype, SymbolPolyfill.toStringTag, {\n      value: 'WritableStreamDefaultWriter',\n      configurable: true\n    });\n  }\n  // Abstract operations for the WritableStreamDefaultWriter.\n  function IsWritableStreamDefaultWriter(x) {\n    if (!typeIsObject(x)) {\n      return false;\n    }\n    if (!Object.prototype.hasOwnProperty.call(x, '_ownerWritableStream')) {\n      return false;\n    }\n    return x instanceof WritableStreamDefaultWriter;\n  }\n  // A client of WritableStreamDefaultWriter may use these functions directly to bypass state check.\n  function WritableStreamDefaultWriterAbort(writer, reason) {\n    var stream = writer._ownerWritableStream;\n    return WritableStreamAbort(stream, reason);\n  }\n  function WritableStreamDefaultWriterClose(writer) {\n    var stream = writer._ownerWritableStream;\n    return WritableStreamClose(stream);\n  }\n  function WritableStreamDefaultWriterCloseWithErrorPropagation(writer) {\n    var stream = writer._ownerWritableStream;\n    var state = stream._state;\n    if (WritableStreamCloseQueuedOrInFlight(stream) || state === 'closed') {\n      return promiseResolvedWith(undefined);\n    }\n    if (state === 'errored') {\n      return promiseRejectedWith(stream._storedError);\n    }\n    return WritableStreamDefaultWriterClose(writer);\n  }\n  function WritableStreamDefaultWriterEnsureClosedPromiseRejected(writer, error) {\n    if (writer._closedPromiseState === 'pending') {\n      defaultWriterClosedPromiseReject(writer, error);\n    } else {\n      defaultWriterClosedPromiseResetToRejected(writer, error);\n    }\n  }\n  function WritableStreamDefaultWriterEnsureReadyPromiseRejected(writer, error) {\n    if (writer._readyPromiseState === 'pending') {\n      defaultWriterReadyPromiseReject(writer, error);\n    } else {\n      defaultWriterReadyPromiseResetToRejected(writer, error);\n    }\n  }\n  function WritableStreamDefaultWriterGetDesiredSize(writer) {\n    var stream = writer._ownerWritableStream;\n    var state = stream._state;\n    if (state === 'errored' || state === 'erroring') {\n      return null;\n    }\n    if (state === 'closed') {\n      return 0;\n    }\n    return WritableStreamDefaultControllerGetDesiredSize(stream._writableStreamController);\n  }\n  function WritableStreamDefaultWriterRelease(writer) {\n    var stream = writer._ownerWritableStream;\n    var releasedError = new TypeError(\"Writer was released and can no longer be used to monitor the stream's closedness\");\n    WritableStreamDefaultWriterEnsureReadyPromiseRejected(writer, releasedError);\n    // The state transitions to \"errored\" before the sink abort() method runs, but the writer.closed promise is not\n    // rejected until afterwards. This means that simply testing state will not work.\n    WritableStreamDefaultWriterEnsureClosedPromiseRejected(writer, releasedError);\n    stream._writer = undefined;\n    writer._ownerWritableStream = undefined;\n  }\n  function WritableStreamDefaultWriterWrite(writer, chunk) {\n    var stream = writer._ownerWritableStream;\n    var controller = stream._writableStreamController;\n    var chunkSize = WritableStreamDefaultControllerGetChunkSize(controller, chunk);\n    if (stream !== writer._ownerWritableStream) {\n      return promiseRejectedWith(defaultWriterLockException('write to'));\n    }\n    var state = stream._state;\n    if (state === 'errored') {\n      return promiseRejectedWith(stream._storedError);\n    }\n    if (WritableStreamCloseQueuedOrInFlight(stream) || state === 'closed') {\n      return promiseRejectedWith(new TypeError('The stream is closing or closed and cannot be written to'));\n    }\n    if (state === 'erroring') {\n      return promiseRejectedWith(stream._storedError);\n    }\n    var promise = WritableStreamAddWriteRequest(stream);\n    WritableStreamDefaultControllerWrite(controller, chunk, chunkSize);\n    return promise;\n  }\n  var closeSentinel = {};\n  /**\n   * Allows control of a {@link WritableStream | writable stream}'s state and internal queue.\n   *\n   * @public\n   */\n  var WritableStreamDefaultController = /** @class */function () {\n    function WritableStreamDefaultController() {\n      throw new TypeError('Illegal constructor');\n    }\n    Object.defineProperty(WritableStreamDefaultController.prototype, \"abortReason\", {\n      /**\n       * The reason which was passed to `WritableStream.abort(reason)` when the stream was aborted.\n       *\n       * @deprecated\n       *  This property has been removed from the specification, see https://github.com/whatwg/streams/pull/1177.\n       *  Use {@link WritableStreamDefaultController.signal}'s `reason` instead.\n       */\n      get: function () {\n        if (!IsWritableStreamDefaultController(this)) {\n          throw defaultControllerBrandCheckException$2('abortReason');\n        }\n        return this._abortReason;\n      },\n      enumerable: false,\n      configurable: true\n    });\n    Object.defineProperty(WritableStreamDefaultController.prototype, \"signal\", {\n      /**\n       * An `AbortSignal` that can be used to abort the pending write or close operation when the stream is aborted.\n       */\n      get: function () {\n        if (!IsWritableStreamDefaultController(this)) {\n          throw defaultControllerBrandCheckException$2('signal');\n        }\n        if (this._abortController === undefined) {\n          // Older browsers or older Node versions may not support `AbortController` or `AbortSignal`.\n          // We don't want to bundle and ship an `AbortController` polyfill together with our polyfill,\n          // so instead we only implement support for `signal` if we find a global `AbortController` constructor.\n          throw new TypeError('WritableStreamDefaultController.prototype.signal is not supported');\n        }\n        return this._abortController.signal;\n      },\n      enumerable: false,\n      configurable: true\n    });\n    /**\n     * Closes the controlled writable stream, making all future interactions with it fail with the given error `e`.\n     *\n     * This method is rarely used, since usually it suffices to return a rejected promise from one of the underlying\n     * sink's methods. However, it can be useful for suddenly shutting down a stream in response to an event outside the\n     * normal lifecycle of interactions with the underlying sink.\n     */\n    WritableStreamDefaultController.prototype.error = function (e) {\n      if (e === void 0) {\n        e = undefined;\n      }\n      if (!IsWritableStreamDefaultController(this)) {\n        throw defaultControllerBrandCheckException$2('error');\n      }\n      var state = this._controlledWritableStream._state;\n      if (state !== 'writable') {\n        // The stream is closed, errored or will be soon. The sink can't do anything useful if it gets an error here, so\n        // just treat it as a no-op.\n        return;\n      }\n      WritableStreamDefaultControllerError(this, e);\n    };\n    /** @internal */\n    WritableStreamDefaultController.prototype[AbortSteps] = function (reason) {\n      var result = this._abortAlgorithm(reason);\n      WritableStreamDefaultControllerClearAlgorithms(this);\n      return result;\n    };\n    /** @internal */\n    WritableStreamDefaultController.prototype[ErrorSteps] = function () {\n      ResetQueue(this);\n    };\n    return WritableStreamDefaultController;\n  }();\n  Object.defineProperties(WritableStreamDefaultController.prototype, {\n    abortReason: {\n      enumerable: true\n    },\n    signal: {\n      enumerable: true\n    },\n    error: {\n      enumerable: true\n    }\n  });\n  if (typeof SymbolPolyfill.toStringTag === 'symbol') {\n    Object.defineProperty(WritableStreamDefaultController.prototype, SymbolPolyfill.toStringTag, {\n      value: 'WritableStreamDefaultController',\n      configurable: true\n    });\n  }\n  // Abstract operations implementing interface required by the WritableStream.\n  function IsWritableStreamDefaultController(x) {\n    if (!typeIsObject(x)) {\n      return false;\n    }\n    if (!Object.prototype.hasOwnProperty.call(x, '_controlledWritableStream')) {\n      return false;\n    }\n    return x instanceof WritableStreamDefaultController;\n  }\n  function SetUpWritableStreamDefaultController(stream, controller, startAlgorithm, writeAlgorithm, closeAlgorithm, abortAlgorithm, highWaterMark, sizeAlgorithm) {\n    controller._controlledWritableStream = stream;\n    stream._writableStreamController = controller;\n    // Need to set the slots so that the assert doesn't fire. In the spec the slots already exist implicitly.\n    controller._queue = undefined;\n    controller._queueTotalSize = undefined;\n    ResetQueue(controller);\n    controller._abortReason = undefined;\n    controller._abortController = createAbortController();\n    controller._started = false;\n    controller._strategySizeAlgorithm = sizeAlgorithm;\n    controller._strategyHWM = highWaterMark;\n    controller._writeAlgorithm = writeAlgorithm;\n    controller._closeAlgorithm = closeAlgorithm;\n    controller._abortAlgorithm = abortAlgorithm;\n    var backpressure = WritableStreamDefaultControllerGetBackpressure(controller);\n    WritableStreamUpdateBackpressure(stream, backpressure);\n    var startResult = startAlgorithm();\n    var startPromise = promiseResolvedWith(startResult);\n    uponPromise(startPromise, function () {\n      controller._started = true;\n      WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller);\n    }, function (r) {\n      controller._started = true;\n      WritableStreamDealWithRejection(stream, r);\n    });\n  }\n  function SetUpWritableStreamDefaultControllerFromUnderlyingSink(stream, underlyingSink, highWaterMark, sizeAlgorithm) {\n    var controller = Object.create(WritableStreamDefaultController.prototype);\n    var startAlgorithm = function () {\n      return undefined;\n    };\n    var writeAlgorithm = function () {\n      return promiseResolvedWith(undefined);\n    };\n    var closeAlgorithm = function () {\n      return promiseResolvedWith(undefined);\n    };\n    var abortAlgorithm = function () {\n      return promiseResolvedWith(undefined);\n    };\n    if (underlyingSink.start !== undefined) {\n      startAlgorithm = function () {\n        return underlyingSink.start(controller);\n      };\n    }\n    if (underlyingSink.write !== undefined) {\n      writeAlgorithm = function (chunk) {\n        return underlyingSink.write(chunk, controller);\n      };\n    }\n    if (underlyingSink.close !== undefined) {\n      closeAlgorithm = function () {\n        return underlyingSink.close();\n      };\n    }\n    if (underlyingSink.abort !== undefined) {\n      abortAlgorithm = function (reason) {\n        return underlyingSink.abort(reason);\n      };\n    }\n    SetUpWritableStreamDefaultController(stream, controller, startAlgorithm, writeAlgorithm, closeAlgorithm, abortAlgorithm, highWaterMark, sizeAlgorithm);\n  }\n  // ClearAlgorithms may be called twice. Erroring the same stream in multiple ways will often result in redundant calls.\n  function WritableStreamDefaultControllerClearAlgorithms(controller) {\n    controller._writeAlgorithm = undefined;\n    controller._closeAlgorithm = undefined;\n    controller._abortAlgorithm = undefined;\n    controller._strategySizeAlgorithm = undefined;\n  }\n  function WritableStreamDefaultControllerClose(controller) {\n    EnqueueValueWithSize(controller, closeSentinel, 0);\n    WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller);\n  }\n  function WritableStreamDefaultControllerGetChunkSize(controller, chunk) {\n    try {\n      return controller._strategySizeAlgorithm(chunk);\n    } catch (chunkSizeE) {\n      WritableStreamDefaultControllerErrorIfNeeded(controller, chunkSizeE);\n      return 1;\n    }\n  }\n  function WritableStreamDefaultControllerGetDesiredSize(controller) {\n    return controller._strategyHWM - controller._queueTotalSize;\n  }\n  function WritableStreamDefaultControllerWrite(controller, chunk, chunkSize) {\n    try {\n      EnqueueValueWithSize(controller, chunk, chunkSize);\n    } catch (enqueueE) {\n      WritableStreamDefaultControllerErrorIfNeeded(controller, enqueueE);\n      return;\n    }\n    var stream = controller._controlledWritableStream;\n    if (!WritableStreamCloseQueuedOrInFlight(stream) && stream._state === 'writable') {\n      var backpressure = WritableStreamDefaultControllerGetBackpressure(controller);\n      WritableStreamUpdateBackpressure(stream, backpressure);\n    }\n    WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller);\n  }\n  // Abstract operations for the WritableStreamDefaultController.\n  function WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller) {\n    var stream = controller._controlledWritableStream;\n    if (!controller._started) {\n      return;\n    }\n    if (stream._inFlightWriteRequest !== undefined) {\n      return;\n    }\n    var state = stream._state;\n    if (state === 'erroring') {\n      WritableStreamFinishErroring(stream);\n      return;\n    }\n    if (controller._queue.length === 0) {\n      return;\n    }\n    var value = PeekQueueValue(controller);\n    if (value === closeSentinel) {\n      WritableStreamDefaultControllerProcessClose(controller);\n    } else {\n      WritableStreamDefaultControllerProcessWrite(controller, value);\n    }\n  }\n  function WritableStreamDefaultControllerErrorIfNeeded(controller, error) {\n    if (controller._controlledWritableStream._state === 'writable') {\n      WritableStreamDefaultControllerError(controller, error);\n    }\n  }\n  function WritableStreamDefaultControllerProcessClose(controller) {\n    var stream = controller._controlledWritableStream;\n    WritableStreamMarkCloseRequestInFlight(stream);\n    DequeueValue(controller);\n    var sinkClosePromise = controller._closeAlgorithm();\n    WritableStreamDefaultControllerClearAlgorithms(controller);\n    uponPromise(sinkClosePromise, function () {\n      WritableStreamFinishInFlightClose(stream);\n    }, function (reason) {\n      WritableStreamFinishInFlightCloseWithError(stream, reason);\n    });\n  }\n  function WritableStreamDefaultControllerProcessWrite(controller, chunk) {\n    var stream = controller._controlledWritableStream;\n    WritableStreamMarkFirstWriteRequestInFlight(stream);\n    var sinkWritePromise = controller._writeAlgorithm(chunk);\n    uponPromise(sinkWritePromise, function () {\n      WritableStreamFinishInFlightWrite(stream);\n      var state = stream._state;\n      DequeueValue(controller);\n      if (!WritableStreamCloseQueuedOrInFlight(stream) && state === 'writable') {\n        var backpressure = WritableStreamDefaultControllerGetBackpressure(controller);\n        WritableStreamUpdateBackpressure(stream, backpressure);\n      }\n      WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller);\n    }, function (reason) {\n      if (stream._state === 'writable') {\n        WritableStreamDefaultControllerClearAlgorithms(controller);\n      }\n      WritableStreamFinishInFlightWriteWithError(stream, reason);\n    });\n  }\n  function WritableStreamDefaultControllerGetBackpressure(controller) {\n    var desiredSize = WritableStreamDefaultControllerGetDesiredSize(controller);\n    return desiredSize <= 0;\n  }\n  // A client of WritableStreamDefaultController may use these functions directly to bypass state check.\n  function WritableStreamDefaultControllerError(controller, error) {\n    var stream = controller._controlledWritableStream;\n    WritableStreamDefaultControllerClearAlgorithms(controller);\n    WritableStreamStartErroring(stream, error);\n  }\n  // Helper functions for the WritableStream.\n  function streamBrandCheckException$2(name) {\n    return new TypeError(\"WritableStream.prototype.\" + name + \" can only be used on a WritableStream\");\n  }\n  // Helper functions for the WritableStreamDefaultController.\n  function defaultControllerBrandCheckException$2(name) {\n    return new TypeError(\"WritableStreamDefaultController.prototype.\" + name + \" can only be used on a WritableStreamDefaultController\");\n  }\n  // Helper functions for the WritableStreamDefaultWriter.\n  function defaultWriterBrandCheckException(name) {\n    return new TypeError(\"WritableStreamDefaultWriter.prototype.\" + name + \" can only be used on a WritableStreamDefaultWriter\");\n  }\n  function defaultWriterLockException(name) {\n    return new TypeError('Cannot ' + name + ' a stream using a released writer');\n  }\n  function defaultWriterClosedPromiseInitialize(writer) {\n    writer._closedPromise = newPromise(function (resolve, reject) {\n      writer._closedPromise_resolve = resolve;\n      writer._closedPromise_reject = reject;\n      writer._closedPromiseState = 'pending';\n    });\n  }\n  function defaultWriterClosedPromiseInitializeAsRejected(writer, reason) {\n    defaultWriterClosedPromiseInitialize(writer);\n    defaultWriterClosedPromiseReject(writer, reason);\n  }\n  function defaultWriterClosedPromiseInitializeAsResolved(writer) {\n    defaultWriterClosedPromiseInitialize(writer);\n    defaultWriterClosedPromiseResolve(writer);\n  }\n  function defaultWriterClosedPromiseReject(writer, reason) {\n    if (writer._closedPromise_reject === undefined) {\n      return;\n    }\n    setPromiseIsHandledToTrue(writer._closedPromise);\n    writer._closedPromise_reject(reason);\n    writer._closedPromise_resolve = undefined;\n    writer._closedPromise_reject = undefined;\n    writer._closedPromiseState = 'rejected';\n  }\n  function defaultWriterClosedPromiseResetToRejected(writer, reason) {\n    defaultWriterClosedPromiseInitializeAsRejected(writer, reason);\n  }\n  function defaultWriterClosedPromiseResolve(writer) {\n    if (writer._closedPromise_resolve === undefined) {\n      return;\n    }\n    writer._closedPromise_resolve(undefined);\n    writer._closedPromise_resolve = undefined;\n    writer._closedPromise_reject = undefined;\n    writer._closedPromiseState = 'resolved';\n  }\n  function defaultWriterReadyPromiseInitialize(writer) {\n    writer._readyPromise = newPromise(function (resolve, reject) {\n      writer._readyPromise_resolve = resolve;\n      writer._readyPromise_reject = reject;\n    });\n    writer._readyPromiseState = 'pending';\n  }\n  function defaultWriterReadyPromiseInitializeAsRejected(writer, reason) {\n    defaultWriterReadyPromiseInitialize(writer);\n    defaultWriterReadyPromiseReject(writer, reason);\n  }\n  function defaultWriterReadyPromiseInitializeAsResolved(writer) {\n    defaultWriterReadyPromiseInitialize(writer);\n    defaultWriterReadyPromiseResolve(writer);\n  }\n  function defaultWriterReadyPromiseReject(writer, reason) {\n    if (writer._readyPromise_reject === undefined) {\n      return;\n    }\n    setPromiseIsHandledToTrue(writer._readyPromise);\n    writer._readyPromise_reject(reason);\n    writer._readyPromise_resolve = undefined;\n    writer._readyPromise_reject = undefined;\n    writer._readyPromiseState = 'rejected';\n  }\n  function defaultWriterReadyPromiseReset(writer) {\n    defaultWriterReadyPromiseInitialize(writer);\n  }\n  function defaultWriterReadyPromiseResetToRejected(writer, reason) {\n    defaultWriterReadyPromiseInitializeAsRejected(writer, reason);\n  }\n  function defaultWriterReadyPromiseResolve(writer) {\n    if (writer._readyPromise_resolve === undefined) {\n      return;\n    }\n    writer._readyPromise_resolve(undefined);\n    writer._readyPromise_resolve = undefined;\n    writer._readyPromise_reject = undefined;\n    writer._readyPromiseState = 'fulfilled';\n  }\n\n  /// <reference lib=\"dom\" />\n  var NativeDOMException = typeof DOMException !== 'undefined' ? DOMException : undefined;\n\n  /// <reference types=\"node\" />\n  function isDOMExceptionConstructor(ctor) {\n    if (!(typeof ctor === 'function' || typeof ctor === 'object')) {\n      return false;\n    }\n    try {\n      new ctor();\n      return true;\n    } catch (_a) {\n      return false;\n    }\n  }\n  function createDOMExceptionPolyfill() {\n    // eslint-disable-next-line no-shadow\n    var ctor = function DOMException(message, name) {\n      this.message = message || '';\n      this.name = name || 'Error';\n      if (Error.captureStackTrace) {\n        Error.captureStackTrace(this, this.constructor);\n      }\n    };\n    ctor.prototype = Object.create(Error.prototype);\n    Object.defineProperty(ctor.prototype, 'constructor', {\n      value: ctor,\n      writable: true,\n      configurable: true\n    });\n    return ctor;\n  }\n  // eslint-disable-next-line no-redeclare\n  var DOMException$1 = isDOMExceptionConstructor(NativeDOMException) ? NativeDOMException : createDOMExceptionPolyfill();\n  function ReadableStreamPipeTo(source, dest, preventClose, preventAbort, preventCancel, signal) {\n    var reader = AcquireReadableStreamDefaultReader(source);\n    var writer = AcquireWritableStreamDefaultWriter(dest);\n    source._disturbed = true;\n    var shuttingDown = false;\n    // This is used to keep track of the spec's requirement that we wait for ongoing writes during shutdown.\n    var currentWrite = promiseResolvedWith(undefined);\n    return newPromise(function (resolve, reject) {\n      var abortAlgorithm;\n      if (signal !== undefined) {\n        abortAlgorithm = function () {\n          var error = new DOMException$1('Aborted', 'AbortError');\n          var actions = [];\n          if (!preventAbort) {\n            actions.push(function () {\n              if (dest._state === 'writable') {\n                return WritableStreamAbort(dest, error);\n              }\n              return promiseResolvedWith(undefined);\n            });\n          }\n          if (!preventCancel) {\n            actions.push(function () {\n              if (source._state === 'readable') {\n                return ReadableStreamCancel(source, error);\n              }\n              return promiseResolvedWith(undefined);\n            });\n          }\n          shutdownWithAction(function () {\n            return Promise.all(actions.map(function (action) {\n              return action();\n            }));\n          }, true, error);\n        };\n        if (signal.aborted) {\n          abortAlgorithm();\n          return;\n        }\n        signal.addEventListener('abort', abortAlgorithm);\n      }\n      // Using reader and writer, read all chunks from this and write them to dest\n      // - Backpressure must be enforced\n      // - Shutdown must stop all activity\n      function pipeLoop() {\n        return newPromise(function (resolveLoop, rejectLoop) {\n          function next(done) {\n            if (done) {\n              resolveLoop();\n            } else {\n              // Use `PerformPromiseThen` instead of `uponPromise` to avoid\n              // adding unnecessary `.catch(rethrowAssertionErrorRejection)` handlers\n              PerformPromiseThen(pipeStep(), next, rejectLoop);\n            }\n          }\n          next(false);\n        });\n      }\n      function pipeStep() {\n        if (shuttingDown) {\n          return promiseResolvedWith(true);\n        }\n        return PerformPromiseThen(writer._readyPromise, function () {\n          return newPromise(function (resolveRead, rejectRead) {\n            ReadableStreamDefaultReaderRead(reader, {\n              _chunkSteps: function (chunk) {\n                currentWrite = PerformPromiseThen(WritableStreamDefaultWriterWrite(writer, chunk), undefined, noop);\n                resolveRead(false);\n              },\n              _closeSteps: function () {\n                return resolveRead(true);\n              },\n              _errorSteps: rejectRead\n            });\n          });\n        });\n      }\n      // Errors must be propagated forward\n      isOrBecomesErrored(source, reader._closedPromise, function (storedError) {\n        if (!preventAbort) {\n          shutdownWithAction(function () {\n            return WritableStreamAbort(dest, storedError);\n          }, true, storedError);\n        } else {\n          shutdown(true, storedError);\n        }\n      });\n      // Errors must be propagated backward\n      isOrBecomesErrored(dest, writer._closedPromise, function (storedError) {\n        if (!preventCancel) {\n          shutdownWithAction(function () {\n            return ReadableStreamCancel(source, storedError);\n          }, true, storedError);\n        } else {\n          shutdown(true, storedError);\n        }\n      });\n      // Closing must be propagated forward\n      isOrBecomesClosed(source, reader._closedPromise, function () {\n        if (!preventClose) {\n          shutdownWithAction(function () {\n            return WritableStreamDefaultWriterCloseWithErrorPropagation(writer);\n          });\n        } else {\n          shutdown();\n        }\n      });\n      // Closing must be propagated backward\n      if (WritableStreamCloseQueuedOrInFlight(dest) || dest._state === 'closed') {\n        var destClosed_1 = new TypeError('the destination writable stream closed before all data could be piped to it');\n        if (!preventCancel) {\n          shutdownWithAction(function () {\n            return ReadableStreamCancel(source, destClosed_1);\n          }, true, destClosed_1);\n        } else {\n          shutdown(true, destClosed_1);\n        }\n      }\n      setPromiseIsHandledToTrue(pipeLoop());\n      function waitForWritesToFinish() {\n        // Another write may have started while we were waiting on this currentWrite, so we have to be sure to wait\n        // for that too.\n        var oldCurrentWrite = currentWrite;\n        return PerformPromiseThen(currentWrite, function () {\n          return oldCurrentWrite !== currentWrite ? waitForWritesToFinish() : undefined;\n        });\n      }\n      function isOrBecomesErrored(stream, promise, action) {\n        if (stream._state === 'errored') {\n          action(stream._storedError);\n        } else {\n          uponRejection(promise, action);\n        }\n      }\n      function isOrBecomesClosed(stream, promise, action) {\n        if (stream._state === 'closed') {\n          action();\n        } else {\n          uponFulfillment(promise, action);\n        }\n      }\n      function shutdownWithAction(action, originalIsError, originalError) {\n        if (shuttingDown) {\n          return;\n        }\n        shuttingDown = true;\n        if (dest._state === 'writable' && !WritableStreamCloseQueuedOrInFlight(dest)) {\n          uponFulfillment(waitForWritesToFinish(), doTheRest);\n        } else {\n          doTheRest();\n        }\n        function doTheRest() {\n          uponPromise(action(), function () {\n            return finalize(originalIsError, originalError);\n          }, function (newError) {\n            return finalize(true, newError);\n          });\n        }\n      }\n      function shutdown(isError, error) {\n        if (shuttingDown) {\n          return;\n        }\n        shuttingDown = true;\n        if (dest._state === 'writable' && !WritableStreamCloseQueuedOrInFlight(dest)) {\n          uponFulfillment(waitForWritesToFinish(), function () {\n            return finalize(isError, error);\n          });\n        } else {\n          finalize(isError, error);\n        }\n      }\n      function finalize(isError, error) {\n        WritableStreamDefaultWriterRelease(writer);\n        ReadableStreamReaderGenericRelease(reader);\n        if (signal !== undefined) {\n          signal.removeEventListener('abort', abortAlgorithm);\n        }\n        if (isError) {\n          reject(error);\n        } else {\n          resolve(undefined);\n        }\n      }\n    });\n  }\n\n  /**\n   * Allows control of a {@link ReadableStream | readable stream}'s state and internal queue.\n   *\n   * @public\n   */\n  var ReadableStreamDefaultController = /** @class */function () {\n    function ReadableStreamDefaultController() {\n      throw new TypeError('Illegal constructor');\n    }\n    Object.defineProperty(ReadableStreamDefaultController.prototype, \"desiredSize\", {\n      /**\n       * Returns the desired size to fill the controlled stream's internal queue. It can be negative, if the queue is\n       * over-full. An underlying source ought to use this information to determine when and how to apply backpressure.\n       */\n      get: function () {\n        if (!IsReadableStreamDefaultController(this)) {\n          throw defaultControllerBrandCheckException$1('desiredSize');\n        }\n        return ReadableStreamDefaultControllerGetDesiredSize(this);\n      },\n      enumerable: false,\n      configurable: true\n    });\n    /**\n     * Closes the controlled readable stream. Consumers will still be able to read any previously-enqueued chunks from\n     * the stream, but once those are read, the stream will become closed.\n     */\n    ReadableStreamDefaultController.prototype.close = function () {\n      if (!IsReadableStreamDefaultController(this)) {\n        throw defaultControllerBrandCheckException$1('close');\n      }\n      if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(this)) {\n        throw new TypeError('The stream is not in a state that permits close');\n      }\n      ReadableStreamDefaultControllerClose(this);\n    };\n    ReadableStreamDefaultController.prototype.enqueue = function (chunk) {\n      if (chunk === void 0) {\n        chunk = undefined;\n      }\n      if (!IsReadableStreamDefaultController(this)) {\n        throw defaultControllerBrandCheckException$1('enqueue');\n      }\n      if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(this)) {\n        throw new TypeError('The stream is not in a state that permits enqueue');\n      }\n      return ReadableStreamDefaultControllerEnqueue(this, chunk);\n    };\n    /**\n     * Errors the controlled readable stream, making all future interactions with it fail with the given error `e`.\n     */\n    ReadableStreamDefaultController.prototype.error = function (e) {\n      if (e === void 0) {\n        e = undefined;\n      }\n      if (!IsReadableStreamDefaultController(this)) {\n        throw defaultControllerBrandCheckException$1('error');\n      }\n      ReadableStreamDefaultControllerError(this, e);\n    };\n    /** @internal */\n    ReadableStreamDefaultController.prototype[CancelSteps] = function (reason) {\n      ResetQueue(this);\n      var result = this._cancelAlgorithm(reason);\n      ReadableStreamDefaultControllerClearAlgorithms(this);\n      return result;\n    };\n    /** @internal */\n    ReadableStreamDefaultController.prototype[PullSteps] = function (readRequest) {\n      var stream = this._controlledReadableStream;\n      if (this._queue.length > 0) {\n        var chunk = DequeueValue(this);\n        if (this._closeRequested && this._queue.length === 0) {\n          ReadableStreamDefaultControllerClearAlgorithms(this);\n          ReadableStreamClose(stream);\n        } else {\n          ReadableStreamDefaultControllerCallPullIfNeeded(this);\n        }\n        readRequest._chunkSteps(chunk);\n      } else {\n        ReadableStreamAddReadRequest(stream, readRequest);\n        ReadableStreamDefaultControllerCallPullIfNeeded(this);\n      }\n    };\n    return ReadableStreamDefaultController;\n  }();\n  Object.defineProperties(ReadableStreamDefaultController.prototype, {\n    close: {\n      enumerable: true\n    },\n    enqueue: {\n      enumerable: true\n    },\n    error: {\n      enumerable: true\n    },\n    desiredSize: {\n      enumerable: true\n    }\n  });\n  if (typeof SymbolPolyfill.toStringTag === 'symbol') {\n    Object.defineProperty(ReadableStreamDefaultController.prototype, SymbolPolyfill.toStringTag, {\n      value: 'ReadableStreamDefaultController',\n      configurable: true\n    });\n  }\n  // Abstract operations for the ReadableStreamDefaultController.\n  function IsReadableStreamDefaultController(x) {\n    if (!typeIsObject(x)) {\n      return false;\n    }\n    if (!Object.prototype.hasOwnProperty.call(x, '_controlledReadableStream')) {\n      return false;\n    }\n    return x instanceof ReadableStreamDefaultController;\n  }\n  function ReadableStreamDefaultControllerCallPullIfNeeded(controller) {\n    var shouldPull = ReadableStreamDefaultControllerShouldCallPull(controller);\n    if (!shouldPull) {\n      return;\n    }\n    if (controller._pulling) {\n      controller._pullAgain = true;\n      return;\n    }\n    controller._pulling = true;\n    var pullPromise = controller._pullAlgorithm();\n    uponPromise(pullPromise, function () {\n      controller._pulling = false;\n      if (controller._pullAgain) {\n        controller._pullAgain = false;\n        ReadableStreamDefaultControllerCallPullIfNeeded(controller);\n      }\n    }, function (e) {\n      ReadableStreamDefaultControllerError(controller, e);\n    });\n  }\n  function ReadableStreamDefaultControllerShouldCallPull(controller) {\n    var stream = controller._controlledReadableStream;\n    if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(controller)) {\n      return false;\n    }\n    if (!controller._started) {\n      return false;\n    }\n    if (IsReadableStreamLocked(stream) && ReadableStreamGetNumReadRequests(stream) > 0) {\n      return true;\n    }\n    var desiredSize = ReadableStreamDefaultControllerGetDesiredSize(controller);\n    if (desiredSize > 0) {\n      return true;\n    }\n    return false;\n  }\n  function ReadableStreamDefaultControllerClearAlgorithms(controller) {\n    controller._pullAlgorithm = undefined;\n    controller._cancelAlgorithm = undefined;\n    controller._strategySizeAlgorithm = undefined;\n  }\n  // A client of ReadableStreamDefaultController may use these functions directly to bypass state check.\n  function ReadableStreamDefaultControllerClose(controller) {\n    if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(controller)) {\n      return;\n    }\n    var stream = controller._controlledReadableStream;\n    controller._closeRequested = true;\n    if (controller._queue.length === 0) {\n      ReadableStreamDefaultControllerClearAlgorithms(controller);\n      ReadableStreamClose(stream);\n    }\n  }\n  function ReadableStreamDefaultControllerEnqueue(controller, chunk) {\n    if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(controller)) {\n      return;\n    }\n    var stream = controller._controlledReadableStream;\n    if (IsReadableStreamLocked(stream) && ReadableStreamGetNumReadRequests(stream) > 0) {\n      ReadableStreamFulfillReadRequest(stream, chunk, false);\n    } else {\n      var chunkSize = void 0;\n      try {\n        chunkSize = controller._strategySizeAlgorithm(chunk);\n      } catch (chunkSizeE) {\n        ReadableStreamDefaultControllerError(controller, chunkSizeE);\n        throw chunkSizeE;\n      }\n      try {\n        EnqueueValueWithSize(controller, chunk, chunkSize);\n      } catch (enqueueE) {\n        ReadableStreamDefaultControllerError(controller, enqueueE);\n        throw enqueueE;\n      }\n    }\n    ReadableStreamDefaultControllerCallPullIfNeeded(controller);\n  }\n  function ReadableStreamDefaultControllerError(controller, e) {\n    var stream = controller._controlledReadableStream;\n    if (stream._state !== 'readable') {\n      return;\n    }\n    ResetQueue(controller);\n    ReadableStreamDefaultControllerClearAlgorithms(controller);\n    ReadableStreamError(stream, e);\n  }\n  function ReadableStreamDefaultControllerGetDesiredSize(controller) {\n    var state = controller._controlledReadableStream._state;\n    if (state === 'errored') {\n      return null;\n    }\n    if (state === 'closed') {\n      return 0;\n    }\n    return controller._strategyHWM - controller._queueTotalSize;\n  }\n  // This is used in the implementation of TransformStream.\n  function ReadableStreamDefaultControllerHasBackpressure(controller) {\n    if (ReadableStreamDefaultControllerShouldCallPull(controller)) {\n      return false;\n    }\n    return true;\n  }\n  function ReadableStreamDefaultControllerCanCloseOrEnqueue(controller) {\n    var state = controller._controlledReadableStream._state;\n    if (!controller._closeRequested && state === 'readable') {\n      return true;\n    }\n    return false;\n  }\n  function SetUpReadableStreamDefaultController(stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark, sizeAlgorithm) {\n    controller._controlledReadableStream = stream;\n    controller._queue = undefined;\n    controller._queueTotalSize = undefined;\n    ResetQueue(controller);\n    controller._started = false;\n    controller._closeRequested = false;\n    controller._pullAgain = false;\n    controller._pulling = false;\n    controller._strategySizeAlgorithm = sizeAlgorithm;\n    controller._strategyHWM = highWaterMark;\n    controller._pullAlgorithm = pullAlgorithm;\n    controller._cancelAlgorithm = cancelAlgorithm;\n    stream._readableStreamController = controller;\n    var startResult = startAlgorithm();\n    uponPromise(promiseResolvedWith(startResult), function () {\n      controller._started = true;\n      ReadableStreamDefaultControllerCallPullIfNeeded(controller);\n    }, function (r) {\n      ReadableStreamDefaultControllerError(controller, r);\n    });\n  }\n  function SetUpReadableStreamDefaultControllerFromUnderlyingSource(stream, underlyingSource, highWaterMark, sizeAlgorithm) {\n    var controller = Object.create(ReadableStreamDefaultController.prototype);\n    var startAlgorithm = function () {\n      return undefined;\n    };\n    var pullAlgorithm = function () {\n      return promiseResolvedWith(undefined);\n    };\n    var cancelAlgorithm = function () {\n      return promiseResolvedWith(undefined);\n    };\n    if (underlyingSource.start !== undefined) {\n      startAlgorithm = function () {\n        return underlyingSource.start(controller);\n      };\n    }\n    if (underlyingSource.pull !== undefined) {\n      pullAlgorithm = function () {\n        return underlyingSource.pull(controller);\n      };\n    }\n    if (underlyingSource.cancel !== undefined) {\n      cancelAlgorithm = function (reason) {\n        return underlyingSource.cancel(reason);\n      };\n    }\n    SetUpReadableStreamDefaultController(stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark, sizeAlgorithm);\n  }\n  // Helper functions for the ReadableStreamDefaultController.\n  function defaultControllerBrandCheckException$1(name) {\n    return new TypeError(\"ReadableStreamDefaultController.prototype.\" + name + \" can only be used on a ReadableStreamDefaultController\");\n  }\n  function ReadableStreamTee(stream, cloneForBranch2) {\n    if (IsReadableByteStreamController(stream._readableStreamController)) {\n      return ReadableByteStreamTee(stream);\n    }\n    return ReadableStreamDefaultTee(stream);\n  }\n  function ReadableStreamDefaultTee(stream, cloneForBranch2) {\n    var reader = AcquireReadableStreamDefaultReader(stream);\n    var reading = false;\n    var readAgain = false;\n    var canceled1 = false;\n    var canceled2 = false;\n    var reason1;\n    var reason2;\n    var branch1;\n    var branch2;\n    var resolveCancelPromise;\n    var cancelPromise = newPromise(function (resolve) {\n      resolveCancelPromise = resolve;\n    });\n    function pullAlgorithm() {\n      if (reading) {\n        readAgain = true;\n        return promiseResolvedWith(undefined);\n      }\n      reading = true;\n      var readRequest = {\n        _chunkSteps: function (chunk) {\n          // This needs to be delayed a microtask because it takes at least a microtask to detect errors (using\n          // reader._closedPromise below), and we want errors in stream to error both branches immediately. We cannot let\n          // successful synchronously-available reads get ahead of asynchronously-available errors.\n          queueMicrotask(function () {\n            readAgain = false;\n            var chunk1 = chunk;\n            var chunk2 = chunk;\n            // There is no way to access the cloning code right now in the reference implementation.\n            // If we add one then we'll need an implementation for serializable objects.\n            // if (!canceled2 && cloneForBranch2) {\n            //   chunk2 = StructuredDeserialize(StructuredSerialize(chunk2));\n            // }\n            if (!canceled1) {\n              ReadableStreamDefaultControllerEnqueue(branch1._readableStreamController, chunk1);\n            }\n            if (!canceled2) {\n              ReadableStreamDefaultControllerEnqueue(branch2._readableStreamController, chunk2);\n            }\n            reading = false;\n            if (readAgain) {\n              pullAlgorithm();\n            }\n          });\n        },\n        _closeSteps: function () {\n          reading = false;\n          if (!canceled1) {\n            ReadableStreamDefaultControllerClose(branch1._readableStreamController);\n          }\n          if (!canceled2) {\n            ReadableStreamDefaultControllerClose(branch2._readableStreamController);\n          }\n          if (!canceled1 || !canceled2) {\n            resolveCancelPromise(undefined);\n          }\n        },\n        _errorSteps: function () {\n          reading = false;\n        }\n      };\n      ReadableStreamDefaultReaderRead(reader, readRequest);\n      return promiseResolvedWith(undefined);\n    }\n    function cancel1Algorithm(reason) {\n      canceled1 = true;\n      reason1 = reason;\n      if (canceled2) {\n        var compositeReason = CreateArrayFromList([reason1, reason2]);\n        var cancelResult = ReadableStreamCancel(stream, compositeReason);\n        resolveCancelPromise(cancelResult);\n      }\n      return cancelPromise;\n    }\n    function cancel2Algorithm(reason) {\n      canceled2 = true;\n      reason2 = reason;\n      if (canceled1) {\n        var compositeReason = CreateArrayFromList([reason1, reason2]);\n        var cancelResult = ReadableStreamCancel(stream, compositeReason);\n        resolveCancelPromise(cancelResult);\n      }\n      return cancelPromise;\n    }\n    function startAlgorithm() {\n      // do nothing\n    }\n    branch1 = CreateReadableStream(startAlgorithm, pullAlgorithm, cancel1Algorithm);\n    branch2 = CreateReadableStream(startAlgorithm, pullAlgorithm, cancel2Algorithm);\n    uponRejection(reader._closedPromise, function (r) {\n      ReadableStreamDefaultControllerError(branch1._readableStreamController, r);\n      ReadableStreamDefaultControllerError(branch2._readableStreamController, r);\n      if (!canceled1 || !canceled2) {\n        resolveCancelPromise(undefined);\n      }\n    });\n    return [branch1, branch2];\n  }\n  function ReadableByteStreamTee(stream) {\n    var reader = AcquireReadableStreamDefaultReader(stream);\n    var reading = false;\n    var readAgainForBranch1 = false;\n    var readAgainForBranch2 = false;\n    var canceled1 = false;\n    var canceled2 = false;\n    var reason1;\n    var reason2;\n    var branch1;\n    var branch2;\n    var resolveCancelPromise;\n    var cancelPromise = newPromise(function (resolve) {\n      resolveCancelPromise = resolve;\n    });\n    function forwardReaderError(thisReader) {\n      uponRejection(thisReader._closedPromise, function (r) {\n        if (thisReader !== reader) {\n          return;\n        }\n        ReadableByteStreamControllerError(branch1._readableStreamController, r);\n        ReadableByteStreamControllerError(branch2._readableStreamController, r);\n        if (!canceled1 || !canceled2) {\n          resolveCancelPromise(undefined);\n        }\n      });\n    }\n    function pullWithDefaultReader() {\n      if (IsReadableStreamBYOBReader(reader)) {\n        ReadableStreamReaderGenericRelease(reader);\n        reader = AcquireReadableStreamDefaultReader(stream);\n        forwardReaderError(reader);\n      }\n      var readRequest = {\n        _chunkSteps: function (chunk) {\n          // This needs to be delayed a microtask because it takes at least a microtask to detect errors (using\n          // reader._closedPromise below), and we want errors in stream to error both branches immediately. We cannot let\n          // successful synchronously-available reads get ahead of asynchronously-available errors.\n          queueMicrotask(function () {\n            readAgainForBranch1 = false;\n            readAgainForBranch2 = false;\n            var chunk1 = chunk;\n            var chunk2 = chunk;\n            if (!canceled1 && !canceled2) {\n              try {\n                chunk2 = CloneAsUint8Array(chunk);\n              } catch (cloneE) {\n                ReadableByteStreamControllerError(branch1._readableStreamController, cloneE);\n                ReadableByteStreamControllerError(branch2._readableStreamController, cloneE);\n                resolveCancelPromise(ReadableStreamCancel(stream, cloneE));\n                return;\n              }\n            }\n            if (!canceled1) {\n              ReadableByteStreamControllerEnqueue(branch1._readableStreamController, chunk1);\n            }\n            if (!canceled2) {\n              ReadableByteStreamControllerEnqueue(branch2._readableStreamController, chunk2);\n            }\n            reading = false;\n            if (readAgainForBranch1) {\n              pull1Algorithm();\n            } else if (readAgainForBranch2) {\n              pull2Algorithm();\n            }\n          });\n        },\n        _closeSteps: function () {\n          reading = false;\n          if (!canceled1) {\n            ReadableByteStreamControllerClose(branch1._readableStreamController);\n          }\n          if (!canceled2) {\n            ReadableByteStreamControllerClose(branch2._readableStreamController);\n          }\n          if (branch1._readableStreamController._pendingPullIntos.length > 0) {\n            ReadableByteStreamControllerRespond(branch1._readableStreamController, 0);\n          }\n          if (branch2._readableStreamController._pendingPullIntos.length > 0) {\n            ReadableByteStreamControllerRespond(branch2._readableStreamController, 0);\n          }\n          if (!canceled1 || !canceled2) {\n            resolveCancelPromise(undefined);\n          }\n        },\n        _errorSteps: function () {\n          reading = false;\n        }\n      };\n      ReadableStreamDefaultReaderRead(reader, readRequest);\n    }\n    function pullWithBYOBReader(view, forBranch2) {\n      if (IsReadableStreamDefaultReader(reader)) {\n        ReadableStreamReaderGenericRelease(reader);\n        reader = AcquireReadableStreamBYOBReader(stream);\n        forwardReaderError(reader);\n      }\n      var byobBranch = forBranch2 ? branch2 : branch1;\n      var otherBranch = forBranch2 ? branch1 : branch2;\n      var readIntoRequest = {\n        _chunkSteps: function (chunk) {\n          // This needs to be delayed a microtask because it takes at least a microtask to detect errors (using\n          // reader._closedPromise below), and we want errors in stream to error both branches immediately. We cannot let\n          // successful synchronously-available reads get ahead of asynchronously-available errors.\n          queueMicrotask(function () {\n            readAgainForBranch1 = false;\n            readAgainForBranch2 = false;\n            var byobCanceled = forBranch2 ? canceled2 : canceled1;\n            var otherCanceled = forBranch2 ? canceled1 : canceled2;\n            if (!otherCanceled) {\n              var clonedChunk = void 0;\n              try {\n                clonedChunk = CloneAsUint8Array(chunk);\n              } catch (cloneE) {\n                ReadableByteStreamControllerError(byobBranch._readableStreamController, cloneE);\n                ReadableByteStreamControllerError(otherBranch._readableStreamController, cloneE);\n                resolveCancelPromise(ReadableStreamCancel(stream, cloneE));\n                return;\n              }\n              if (!byobCanceled) {\n                ReadableByteStreamControllerRespondWithNewView(byobBranch._readableStreamController, chunk);\n              }\n              ReadableByteStreamControllerEnqueue(otherBranch._readableStreamController, clonedChunk);\n            } else if (!byobCanceled) {\n              ReadableByteStreamControllerRespondWithNewView(byobBranch._readableStreamController, chunk);\n            }\n            reading = false;\n            if (readAgainForBranch1) {\n              pull1Algorithm();\n            } else if (readAgainForBranch2) {\n              pull2Algorithm();\n            }\n          });\n        },\n        _closeSteps: function (chunk) {\n          reading = false;\n          var byobCanceled = forBranch2 ? canceled2 : canceled1;\n          var otherCanceled = forBranch2 ? canceled1 : canceled2;\n          if (!byobCanceled) {\n            ReadableByteStreamControllerClose(byobBranch._readableStreamController);\n          }\n          if (!otherCanceled) {\n            ReadableByteStreamControllerClose(otherBranch._readableStreamController);\n          }\n          if (chunk !== undefined) {\n            if (!byobCanceled) {\n              ReadableByteStreamControllerRespondWithNewView(byobBranch._readableStreamController, chunk);\n            }\n            if (!otherCanceled && otherBranch._readableStreamController._pendingPullIntos.length > 0) {\n              ReadableByteStreamControllerRespond(otherBranch._readableStreamController, 0);\n            }\n          }\n          if (!byobCanceled || !otherCanceled) {\n            resolveCancelPromise(undefined);\n          }\n        },\n        _errorSteps: function () {\n          reading = false;\n        }\n      };\n      ReadableStreamBYOBReaderRead(reader, view, readIntoRequest);\n    }\n    function pull1Algorithm() {\n      if (reading) {\n        readAgainForBranch1 = true;\n        return promiseResolvedWith(undefined);\n      }\n      reading = true;\n      var byobRequest = ReadableByteStreamControllerGetBYOBRequest(branch1._readableStreamController);\n      if (byobRequest === null) {\n        pullWithDefaultReader();\n      } else {\n        pullWithBYOBReader(byobRequest._view, false);\n      }\n      return promiseResolvedWith(undefined);\n    }\n    function pull2Algorithm() {\n      if (reading) {\n        readAgainForBranch2 = true;\n        return promiseResolvedWith(undefined);\n      }\n      reading = true;\n      var byobRequest = ReadableByteStreamControllerGetBYOBRequest(branch2._readableStreamController);\n      if (byobRequest === null) {\n        pullWithDefaultReader();\n      } else {\n        pullWithBYOBReader(byobRequest._view, true);\n      }\n      return promiseResolvedWith(undefined);\n    }\n    function cancel1Algorithm(reason) {\n      canceled1 = true;\n      reason1 = reason;\n      if (canceled2) {\n        var compositeReason = CreateArrayFromList([reason1, reason2]);\n        var cancelResult = ReadableStreamCancel(stream, compositeReason);\n        resolveCancelPromise(cancelResult);\n      }\n      return cancelPromise;\n    }\n    function cancel2Algorithm(reason) {\n      canceled2 = true;\n      reason2 = reason;\n      if (canceled1) {\n        var compositeReason = CreateArrayFromList([reason1, reason2]);\n        var cancelResult = ReadableStreamCancel(stream, compositeReason);\n        resolveCancelPromise(cancelResult);\n      }\n      return cancelPromise;\n    }\n    function startAlgorithm() {\n      return;\n    }\n    branch1 = CreateReadableByteStream(startAlgorithm, pull1Algorithm, cancel1Algorithm);\n    branch2 = CreateReadableByteStream(startAlgorithm, pull2Algorithm, cancel2Algorithm);\n    forwardReaderError(reader);\n    return [branch1, branch2];\n  }\n  function convertUnderlyingDefaultOrByteSource(source, context) {\n    assertDictionary(source, context);\n    var original = source;\n    var autoAllocateChunkSize = original === null || original === void 0 ? void 0 : original.autoAllocateChunkSize;\n    var cancel = original === null || original === void 0 ? void 0 : original.cancel;\n    var pull = original === null || original === void 0 ? void 0 : original.pull;\n    var start = original === null || original === void 0 ? void 0 : original.start;\n    var type = original === null || original === void 0 ? void 0 : original.type;\n    return {\n      autoAllocateChunkSize: autoAllocateChunkSize === undefined ? undefined : convertUnsignedLongLongWithEnforceRange(autoAllocateChunkSize, context + \" has member 'autoAllocateChunkSize' that\"),\n      cancel: cancel === undefined ? undefined : convertUnderlyingSourceCancelCallback(cancel, original, context + \" has member 'cancel' that\"),\n      pull: pull === undefined ? undefined : convertUnderlyingSourcePullCallback(pull, original, context + \" has member 'pull' that\"),\n      start: start === undefined ? undefined : convertUnderlyingSourceStartCallback(start, original, context + \" has member 'start' that\"),\n      type: type === undefined ? undefined : convertReadableStreamType(type, context + \" has member 'type' that\")\n    };\n  }\n  function convertUnderlyingSourceCancelCallback(fn, original, context) {\n    assertFunction(fn, context);\n    return function (reason) {\n      return promiseCall(fn, original, [reason]);\n    };\n  }\n  function convertUnderlyingSourcePullCallback(fn, original, context) {\n    assertFunction(fn, context);\n    return function (controller) {\n      return promiseCall(fn, original, [controller]);\n    };\n  }\n  function convertUnderlyingSourceStartCallback(fn, original, context) {\n    assertFunction(fn, context);\n    return function (controller) {\n      return reflectCall(fn, original, [controller]);\n    };\n  }\n  function convertReadableStreamType(type, context) {\n    type = \"\" + type;\n    if (type !== 'bytes') {\n      throw new TypeError(context + \" '\" + type + \"' is not a valid enumeration value for ReadableStreamType\");\n    }\n    return type;\n  }\n  function convertReaderOptions(options, context) {\n    assertDictionary(options, context);\n    var mode = options === null || options === void 0 ? void 0 : options.mode;\n    return {\n      mode: mode === undefined ? undefined : convertReadableStreamReaderMode(mode, context + \" has member 'mode' that\")\n    };\n  }\n  function convertReadableStreamReaderMode(mode, context) {\n    mode = \"\" + mode;\n    if (mode !== 'byob') {\n      throw new TypeError(context + \" '\" + mode + \"' is not a valid enumeration value for ReadableStreamReaderMode\");\n    }\n    return mode;\n  }\n  function convertIteratorOptions(options, context) {\n    assertDictionary(options, context);\n    var preventCancel = options === null || options === void 0 ? void 0 : options.preventCancel;\n    return {\n      preventCancel: Boolean(preventCancel)\n    };\n  }\n  function convertPipeOptions(options, context) {\n    assertDictionary(options, context);\n    var preventAbort = options === null || options === void 0 ? void 0 : options.preventAbort;\n    var preventCancel = options === null || options === void 0 ? void 0 : options.preventCancel;\n    var preventClose = options === null || options === void 0 ? void 0 : options.preventClose;\n    var signal = options === null || options === void 0 ? void 0 : options.signal;\n    if (signal !== undefined) {\n      assertAbortSignal(signal, context + \" has member 'signal' that\");\n    }\n    return {\n      preventAbort: Boolean(preventAbort),\n      preventCancel: Boolean(preventCancel),\n      preventClose: Boolean(preventClose),\n      signal: signal\n    };\n  }\n  function assertAbortSignal(signal, context) {\n    if (!isAbortSignal(signal)) {\n      throw new TypeError(context + \" is not an AbortSignal.\");\n    }\n  }\n  function convertReadableWritablePair(pair, context) {\n    assertDictionary(pair, context);\n    var readable = pair === null || pair === void 0 ? void 0 : pair.readable;\n    assertRequiredField(readable, 'readable', 'ReadableWritablePair');\n    assertReadableStream(readable, context + \" has member 'readable' that\");\n    var writable = pair === null || pair === void 0 ? void 0 : pair.writable;\n    assertRequiredField(writable, 'writable', 'ReadableWritablePair');\n    assertWritableStream(writable, context + \" has member 'writable' that\");\n    return {\n      readable: readable,\n      writable: writable\n    };\n  }\n\n  /**\n   * A readable stream represents a source of data, from which you can read.\n   *\n   * @public\n   */\n  var ReadableStream = /** @class */function () {\n    function ReadableStream(rawUnderlyingSource, rawStrategy) {\n      if (rawUnderlyingSource === void 0) {\n        rawUnderlyingSource = {};\n      }\n      if (rawStrategy === void 0) {\n        rawStrategy = {};\n      }\n      if (rawUnderlyingSource === undefined) {\n        rawUnderlyingSource = null;\n      } else {\n        assertObject(rawUnderlyingSource, 'First parameter');\n      }\n      var strategy = convertQueuingStrategy(rawStrategy, 'Second parameter');\n      var underlyingSource = convertUnderlyingDefaultOrByteSource(rawUnderlyingSource, 'First parameter');\n      InitializeReadableStream(this);\n      if (underlyingSource.type === 'bytes') {\n        if (strategy.size !== undefined) {\n          throw new RangeError('The strategy for a byte stream cannot have a size function');\n        }\n        var highWaterMark = ExtractHighWaterMark(strategy, 0);\n        SetUpReadableByteStreamControllerFromUnderlyingSource(this, underlyingSource, highWaterMark);\n      } else {\n        var sizeAlgorithm = ExtractSizeAlgorithm(strategy);\n        var highWaterMark = ExtractHighWaterMark(strategy, 1);\n        SetUpReadableStreamDefaultControllerFromUnderlyingSource(this, underlyingSource, highWaterMark, sizeAlgorithm);\n      }\n    }\n    Object.defineProperty(ReadableStream.prototype, \"locked\", {\n      /**\n       * Whether or not the readable stream is locked to a {@link ReadableStreamDefaultReader | reader}.\n       */\n      get: function () {\n        if (!IsReadableStream(this)) {\n          throw streamBrandCheckException$1('locked');\n        }\n        return IsReadableStreamLocked(this);\n      },\n      enumerable: false,\n      configurable: true\n    });\n    /**\n     * Cancels the stream, signaling a loss of interest in the stream by a consumer.\n     *\n     * The supplied `reason` argument will be given to the underlying source's {@link UnderlyingSource.cancel | cancel()}\n     * method, which might or might not use it.\n     */\n    ReadableStream.prototype.cancel = function (reason) {\n      if (reason === void 0) {\n        reason = undefined;\n      }\n      if (!IsReadableStream(this)) {\n        return promiseRejectedWith(streamBrandCheckException$1('cancel'));\n      }\n      if (IsReadableStreamLocked(this)) {\n        return promiseRejectedWith(new TypeError('Cannot cancel a stream that already has a reader'));\n      }\n      return ReadableStreamCancel(this, reason);\n    };\n    ReadableStream.prototype.getReader = function (rawOptions) {\n      if (rawOptions === void 0) {\n        rawOptions = undefined;\n      }\n      if (!IsReadableStream(this)) {\n        throw streamBrandCheckException$1('getReader');\n      }\n      var options = convertReaderOptions(rawOptions, 'First parameter');\n      if (options.mode === undefined) {\n        return AcquireReadableStreamDefaultReader(this);\n      }\n      return AcquireReadableStreamBYOBReader(this);\n    };\n    ReadableStream.prototype.pipeThrough = function (rawTransform, rawOptions) {\n      if (rawOptions === void 0) {\n        rawOptions = {};\n      }\n      if (!IsReadableStream(this)) {\n        throw streamBrandCheckException$1('pipeThrough');\n      }\n      assertRequiredArgument(rawTransform, 1, 'pipeThrough');\n      var transform = convertReadableWritablePair(rawTransform, 'First parameter');\n      var options = convertPipeOptions(rawOptions, 'Second parameter');\n      if (IsReadableStreamLocked(this)) {\n        throw new TypeError('ReadableStream.prototype.pipeThrough cannot be used on a locked ReadableStream');\n      }\n      if (IsWritableStreamLocked(transform.writable)) {\n        throw new TypeError('ReadableStream.prototype.pipeThrough cannot be used on a locked WritableStream');\n      }\n      var promise = ReadableStreamPipeTo(this, transform.writable, options.preventClose, options.preventAbort, options.preventCancel, options.signal);\n      setPromiseIsHandledToTrue(promise);\n      return transform.readable;\n    };\n    ReadableStream.prototype.pipeTo = function (destination, rawOptions) {\n      if (rawOptions === void 0) {\n        rawOptions = {};\n      }\n      if (!IsReadableStream(this)) {\n        return promiseRejectedWith(streamBrandCheckException$1('pipeTo'));\n      }\n      if (destination === undefined) {\n        return promiseRejectedWith(\"Parameter 1 is required in 'pipeTo'.\");\n      }\n      if (!IsWritableStream(destination)) {\n        return promiseRejectedWith(new TypeError(\"ReadableStream.prototype.pipeTo's first argument must be a WritableStream\"));\n      }\n      var options;\n      try {\n        options = convertPipeOptions(rawOptions, 'Second parameter');\n      } catch (e) {\n        return promiseRejectedWith(e);\n      }\n      if (IsReadableStreamLocked(this)) {\n        return promiseRejectedWith(new TypeError('ReadableStream.prototype.pipeTo cannot be used on a locked ReadableStream'));\n      }\n      if (IsWritableStreamLocked(destination)) {\n        return promiseRejectedWith(new TypeError('ReadableStream.prototype.pipeTo cannot be used on a locked WritableStream'));\n      }\n      return ReadableStreamPipeTo(this, destination, options.preventClose, options.preventAbort, options.preventCancel, options.signal);\n    };\n    /**\n     * Tees this readable stream, returning a two-element array containing the two resulting branches as\n     * new {@link ReadableStream} instances.\n     *\n     * Teeing a stream will lock it, preventing any other consumer from acquiring a reader.\n     * To cancel the stream, cancel both of the resulting branches; a composite cancellation reason will then be\n     * propagated to the stream's underlying source.\n     *\n     * Note that the chunks seen in each branch will be the same object. If the chunks are not immutable,\n     * this could allow interference between the two branches.\n     */\n    ReadableStream.prototype.tee = function () {\n      if (!IsReadableStream(this)) {\n        throw streamBrandCheckException$1('tee');\n      }\n      var branches = ReadableStreamTee(this);\n      return CreateArrayFromList(branches);\n    };\n    ReadableStream.prototype.values = function (rawOptions) {\n      if (rawOptions === void 0) {\n        rawOptions = undefined;\n      }\n      if (!IsReadableStream(this)) {\n        throw streamBrandCheckException$1('values');\n      }\n      var options = convertIteratorOptions(rawOptions, 'First parameter');\n      return AcquireReadableStreamAsyncIterator(this, options.preventCancel);\n    };\n    return ReadableStream;\n  }();\n  Object.defineProperties(ReadableStream.prototype, {\n    cancel: {\n      enumerable: true\n    },\n    getReader: {\n      enumerable: true\n    },\n    pipeThrough: {\n      enumerable: true\n    },\n    pipeTo: {\n      enumerable: true\n    },\n    tee: {\n      enumerable: true\n    },\n    values: {\n      enumerable: true\n    },\n    locked: {\n      enumerable: true\n    }\n  });\n  if (typeof SymbolPolyfill.toStringTag === 'symbol') {\n    Object.defineProperty(ReadableStream.prototype, SymbolPolyfill.toStringTag, {\n      value: 'ReadableStream',\n      configurable: true\n    });\n  }\n  if (typeof SymbolPolyfill.asyncIterator === 'symbol') {\n    Object.defineProperty(ReadableStream.prototype, SymbolPolyfill.asyncIterator, {\n      value: ReadableStream.prototype.values,\n      writable: true,\n      configurable: true\n    });\n  }\n  // Abstract operations for the ReadableStream.\n  // Throws if and only if startAlgorithm throws.\n  function CreateReadableStream(startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark, sizeAlgorithm) {\n    if (highWaterMark === void 0) {\n      highWaterMark = 1;\n    }\n    if (sizeAlgorithm === void 0) {\n      sizeAlgorithm = function () {\n        return 1;\n      };\n    }\n    var stream = Object.create(ReadableStream.prototype);\n    InitializeReadableStream(stream);\n    var controller = Object.create(ReadableStreamDefaultController.prototype);\n    SetUpReadableStreamDefaultController(stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark, sizeAlgorithm);\n    return stream;\n  }\n  // Throws if and only if startAlgorithm throws.\n  function CreateReadableByteStream(startAlgorithm, pullAlgorithm, cancelAlgorithm) {\n    var stream = Object.create(ReadableStream.prototype);\n    InitializeReadableStream(stream);\n    var controller = Object.create(ReadableByteStreamController.prototype);\n    SetUpReadableByteStreamController(stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, 0, undefined);\n    return stream;\n  }\n  function InitializeReadableStream(stream) {\n    stream._state = 'readable';\n    stream._reader = undefined;\n    stream._storedError = undefined;\n    stream._disturbed = false;\n  }\n  function IsReadableStream(x) {\n    if (!typeIsObject(x)) {\n      return false;\n    }\n    if (!Object.prototype.hasOwnProperty.call(x, '_readableStreamController')) {\n      return false;\n    }\n    return x instanceof ReadableStream;\n  }\n  function IsReadableStreamLocked(stream) {\n    if (stream._reader === undefined) {\n      return false;\n    }\n    return true;\n  }\n  // ReadableStream API exposed for controllers.\n  function ReadableStreamCancel(stream, reason) {\n    stream._disturbed = true;\n    if (stream._state === 'closed') {\n      return promiseResolvedWith(undefined);\n    }\n    if (stream._state === 'errored') {\n      return promiseRejectedWith(stream._storedError);\n    }\n    ReadableStreamClose(stream);\n    var reader = stream._reader;\n    if (reader !== undefined && IsReadableStreamBYOBReader(reader)) {\n      reader._readIntoRequests.forEach(function (readIntoRequest) {\n        readIntoRequest._closeSteps(undefined);\n      });\n      reader._readIntoRequests = new SimpleQueue();\n    }\n    var sourceCancelPromise = stream._readableStreamController[CancelSteps](reason);\n    return transformPromiseWith(sourceCancelPromise, noop);\n  }\n  function ReadableStreamClose(stream) {\n    stream._state = 'closed';\n    var reader = stream._reader;\n    if (reader === undefined) {\n      return;\n    }\n    defaultReaderClosedPromiseResolve(reader);\n    if (IsReadableStreamDefaultReader(reader)) {\n      reader._readRequests.forEach(function (readRequest) {\n        readRequest._closeSteps();\n      });\n      reader._readRequests = new SimpleQueue();\n    }\n  }\n  function ReadableStreamError(stream, e) {\n    stream._state = 'errored';\n    stream._storedError = e;\n    var reader = stream._reader;\n    if (reader === undefined) {\n      return;\n    }\n    defaultReaderClosedPromiseReject(reader, e);\n    if (IsReadableStreamDefaultReader(reader)) {\n      reader._readRequests.forEach(function (readRequest) {\n        readRequest._errorSteps(e);\n      });\n      reader._readRequests = new SimpleQueue();\n    } else {\n      reader._readIntoRequests.forEach(function (readIntoRequest) {\n        readIntoRequest._errorSteps(e);\n      });\n      reader._readIntoRequests = new SimpleQueue();\n    }\n  }\n  // Helper functions for the ReadableStream.\n  function streamBrandCheckException$1(name) {\n    return new TypeError(\"ReadableStream.prototype.\" + name + \" can only be used on a ReadableStream\");\n  }\n  function convertQueuingStrategyInit(init, context) {\n    assertDictionary(init, context);\n    var highWaterMark = init === null || init === void 0 ? void 0 : init.highWaterMark;\n    assertRequiredField(highWaterMark, 'highWaterMark', 'QueuingStrategyInit');\n    return {\n      highWaterMark: convertUnrestrictedDouble(highWaterMark)\n    };\n  }\n\n  // The size function must not have a prototype property nor be a constructor\n  var byteLengthSizeFunction = function (chunk) {\n    return chunk.byteLength;\n  };\n  try {\n    Object.defineProperty(byteLengthSizeFunction, 'name', {\n      value: 'size',\n      configurable: true\n    });\n  } catch (_a) {\n    // This property is non-configurable in older browsers, so ignore if this throws.\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/name#browser_compatibility\n  }\n  /**\n   * A queuing strategy that counts the number of bytes in each chunk.\n   *\n   * @public\n   */\n  var ByteLengthQueuingStrategy = /** @class */function () {\n    function ByteLengthQueuingStrategy(options) {\n      assertRequiredArgument(options, 1, 'ByteLengthQueuingStrategy');\n      options = convertQueuingStrategyInit(options, 'First parameter');\n      this._byteLengthQueuingStrategyHighWaterMark = options.highWaterMark;\n    }\n    Object.defineProperty(ByteLengthQueuingStrategy.prototype, \"highWaterMark\", {\n      /**\n       * Returns the high water mark provided to the constructor.\n       */\n      get: function () {\n        if (!IsByteLengthQueuingStrategy(this)) {\n          throw byteLengthBrandCheckException('highWaterMark');\n        }\n        return this._byteLengthQueuingStrategyHighWaterMark;\n      },\n      enumerable: false,\n      configurable: true\n    });\n    Object.defineProperty(ByteLengthQueuingStrategy.prototype, \"size\", {\n      /**\n       * Measures the size of `chunk` by returning the value of its `byteLength` property.\n       */\n      get: function () {\n        if (!IsByteLengthQueuingStrategy(this)) {\n          throw byteLengthBrandCheckException('size');\n        }\n        return byteLengthSizeFunction;\n      },\n      enumerable: false,\n      configurable: true\n    });\n    return ByteLengthQueuingStrategy;\n  }();\n  Object.defineProperties(ByteLengthQueuingStrategy.prototype, {\n    highWaterMark: {\n      enumerable: true\n    },\n    size: {\n      enumerable: true\n    }\n  });\n  if (typeof SymbolPolyfill.toStringTag === 'symbol') {\n    Object.defineProperty(ByteLengthQueuingStrategy.prototype, SymbolPolyfill.toStringTag, {\n      value: 'ByteLengthQueuingStrategy',\n      configurable: true\n    });\n  }\n  // Helper functions for the ByteLengthQueuingStrategy.\n  function byteLengthBrandCheckException(name) {\n    return new TypeError(\"ByteLengthQueuingStrategy.prototype.\" + name + \" can only be used on a ByteLengthQueuingStrategy\");\n  }\n  function IsByteLengthQueuingStrategy(x) {\n    if (!typeIsObject(x)) {\n      return false;\n    }\n    if (!Object.prototype.hasOwnProperty.call(x, '_byteLengthQueuingStrategyHighWaterMark')) {\n      return false;\n    }\n    return x instanceof ByteLengthQueuingStrategy;\n  }\n\n  // The size function must not have a prototype property nor be a constructor\n  var countSizeFunction = function () {\n    return 1;\n  };\n  try {\n    Object.defineProperty(countSizeFunction, 'name', {\n      value: 'size',\n      configurable: true\n    });\n  } catch (_a) {\n    // This property is non-configurable in older browsers, so ignore if this throws.\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/name#browser_compatibility\n  }\n  /**\n   * A queuing strategy that counts the number of chunks.\n   *\n   * @public\n   */\n  var CountQueuingStrategy = /** @class */function () {\n    function CountQueuingStrategy(options) {\n      assertRequiredArgument(options, 1, 'CountQueuingStrategy');\n      options = convertQueuingStrategyInit(options, 'First parameter');\n      this._countQueuingStrategyHighWaterMark = options.highWaterMark;\n    }\n    Object.defineProperty(CountQueuingStrategy.prototype, \"highWaterMark\", {\n      /**\n       * Returns the high water mark provided to the constructor.\n       */\n      get: function () {\n        if (!IsCountQueuingStrategy(this)) {\n          throw countBrandCheckException('highWaterMark');\n        }\n        return this._countQueuingStrategyHighWaterMark;\n      },\n      enumerable: false,\n      configurable: true\n    });\n    Object.defineProperty(CountQueuingStrategy.prototype, \"size\", {\n      /**\n       * Measures the size of `chunk` by always returning 1.\n       * This ensures that the total queue size is a count of the number of chunks in the queue.\n       */\n      get: function () {\n        if (!IsCountQueuingStrategy(this)) {\n          throw countBrandCheckException('size');\n        }\n        return countSizeFunction;\n      },\n      enumerable: false,\n      configurable: true\n    });\n    return CountQueuingStrategy;\n  }();\n  Object.defineProperties(CountQueuingStrategy.prototype, {\n    highWaterMark: {\n      enumerable: true\n    },\n    size: {\n      enumerable: true\n    }\n  });\n  if (typeof SymbolPolyfill.toStringTag === 'symbol') {\n    Object.defineProperty(CountQueuingStrategy.prototype, SymbolPolyfill.toStringTag, {\n      value: 'CountQueuingStrategy',\n      configurable: true\n    });\n  }\n  // Helper functions for the CountQueuingStrategy.\n  function countBrandCheckException(name) {\n    return new TypeError(\"CountQueuingStrategy.prototype.\" + name + \" can only be used on a CountQueuingStrategy\");\n  }\n  function IsCountQueuingStrategy(x) {\n    if (!typeIsObject(x)) {\n      return false;\n    }\n    if (!Object.prototype.hasOwnProperty.call(x, '_countQueuingStrategyHighWaterMark')) {\n      return false;\n    }\n    return x instanceof CountQueuingStrategy;\n  }\n  function convertTransformer(original, context) {\n    assertDictionary(original, context);\n    var flush = original === null || original === void 0 ? void 0 : original.flush;\n    var readableType = original === null || original === void 0 ? void 0 : original.readableType;\n    var start = original === null || original === void 0 ? void 0 : original.start;\n    var transform = original === null || original === void 0 ? void 0 : original.transform;\n    var writableType = original === null || original === void 0 ? void 0 : original.writableType;\n    return {\n      flush: flush === undefined ? undefined : convertTransformerFlushCallback(flush, original, context + \" has member 'flush' that\"),\n      readableType: readableType,\n      start: start === undefined ? undefined : convertTransformerStartCallback(start, original, context + \" has member 'start' that\"),\n      transform: transform === undefined ? undefined : convertTransformerTransformCallback(transform, original, context + \" has member 'transform' that\"),\n      writableType: writableType\n    };\n  }\n  function convertTransformerFlushCallback(fn, original, context) {\n    assertFunction(fn, context);\n    return function (controller) {\n      return promiseCall(fn, original, [controller]);\n    };\n  }\n  function convertTransformerStartCallback(fn, original, context) {\n    assertFunction(fn, context);\n    return function (controller) {\n      return reflectCall(fn, original, [controller]);\n    };\n  }\n  function convertTransformerTransformCallback(fn, original, context) {\n    assertFunction(fn, context);\n    return function (chunk, controller) {\n      return promiseCall(fn, original, [chunk, controller]);\n    };\n  }\n\n  // Class TransformStream\n  /**\n   * A transform stream consists of a pair of streams: a {@link WritableStream | writable stream},\n   * known as its writable side, and a {@link ReadableStream | readable stream}, known as its readable side.\n   * In a manner specific to the transform stream in question, writes to the writable side result in new data being\n   * made available for reading from the readable side.\n   *\n   * @public\n   */\n  var TransformStream = /** @class */function () {\n    function TransformStream(rawTransformer, rawWritableStrategy, rawReadableStrategy) {\n      if (rawTransformer === void 0) {\n        rawTransformer = {};\n      }\n      if (rawWritableStrategy === void 0) {\n        rawWritableStrategy = {};\n      }\n      if (rawReadableStrategy === void 0) {\n        rawReadableStrategy = {};\n      }\n      if (rawTransformer === undefined) {\n        rawTransformer = null;\n      }\n      var writableStrategy = convertQueuingStrategy(rawWritableStrategy, 'Second parameter');\n      var readableStrategy = convertQueuingStrategy(rawReadableStrategy, 'Third parameter');\n      var transformer = convertTransformer(rawTransformer, 'First parameter');\n      if (transformer.readableType !== undefined) {\n        throw new RangeError('Invalid readableType specified');\n      }\n      if (transformer.writableType !== undefined) {\n        throw new RangeError('Invalid writableType specified');\n      }\n      var readableHighWaterMark = ExtractHighWaterMark(readableStrategy, 0);\n      var readableSizeAlgorithm = ExtractSizeAlgorithm(readableStrategy);\n      var writableHighWaterMark = ExtractHighWaterMark(writableStrategy, 1);\n      var writableSizeAlgorithm = ExtractSizeAlgorithm(writableStrategy);\n      var startPromise_resolve;\n      var startPromise = newPromise(function (resolve) {\n        startPromise_resolve = resolve;\n      });\n      InitializeTransformStream(this, startPromise, writableHighWaterMark, writableSizeAlgorithm, readableHighWaterMark, readableSizeAlgorithm);\n      SetUpTransformStreamDefaultControllerFromTransformer(this, transformer);\n      if (transformer.start !== undefined) {\n        startPromise_resolve(transformer.start(this._transformStreamController));\n      } else {\n        startPromise_resolve(undefined);\n      }\n    }\n    Object.defineProperty(TransformStream.prototype, \"readable\", {\n      /**\n       * The readable side of the transform stream.\n       */\n      get: function () {\n        if (!IsTransformStream(this)) {\n          throw streamBrandCheckException('readable');\n        }\n        return this._readable;\n      },\n      enumerable: false,\n      configurable: true\n    });\n    Object.defineProperty(TransformStream.prototype, \"writable\", {\n      /**\n       * The writable side of the transform stream.\n       */\n      get: function () {\n        if (!IsTransformStream(this)) {\n          throw streamBrandCheckException('writable');\n        }\n        return this._writable;\n      },\n      enumerable: false,\n      configurable: true\n    });\n    return TransformStream;\n  }();\n  Object.defineProperties(TransformStream.prototype, {\n    readable: {\n      enumerable: true\n    },\n    writable: {\n      enumerable: true\n    }\n  });\n  if (typeof SymbolPolyfill.toStringTag === 'symbol') {\n    Object.defineProperty(TransformStream.prototype, SymbolPolyfill.toStringTag, {\n      value: 'TransformStream',\n      configurable: true\n    });\n  }\n  function InitializeTransformStream(stream, startPromise, writableHighWaterMark, writableSizeAlgorithm, readableHighWaterMark, readableSizeAlgorithm) {\n    function startAlgorithm() {\n      return startPromise;\n    }\n    function writeAlgorithm(chunk) {\n      return TransformStreamDefaultSinkWriteAlgorithm(stream, chunk);\n    }\n    function abortAlgorithm(reason) {\n      return TransformStreamDefaultSinkAbortAlgorithm(stream, reason);\n    }\n    function closeAlgorithm() {\n      return TransformStreamDefaultSinkCloseAlgorithm(stream);\n    }\n    stream._writable = CreateWritableStream(startAlgorithm, writeAlgorithm, closeAlgorithm, abortAlgorithm, writableHighWaterMark, writableSizeAlgorithm);\n    function pullAlgorithm() {\n      return TransformStreamDefaultSourcePullAlgorithm(stream);\n    }\n    function cancelAlgorithm(reason) {\n      TransformStreamErrorWritableAndUnblockWrite(stream, reason);\n      return promiseResolvedWith(undefined);\n    }\n    stream._readable = CreateReadableStream(startAlgorithm, pullAlgorithm, cancelAlgorithm, readableHighWaterMark, readableSizeAlgorithm);\n    // The [[backpressure]] slot is set to undefined so that it can be initialised by TransformStreamSetBackpressure.\n    stream._backpressure = undefined;\n    stream._backpressureChangePromise = undefined;\n    stream._backpressureChangePromise_resolve = undefined;\n    TransformStreamSetBackpressure(stream, true);\n    stream._transformStreamController = undefined;\n  }\n  function IsTransformStream(x) {\n    if (!typeIsObject(x)) {\n      return false;\n    }\n    if (!Object.prototype.hasOwnProperty.call(x, '_transformStreamController')) {\n      return false;\n    }\n    return x instanceof TransformStream;\n  }\n  // This is a no-op if both sides are already errored.\n  function TransformStreamError(stream, e) {\n    ReadableStreamDefaultControllerError(stream._readable._readableStreamController, e);\n    TransformStreamErrorWritableAndUnblockWrite(stream, e);\n  }\n  function TransformStreamErrorWritableAndUnblockWrite(stream, e) {\n    TransformStreamDefaultControllerClearAlgorithms(stream._transformStreamController);\n    WritableStreamDefaultControllerErrorIfNeeded(stream._writable._writableStreamController, e);\n    if (stream._backpressure) {\n      // Pretend that pull() was called to permit any pending write() calls to complete. TransformStreamSetBackpressure()\n      // cannot be called from enqueue() or pull() once the ReadableStream is errored, so this will will be the final time\n      // _backpressure is set.\n      TransformStreamSetBackpressure(stream, false);\n    }\n  }\n  function TransformStreamSetBackpressure(stream, backpressure) {\n    // Passes also when called during construction.\n    if (stream._backpressureChangePromise !== undefined) {\n      stream._backpressureChangePromise_resolve();\n    }\n    stream._backpressureChangePromise = newPromise(function (resolve) {\n      stream._backpressureChangePromise_resolve = resolve;\n    });\n    stream._backpressure = backpressure;\n  }\n  // Class TransformStreamDefaultController\n  /**\n   * Allows control of the {@link ReadableStream} and {@link WritableStream} of the associated {@link TransformStream}.\n   *\n   * @public\n   */\n  var TransformStreamDefaultController = /** @class */function () {\n    function TransformStreamDefaultController() {\n      throw new TypeError('Illegal constructor');\n    }\n    Object.defineProperty(TransformStreamDefaultController.prototype, \"desiredSize\", {\n      /**\n       * Returns the desired size to fill the readable side’s internal queue. It can be negative, if the queue is over-full.\n       */\n      get: function () {\n        if (!IsTransformStreamDefaultController(this)) {\n          throw defaultControllerBrandCheckException('desiredSize');\n        }\n        var readableController = this._controlledTransformStream._readable._readableStreamController;\n        return ReadableStreamDefaultControllerGetDesiredSize(readableController);\n      },\n      enumerable: false,\n      configurable: true\n    });\n    TransformStreamDefaultController.prototype.enqueue = function (chunk) {\n      if (chunk === void 0) {\n        chunk = undefined;\n      }\n      if (!IsTransformStreamDefaultController(this)) {\n        throw defaultControllerBrandCheckException('enqueue');\n      }\n      TransformStreamDefaultControllerEnqueue(this, chunk);\n    };\n    /**\n     * Errors both the readable side and the writable side of the controlled transform stream, making all future\n     * interactions with it fail with the given error `e`. Any chunks queued for transformation will be discarded.\n     */\n    TransformStreamDefaultController.prototype.error = function (reason) {\n      if (reason === void 0) {\n        reason = undefined;\n      }\n      if (!IsTransformStreamDefaultController(this)) {\n        throw defaultControllerBrandCheckException('error');\n      }\n      TransformStreamDefaultControllerError(this, reason);\n    };\n    /**\n     * Closes the readable side and errors the writable side of the controlled transform stream. This is useful when the\n     * transformer only needs to consume a portion of the chunks written to the writable side.\n     */\n    TransformStreamDefaultController.prototype.terminate = function () {\n      if (!IsTransformStreamDefaultController(this)) {\n        throw defaultControllerBrandCheckException('terminate');\n      }\n      TransformStreamDefaultControllerTerminate(this);\n    };\n    return TransformStreamDefaultController;\n  }();\n  Object.defineProperties(TransformStreamDefaultController.prototype, {\n    enqueue: {\n      enumerable: true\n    },\n    error: {\n      enumerable: true\n    },\n    terminate: {\n      enumerable: true\n    },\n    desiredSize: {\n      enumerable: true\n    }\n  });\n  if (typeof SymbolPolyfill.toStringTag === 'symbol') {\n    Object.defineProperty(TransformStreamDefaultController.prototype, SymbolPolyfill.toStringTag, {\n      value: 'TransformStreamDefaultController',\n      configurable: true\n    });\n  }\n  // Transform Stream Default Controller Abstract Operations\n  function IsTransformStreamDefaultController(x) {\n    if (!typeIsObject(x)) {\n      return false;\n    }\n    if (!Object.prototype.hasOwnProperty.call(x, '_controlledTransformStream')) {\n      return false;\n    }\n    return x instanceof TransformStreamDefaultController;\n  }\n  function SetUpTransformStreamDefaultController(stream, controller, transformAlgorithm, flushAlgorithm) {\n    controller._controlledTransformStream = stream;\n    stream._transformStreamController = controller;\n    controller._transformAlgorithm = transformAlgorithm;\n    controller._flushAlgorithm = flushAlgorithm;\n  }\n  function SetUpTransformStreamDefaultControllerFromTransformer(stream, transformer) {\n    var controller = Object.create(TransformStreamDefaultController.prototype);\n    var transformAlgorithm = function (chunk) {\n      try {\n        TransformStreamDefaultControllerEnqueue(controller, chunk);\n        return promiseResolvedWith(undefined);\n      } catch (transformResultE) {\n        return promiseRejectedWith(transformResultE);\n      }\n    };\n    var flushAlgorithm = function () {\n      return promiseResolvedWith(undefined);\n    };\n    if (transformer.transform !== undefined) {\n      transformAlgorithm = function (chunk) {\n        return transformer.transform(chunk, controller);\n      };\n    }\n    if (transformer.flush !== undefined) {\n      flushAlgorithm = function () {\n        return transformer.flush(controller);\n      };\n    }\n    SetUpTransformStreamDefaultController(stream, controller, transformAlgorithm, flushAlgorithm);\n  }\n  function TransformStreamDefaultControllerClearAlgorithms(controller) {\n    controller._transformAlgorithm = undefined;\n    controller._flushAlgorithm = undefined;\n  }\n  function TransformStreamDefaultControllerEnqueue(controller, chunk) {\n    var stream = controller._controlledTransformStream;\n    var readableController = stream._readable._readableStreamController;\n    if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(readableController)) {\n      throw new TypeError('Readable side is not in a state that permits enqueue');\n    }\n    // We throttle transform invocations based on the backpressure of the ReadableStream, but we still\n    // accept TransformStreamDefaultControllerEnqueue() calls.\n    try {\n      ReadableStreamDefaultControllerEnqueue(readableController, chunk);\n    } catch (e) {\n      // This happens when readableStrategy.size() throws.\n      TransformStreamErrorWritableAndUnblockWrite(stream, e);\n      throw stream._readable._storedError;\n    }\n    var backpressure = ReadableStreamDefaultControllerHasBackpressure(readableController);\n    if (backpressure !== stream._backpressure) {\n      TransformStreamSetBackpressure(stream, true);\n    }\n  }\n  function TransformStreamDefaultControllerError(controller, e) {\n    TransformStreamError(controller._controlledTransformStream, e);\n  }\n  function TransformStreamDefaultControllerPerformTransform(controller, chunk) {\n    var transformPromise = controller._transformAlgorithm(chunk);\n    return transformPromiseWith(transformPromise, undefined, function (r) {\n      TransformStreamError(controller._controlledTransformStream, r);\n      throw r;\n    });\n  }\n  function TransformStreamDefaultControllerTerminate(controller) {\n    var stream = controller._controlledTransformStream;\n    var readableController = stream._readable._readableStreamController;\n    ReadableStreamDefaultControllerClose(readableController);\n    var error = new TypeError('TransformStream terminated');\n    TransformStreamErrorWritableAndUnblockWrite(stream, error);\n  }\n  // TransformStreamDefaultSink Algorithms\n  function TransformStreamDefaultSinkWriteAlgorithm(stream, chunk) {\n    var controller = stream._transformStreamController;\n    if (stream._backpressure) {\n      var backpressureChangePromise = stream._backpressureChangePromise;\n      return transformPromiseWith(backpressureChangePromise, function () {\n        var writable = stream._writable;\n        var state = writable._state;\n        if (state === 'erroring') {\n          throw writable._storedError;\n        }\n        return TransformStreamDefaultControllerPerformTransform(controller, chunk);\n      });\n    }\n    return TransformStreamDefaultControllerPerformTransform(controller, chunk);\n  }\n  function TransformStreamDefaultSinkAbortAlgorithm(stream, reason) {\n    // abort() is not called synchronously, so it is possible for abort() to be called when the stream is already\n    // errored.\n    TransformStreamError(stream, reason);\n    return promiseResolvedWith(undefined);\n  }\n  function TransformStreamDefaultSinkCloseAlgorithm(stream) {\n    // stream._readable cannot change after construction, so caching it across a call to user code is safe.\n    var readable = stream._readable;\n    var controller = stream._transformStreamController;\n    var flushPromise = controller._flushAlgorithm();\n    TransformStreamDefaultControllerClearAlgorithms(controller);\n    // Return a promise that is fulfilled with undefined on success.\n    return transformPromiseWith(flushPromise, function () {\n      if (readable._state === 'errored') {\n        throw readable._storedError;\n      }\n      ReadableStreamDefaultControllerClose(readable._readableStreamController);\n    }, function (r) {\n      TransformStreamError(stream, r);\n      throw readable._storedError;\n    });\n  }\n  // TransformStreamDefaultSource Algorithms\n  function TransformStreamDefaultSourcePullAlgorithm(stream) {\n    // Invariant. Enforced by the promises returned by start() and pull().\n    TransformStreamSetBackpressure(stream, false);\n    // Prevent the next pull() call until there is backpressure.\n    return stream._backpressureChangePromise;\n  }\n  // Helper functions for the TransformStreamDefaultController.\n  function defaultControllerBrandCheckException(name) {\n    return new TypeError(\"TransformStreamDefaultController.prototype.\" + name + \" can only be used on a TransformStreamDefaultController\");\n  }\n  // Helper functions for the TransformStream.\n  function streamBrandCheckException(name) {\n    return new TypeError(\"TransformStream.prototype.\" + name + \" can only be used on a TransformStream\");\n  }\n  exports.ByteLengthQueuingStrategy = ByteLengthQueuingStrategy;\n  exports.CountQueuingStrategy = CountQueuingStrategy;\n  exports.ReadableByteStreamController = ReadableByteStreamController;\n  exports.ReadableStream = ReadableStream;\n  exports.ReadableStreamBYOBReader = ReadableStreamBYOBReader;\n  exports.ReadableStreamBYOBRequest = ReadableStreamBYOBRequest;\n  exports.ReadableStreamDefaultController = ReadableStreamDefaultController;\n  exports.ReadableStreamDefaultReader = ReadableStreamDefaultReader;\n  exports.TransformStream = TransformStream;\n  exports.TransformStreamDefaultController = TransformStreamDefaultController;\n  exports.WritableStream = WritableStream;\n  exports.WritableStreamDefaultController = WritableStreamDefaultController;\n  exports.WritableStreamDefaultWriter = WritableStreamDefaultWriter;\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n});","map":{"version":3,"mappings":"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","names":["SymbolPolyfill","Symbol","iterator","description","noop","undefined","getGlobals","self","window","global","globals","typeIsObject","x","rethrowAssertionErrorRejection","originalPromise","Promise","originalPromiseThen","prototype","then","originalPromiseResolve","resolve","bind","originalPromiseReject","reject","newPromise","executor","promiseResolvedWith","value","promiseRejectedWith","reason","PerformPromiseThen","promise","onFulfilled","onRejected","call","uponPromise","uponFulfillment","uponRejection","transformPromiseWith","fulfillmentHandler","rejectionHandler","setPromiseIsHandledToTrue","queueMicrotask","globalQueueMicrotask","resolvedPromise","fn","reflectCall","F","V","args","TypeError","Function","apply","promiseCall","QUEUE_MAX_ARRAY_SIZE","_front","_elements","_next","_back","_cursor","_size","Object","SimpleQueue","element","oldBack","newBack","length","push","oldFront","newFront","oldCursor","newCursor","elements","callback","i","node","front","cursor","ReadableStreamReaderGenericInitialize","reader","stream","_ownerReadableStream","_reader","_state","defaultReaderClosedPromiseInitialize","defaultReaderClosedPromiseInitializeAsResolved","defaultReaderClosedPromiseInitializeAsRejected","_storedError","ReadableStreamReaderGenericCancel","ReadableStreamCancel","ReadableStreamReaderGenericRelease","defaultReaderClosedPromiseReject","defaultReaderClosedPromiseResetToRejected","readerLockException","name","_closedPromise","_closedPromise_resolve","_closedPromise_reject","defaultReaderClosedPromiseResolve","AbortSteps","ErrorSteps","CancelSteps","PullSteps","NumberIsFinite","Number","isFinite","MathTrunc","Math","trunc","v","ceil","floor","isDictionary","assertDictionary","obj","context","assertFunction","isObject","assertObject","assertRequiredArgument","position","assertRequiredField","field","convertUnrestrictedDouble","censorNegativeZero","integerPart","convertUnsignedLongLongWithEnforceRange","lowerBound","upperBound","MAX_SAFE_INTEGER","assertReadableStream","IsReadableStream","AcquireReadableStreamDefaultReader","ReadableStreamDefaultReader","ReadableStreamAddReadRequest","readRequest","_readRequests","ReadableStreamFulfillReadRequest","chunk","done","shift","_closeSteps","_chunkSteps","ReadableStreamGetNumReadRequests","ReadableStreamHasDefaultReader","IsReadableStreamDefaultReader","IsReadableStreamLocked","defaultReaderBrandCheckException","resolvePromise","rejectPromise","_errorSteps","e","ReadableStreamDefaultReaderRead","defineProperties","cancel","enumerable","read","releaseLock","closed","toStringTag","defineProperty","configurable","hasOwnProperty","_disturbed","_readableStreamController","AsyncIteratorPrototype","asyncIterator","_a","preventCancel","_preventCancel","ReadableStreamAsyncIteratorImpl","nextSteps","_nextSteps","_ongoingPromise","returnSteps","_returnSteps","_isFinished","_this","result","ReadableStreamAsyncIteratorPrototype","next","IsReadableStreamAsyncIterator","streamAsyncIteratorBrandCheckException","_asyncIteratorImpl","return","setPrototypeOf","AcquireReadableStreamAsyncIterator","impl","create","NumberIsNaN","isNaN","CreateArrayFromList","slice","CopyDataBlockBytes","dest","destOffset","src","srcOffset","n","Uint8Array","set","TransferArrayBuffer","O","IsDetachedBuffer","ArrayBufferSlice","buffer","begin","end","ArrayBuffer","IsNonNegativeNumber","CloneAsUint8Array","byteOffset","byteLength","DequeueValue","container","pair","_queue","_queueTotalSize","size","EnqueueValueWithSize","Infinity","RangeError","PeekQueueValue","peek","ResetQueue","ReadableStreamBYOBRequest","IsReadableStreamBYOBRequest","byobRequestBrandCheckException","_view","bytesWritten","_associatedReadableByteStreamController","ReadableByteStreamControllerRespond","view","isView","ReadableByteStreamControllerRespondWithNewView","respond","respondWithNewView","ReadableByteStreamController","IsReadableByteStreamController","byteStreamControllerBrandCheckException","ReadableByteStreamControllerGetBYOBRequest","ReadableByteStreamControllerGetDesiredSize","_closeRequested","state","_controlledReadableByteStream","ReadableByteStreamControllerClose","ReadableByteStreamControllerEnqueue","ReadableByteStreamControllerError","ReadableByteStreamControllerClearPendingPullIntos","_cancelAlgorithm","ReadableByteStreamControllerClearAlgorithms","entry","ReadableByteStreamControllerHandleQueueDrain","autoAllocateChunkSize","_autoAllocateChunkSize","bufferE","pullIntoDescriptor","bufferByteLength","bytesFilled","elementSize","viewConstructor","readerType","_pendingPullIntos","ReadableByteStreamControllerCallPullIfNeeded","close","enqueue","error","byobRequest","desiredSize","controller","shouldPull","ReadableByteStreamControllerShouldCallPull","_pulling","_pullAgain","pullPromise","_pullAlgorithm","ReadableByteStreamControllerInvalidateBYOBRequest","ReadableByteStreamControllerCommitPullIntoDescriptor","filledView","ReadableByteStreamControllerConvertPullIntoDescriptor","ReadableStreamFulfillReadIntoRequest","ReadableByteStreamControllerEnqueueChunkToQueue","ReadableByteStreamControllerFillPullIntoDescriptorFromQueue","currentAlignedBytes","maxBytesToCopy","min","maxBytesFilled","maxAlignedBytes","totalBytesToCopyRemaining","ready","queue","headOfQueue","bytesToCopy","destStart","ReadableByteStreamControllerFillHeadPullIntoDescriptor","ReadableStreamClose","_byobRequest","ReadableByteStreamControllerProcessPullIntoDescriptorsUsingQueue","ReadableByteStreamControllerShiftPendingPullInto","ReadableByteStreamControllerPullInto","readIntoRequest","constructor","DataView","BYTES_PER_ELEMENT","ctor","ReadableStreamAddReadIntoRequest","emptyView","ReadableByteStreamControllerRespondInClosedState","firstDescriptor","ReadableStreamHasBYOBReader","ReadableStreamGetNumReadIntoRequests","ReadableByteStreamControllerRespondInReadableState","remainderSize","remainder","ReadableByteStreamControllerRespondInternal","descriptor","_started","firstPendingPullInto","transferredBuffer","transferredView","ReadableStreamError","SetUpReadableStreamBYOBRequest","_strategyHWM","viewByteLength","SetUpReadableByteStreamController","startAlgorithm","pullAlgorithm","cancelAlgorithm","highWaterMark","startResult","r","SetUpReadableByteStreamControllerFromUnderlyingSource","underlyingByteSource","start","pull","request","AcquireReadableStreamBYOBReader","ReadableStreamBYOBReader","_readIntoRequests","IsReadableStreamBYOBReader","byobReaderBrandCheckException","ReadableStreamBYOBReaderRead","ExtractHighWaterMark","strategy","defaultHWM","ExtractSizeAlgorithm","convertQueuingStrategy","init","convertQueuingStrategySize","convertUnderlyingSink","original","abort","type","write","convertUnderlyingSinkAbortCallback","convertUnderlyingSinkCloseCallback","convertUnderlyingSinkStartCallback","convertUnderlyingSinkWriteCallback","assertWritableStream","IsWritableStream","isAbortSignal","aborted","supportsAbortController","AbortController","createAbortController","rawUnderlyingSink","rawStrategy","underlyingSink","InitializeWritableStream","sizeAlgorithm","SetUpWritableStreamDefaultControllerFromUnderlyingSink","WritableStream","streamBrandCheckException","IsWritableStreamLocked","WritableStreamAbort","WritableStreamCloseQueuedOrInFlight","WritableStreamClose","AcquireWritableStreamDefaultWriter","getWriter","locked","WritableStreamDefaultWriter","CreateWritableStream","writeAlgorithm","closeAlgorithm","abortAlgorithm","WritableStreamDefaultController","SetUpWritableStreamDefaultController","_writer","_writableStreamController","_writeRequests","_inFlightWriteRequest","_closeRequest","_inFlightCloseRequest","_pendingAbortRequest","_backpressure","_abortReason","_abortController","_promise","wasAlreadyErroring","_resolve","_reject","_reason","_wasAlreadyErroring","WritableStreamStartErroring","closeRequest","writer","defaultWriterReadyPromiseResolve","WritableStreamDefaultControllerClose","WritableStreamAddWriteRequest","writeRequest","WritableStreamDealWithRejection","WritableStreamFinishErroring","WritableStreamDefaultWriterEnsureReadyPromiseRejected","WritableStreamHasOperationMarkedInFlight","storedError","forEach","WritableStreamRejectCloseAndClosedPromiseIfNeeded","abortRequest","WritableStreamFinishInFlightWrite","WritableStreamFinishInFlightWriteWithError","WritableStreamFinishInFlightClose","defaultWriterClosedPromiseResolve","WritableStreamFinishInFlightCloseWithError","WritableStreamMarkCloseRequestInFlight","WritableStreamMarkFirstWriteRequestInFlight","defaultWriterClosedPromiseReject","WritableStreamUpdateBackpressure","backpressure","defaultWriterReadyPromiseReset","_ownerWritableStream","defaultWriterReadyPromiseInitialize","defaultWriterReadyPromiseInitializeAsResolved","defaultWriterClosedPromiseInitialize","defaultWriterReadyPromiseInitializeAsRejected","defaultWriterClosedPromiseInitializeAsResolved","defaultWriterClosedPromiseInitializeAsRejected","IsWritableStreamDefaultWriter","defaultWriterBrandCheckException","defaultWriterLockException","WritableStreamDefaultWriterGetDesiredSize","_readyPromise","WritableStreamDefaultWriterAbort","WritableStreamDefaultWriterClose","WritableStreamDefaultWriterRelease","WritableStreamDefaultWriterWrite","WritableStreamDefaultWriterCloseWithErrorPropagation","WritableStreamDefaultWriterEnsureClosedPromiseRejected","_closedPromiseState","defaultWriterClosedPromiseResetToRejected","_readyPromiseState","defaultWriterReadyPromiseReject","defaultWriterReadyPromiseResetToRejected","WritableStreamDefaultControllerGetDesiredSize","releasedError","chunkSize","WritableStreamDefaultControllerGetChunkSize","WritableStreamDefaultControllerWrite","closeSentinel","IsWritableStreamDefaultController","defaultControllerBrandCheckException","signal","_controlledWritableStream","WritableStreamDefaultControllerError","_abortAlgorithm","WritableStreamDefaultControllerClearAlgorithms","abortReason","_strategySizeAlgorithm","_writeAlgorithm","_closeAlgorithm","WritableStreamDefaultControllerGetBackpressure","startPromise","WritableStreamDefaultControllerAdvanceQueueIfNeeded","chunkSizeE","WritableStreamDefaultControllerErrorIfNeeded","enqueueE","WritableStreamDefaultControllerProcessClose","WritableStreamDefaultControllerProcessWrite","sinkClosePromise","sinkWritePromise","_readyPromise_resolve","_readyPromise_reject","NativeDOMException","DOMException","isDOMExceptionConstructor","createDOMExceptionPolyfill","message","Error","captureStackTrace","writable","ReadableStreamPipeTo","source","preventClose","preventAbort","shuttingDown","currentWrite","actions","shutdownWithAction","all","map","addEventListener","pipeLoop","resolveLoop","rejectLoop","pipeStep","resolveRead","rejectRead","isOrBecomesErrored","shutdown","isOrBecomesClosed","destClosed_1","waitForWritesToFinish","oldCurrentWrite","action","originalIsError","originalError","doTheRest","newError","isError","finalize","removeEventListener","ReadableStreamDefaultController","IsReadableStreamDefaultController","ReadableStreamDefaultControllerGetDesiredSize","ReadableStreamDefaultControllerCanCloseOrEnqueue","ReadableStreamDefaultControllerClose","ReadableStreamDefaultControllerEnqueue","ReadableStreamDefaultControllerError","ReadableStreamDefaultControllerClearAlgorithms","_controlledReadableStream","ReadableStreamDefaultControllerCallPullIfNeeded","ReadableStreamDefaultControllerShouldCallPull","ReadableStreamDefaultControllerHasBackpressure","SetUpReadableStreamDefaultController","SetUpReadableStreamDefaultControllerFromUnderlyingSource","underlyingSource","ReadableStreamTee","cloneForBranch2","ReadableByteStreamTee","ReadableStreamDefaultTee","reading","readAgain","canceled1","canceled2","reason1","reason2","branch1","branch2","resolveCancelPromise","cancelPromise","chunk1","chunk2","cancel1Algorithm","compositeReason","cancelResult","cancel2Algorithm","CreateReadableStream","readAgainForBranch1","readAgainForBranch2","forwardReaderError","thisReader","pullWithDefaultReader","cloneE","pull1Algorithm","pull2Algorithm","pullWithBYOBReader","forBranch2","byobBranch","otherBranch","byobCanceled","otherCanceled","clonedChunk","CreateReadableByteStream","convertUnderlyingDefaultOrByteSource","convertUnderlyingSourceCancelCallback","convertUnderlyingSourcePullCallback","convertUnderlyingSourceStartCallback","convertReadableStreamType","convertReaderOptions","options","mode","convertReadableStreamReaderMode","convertIteratorOptions","Boolean","convertPipeOptions","assertAbortSignal","convertReadableWritablePair","readable","rawUnderlyingSource","InitializeReadableStream","ReadableStream","rawOptions","rawTransform","transform","destination","branches","getReader","pipeThrough","pipeTo","tee","values","sourceCancelPromise","convertQueuingStrategyInit","byteLengthSizeFunction","_byteLengthQueuingStrategyHighWaterMark","ByteLengthQueuingStrategy","IsByteLengthQueuingStrategy","byteLengthBrandCheckException","countSizeFunction","_countQueuingStrategyHighWaterMark","CountQueuingStrategy","IsCountQueuingStrategy","countBrandCheckException","convertTransformer","flush","readableType","writableType","convertTransformerFlushCallback","convertTransformerStartCallback","convertTransformerTransformCallback","rawTransformer","rawWritableStrategy","rawReadableStrategy","writableStrategy","readableStrategy","transformer","readableHighWaterMark","readableSizeAlgorithm","writableHighWaterMark","writableSizeAlgorithm","startPromise_resolve","InitializeTransformStream","SetUpTransformStreamDefaultControllerFromTransformer","_transformStreamController","TransformStream","IsTransformStream","_readable","_writable","TransformStreamDefaultSinkWriteAlgorithm","TransformStreamDefaultSinkAbortAlgorithm","TransformStreamDefaultSinkCloseAlgorithm","TransformStreamDefaultSourcePullAlgorithm","TransformStreamErrorWritableAndUnblockWrite","_backpressureChangePromise","_backpressureChangePromise_resolve","TransformStreamSetBackpressure","TransformStreamError","TransformStreamDefaultControllerClearAlgorithms","TransformStreamDefaultController","IsTransformStreamDefaultController","readableController","_controlledTransformStream","TransformStreamDefaultControllerEnqueue","TransformStreamDefaultControllerError","TransformStreamDefaultControllerTerminate","terminate","SetUpTransformStreamDefaultController","transformAlgorithm","flushAlgorithm","_transformAlgorithm","_flushAlgorithm","transformResultE","TransformStreamDefaultControllerPerformTransform","transformPromise","backpressureChangePromise","flushPromise"],"sources":["../src/stub/symbol.ts","../src/utils.ts","../src/lib/helpers/miscellaneous.ts","../src/lib/helpers/webidl.ts","../src/lib/simple-queue.ts","../src/lib/readable-stream/generic-reader.ts","../src/lib/abstract-ops/internal-methods.ts","../src/stub/number-isfinite.ts","../src/stub/math-trunc.ts","../src/lib/validators/basic.ts","../src/lib/validators/readable-stream.ts","../src/lib/readable-stream/default-reader.ts","../src/target/es5/stub/async-iterator-prototype.ts","../src/lib/readable-stream/async-iterator.ts","../src/stub/number-isnan.ts","../src/lib/abstract-ops/ecmascript.ts","../src/lib/abstract-ops/miscellaneous.ts","../src/lib/abstract-ops/queue-with-sizes.ts","../src/lib/readable-stream/byte-stream-controller.ts","../src/lib/readable-stream/byob-reader.ts","../src/lib/abstract-ops/queuing-strategy.ts","../src/lib/validators/queuing-strategy.ts","../src/lib/validators/underlying-sink.ts","../src/lib/validators/writable-stream.ts","../src/lib/abort-signal.ts","../src/lib/writable-stream.ts","../src/stub/native.ts","../src/stub/dom-exception.ts","../src/lib/readable-stream/pipe.ts","../src/lib/readable-stream/default-controller.ts","../src/lib/readable-stream/tee.ts","../src/lib/validators/underlying-source.ts","../src/lib/validators/reader-options.ts","../src/lib/validators/iterator-options.ts","../src/lib/validators/pipe-options.ts","../src/lib/validators/readable-writable-pair.ts","../src/lib/readable-stream.ts","../src/lib/validators/queuing-strategy-init.ts","../src/lib/byte-length-queuing-strategy.ts","../src/lib/count-queuing-strategy.ts","../src/lib/validators/transformer.ts","../src/lib/transform-stream.ts"],"sourcesContent":["/// <reference lib=\"es2015.symbol\" />\n\nconst SymbolPolyfill: (description?: string) => symbol =\n  typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol' ?\n    Symbol :\n    description => `Symbol(${description})` as any as symbol;\n\nexport default SymbolPolyfill;\n","/// <reference lib=\"dom\" />\n\nexport function noop(): undefined {\n  return undefined;\n}\n\nfunction getGlobals() {\n  if (typeof self !== 'undefined') {\n    return self;\n  } else if (typeof window !== 'undefined') {\n    return window;\n  } else if (typeof global !== 'undefined') {\n    return global;\n  }\n  return undefined;\n}\n\nexport const globals = getGlobals();\n","import { noop } from '../../utils';\nimport { AssertionError } from '../../stub/assert';\n\nexport function typeIsObject(x: any): x is object {\n  return (typeof x === 'object' && x !== null) || typeof x === 'function';\n}\n\nexport const rethrowAssertionErrorRejection: (e: any) => void =\n  DEBUG ? e => {\n    // Used throughout the reference implementation, as `.catch(rethrowAssertionErrorRejection)`, to ensure any errors\n    // get shown. There are places in the spec where we do promise transformations and purposefully ignore or don't\n    // expect any errors, but assertion errors are always problematic.\n    if (e && e instanceof AssertionError) {\n      setTimeout(() => {\n        throw e;\n      }, 0);\n    }\n  } : noop;\n","import { globals } from '../../utils';\nimport { rethrowAssertionErrorRejection } from './miscellaneous';\nimport assert from '../../stub/assert';\n\nconst originalPromise = Promise;\nconst originalPromiseThen = Promise.prototype.then;\nconst originalPromiseResolve = Promise.resolve.bind(originalPromise);\nconst originalPromiseReject = Promise.reject.bind(originalPromise);\n\nexport function newPromise<T>(executor: (\n  resolve: (value: T | PromiseLike<T>) => void,\n  reject: (reason?: any) => void\n) => void): Promise<T> {\n  return new originalPromise(executor);\n}\n\nexport function promiseResolvedWith<T>(value: T | PromiseLike<T>): Promise<T> {\n  return originalPromiseResolve(value);\n}\n\nexport function promiseRejectedWith<T = never>(reason: any): Promise<T> {\n  return originalPromiseReject(reason);\n}\n\nexport function PerformPromiseThen<T, TResult1 = T, TResult2 = never>(\n  promise: Promise<T>,\n  onFulfilled?: (value: T) => TResult1 | PromiseLike<TResult1>,\n  onRejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2> {\n  // There doesn't appear to be any way to correctly emulate the behaviour from JavaScript, so this is just an\n  // approximation.\n  return originalPromiseThen.call(promise, onFulfilled, onRejected) as Promise<TResult1 | TResult2>;\n}\n\nexport function uponPromise<T>(\n  promise: Promise<T>,\n  onFulfilled?: (value: T) => void | PromiseLike<void>,\n  onRejected?: (reason: any) => void | PromiseLike<void>): void {\n  PerformPromiseThen(\n    PerformPromiseThen(promise, onFulfilled, onRejected),\n    undefined,\n    rethrowAssertionErrorRejection\n  );\n}\n\nexport function uponFulfillment<T>(promise: Promise<T>, onFulfilled: (value: T) => void | PromiseLike<void>): void {\n  uponPromise(promise, onFulfilled);\n}\n\nexport function uponRejection(promise: Promise<unknown>, onRejected: (reason: any) => void | PromiseLike<void>): void {\n  uponPromise(promise, undefined, onRejected);\n}\n\nexport function transformPromiseWith<T, TResult1 = T, TResult2 = never>(\n  promise: Promise<T>,\n  fulfillmentHandler?: (value: T) => TResult1 | PromiseLike<TResult1>,\n  rejectionHandler?: (reason: any) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2> {\n  return PerformPromiseThen(promise, fulfillmentHandler, rejectionHandler);\n}\n\nexport function setPromiseIsHandledToTrue(promise: Promise<unknown>): void {\n  PerformPromiseThen(promise, undefined, rethrowAssertionErrorRejection);\n}\n\nexport const queueMicrotask: (fn: () => void) => void = (() => {\n  const globalQueueMicrotask = globals && globals.queueMicrotask;\n  if (typeof globalQueueMicrotask === 'function') {\n    return globalQueueMicrotask;\n  }\n\n  const resolvedPromise = promiseResolvedWith(undefined);\n  return (fn: () => void) => PerformPromiseThen(resolvedPromise, fn);\n})();\n\nexport function reflectCall<T, A extends any[], R>(F: (this: T, ...fnArgs: A) => R, V: T, args: A): R {\n  if (typeof F !== 'function') {\n    throw new TypeError('Argument is not a function');\n  }\n  return Function.prototype.apply.call(F, V, args);\n}\n\nexport function promiseCall<T, A extends any[], R>(F: (this: T, ...fnArgs: A) => R | PromiseLike<R>,\n                                                   V: T,\n                                                   args: A): Promise<R> {\n  assert(typeof F === 'function');\n  assert(V !== undefined);\n  assert(Array.isArray(args));\n  try {\n    return promiseResolvedWith(reflectCall(F, V, args));\n  } catch (value) {\n    return promiseRejectedWith(value);\n  }\n}\n","import assert from '../stub/assert';\n\n// Original from Chromium\n// https://chromium.googlesource.com/chromium/src/+/0aee4434a4dba42a42abaea9bfbc0cd196a63bc1/third_party/blink/renderer/core/streams/SimpleQueue.js\n\nconst QUEUE_MAX_ARRAY_SIZE = 16384;\n\ninterface Node<T> {\n  _elements: T[];\n  _next: Node<T> | undefined;\n}\n\n/**\n * Simple queue structure.\n *\n * Avoids scalability issues with using a packed array directly by using\n * multiple arrays in a linked list and keeping the array size bounded.\n */\nexport class SimpleQueue<T> {\n  private _front: Node<T>;\n  private _back: Node<T>;\n  private _cursor = 0;\n  private _size = 0;\n\n  constructor() {\n    // _front and _back are always defined.\n    this._front = {\n      _elements: [],\n      _next: undefined\n    };\n    this._back = this._front;\n    // The cursor is used to avoid calling Array.shift().\n    // It contains the index of the front element of the array inside the\n    // front-most node. It is always in the range [0, QUEUE_MAX_ARRAY_SIZE).\n    this._cursor = 0;\n    // When there is only one node, size === elements.length - cursor.\n    this._size = 0;\n  }\n\n  get length(): number {\n    return this._size;\n  }\n\n  // For exception safety, this method is structured in order:\n  // 1. Read state\n  // 2. Calculate required state mutations\n  // 3. Perform state mutations\n  push(element: T): void {\n    const oldBack = this._back;\n    let newBack = oldBack;\n    assert(oldBack._next === undefined);\n    if (oldBack._elements.length === QUEUE_MAX_ARRAY_SIZE - 1) {\n      newBack = {\n        _elements: [],\n        _next: undefined\n      };\n    }\n\n    // push() is the mutation most likely to throw an exception, so it\n    // goes first.\n    oldBack._elements.push(element);\n    if (newBack !== oldBack) {\n      this._back = newBack;\n      oldBack._next = newBack;\n    }\n    ++this._size;\n  }\n\n  // Like push(), shift() follows the read -> calculate -> mutate pattern for\n  // exception safety.\n  shift(): T {\n    assert(this._size > 0); // must not be called on an empty queue\n\n    const oldFront = this._front;\n    let newFront = oldFront;\n    const oldCursor = this._cursor;\n    let newCursor = oldCursor + 1;\n\n    const elements = oldFront._elements;\n    const element = elements[oldCursor];\n\n    if (newCursor === QUEUE_MAX_ARRAY_SIZE) {\n      assert(elements.length === QUEUE_MAX_ARRAY_SIZE);\n      assert(oldFront._next !== undefined);\n      newFront = oldFront._next!;\n      newCursor = 0;\n    }\n\n    // No mutations before this point.\n    --this._size;\n    this._cursor = newCursor;\n    if (oldFront !== newFront) {\n      this._front = newFront;\n    }\n\n    // Permit shifted element to be garbage collected.\n    elements[oldCursor] = undefined!;\n\n    return element;\n  }\n\n  // The tricky thing about forEach() is that it can be called\n  // re-entrantly. The queue may be mutated inside the callback. It is easy to\n  // see that push() within the callback has no negative effects since the end\n  // of the queue is checked for on every iteration. If shift() is called\n  // repeatedly within the callback then the next iteration may return an\n  // element that has been removed. In this case the callback will be called\n  // with undefined values until we either \"catch up\" with elements that still\n  // exist or reach the back of the queue.\n  forEach(callback: (element: T) => void): void {\n    let i = this._cursor;\n    let node = this._front;\n    let elements = node._elements;\n    while (i !== elements.length || node._next !== undefined) {\n      if (i === elements.length) {\n        assert(node._next !== undefined);\n        assert(i === QUEUE_MAX_ARRAY_SIZE);\n        node = node._next!;\n        elements = node._elements;\n        i = 0;\n        if (elements.length === 0) {\n          break;\n        }\n      }\n      callback(elements[i]);\n      ++i;\n    }\n  }\n\n  // Return the element that would be returned if shift() was called now,\n  // without modifying the queue.\n  peek(): T {\n    assert(this._size > 0); // must not be called on an empty queue\n\n    const front = this._front;\n    const cursor = this._cursor;\n    return front._elements[cursor];\n  }\n}\n","import assert from '../../stub/assert';\nimport { ReadableStream, ReadableStreamCancel, ReadableStreamReader } from '../readable-stream';\nimport { newPromise, setPromiseIsHandledToTrue } from '../helpers/webidl';\n\nexport function ReadableStreamReaderGenericInitialize<R>(reader: ReadableStreamReader<R>, stream: ReadableStream<R>) {\n  reader._ownerReadableStream = stream;\n  stream._reader = reader;\n\n  if (stream._state === 'readable') {\n    defaultReaderClosedPromiseInitialize(reader);\n  } else if (stream._state === 'closed') {\n    defaultReaderClosedPromiseInitializeAsResolved(reader);\n  } else {\n    assert(stream._state === 'errored');\n\n    defaultReaderClosedPromiseInitializeAsRejected(reader, stream._storedError);\n  }\n}\n\n// A client of ReadableStreamDefaultReader and ReadableStreamBYOBReader may use these functions directly to bypass state\n// check.\n\nexport function ReadableStreamReaderGenericCancel(reader: ReadableStreamReader<any>, reason: any): Promise<undefined> {\n  const stream = reader._ownerReadableStream;\n  assert(stream !== undefined);\n  return ReadableStreamCancel(stream, reason);\n}\n\nexport function ReadableStreamReaderGenericRelease(reader: ReadableStreamReader<any>) {\n  assert(reader._ownerReadableStream !== undefined);\n  assert(reader._ownerReadableStream._reader === reader);\n\n  if (reader._ownerReadableStream._state === 'readable') {\n    defaultReaderClosedPromiseReject(\n      reader,\n      new TypeError(`Reader was released and can no longer be used to monitor the stream's closedness`));\n  } else {\n    defaultReaderClosedPromiseResetToRejected(\n      reader,\n      new TypeError(`Reader was released and can no longer be used to monitor the stream's closedness`));\n  }\n\n  reader._ownerReadableStream._reader = undefined;\n  reader._ownerReadableStream = undefined!;\n}\n\n// Helper functions for the readers.\n\nexport function readerLockException(name: string): TypeError {\n  return new TypeError('Cannot ' + name + ' a stream using a released reader');\n}\n\n// Helper functions for the ReadableStreamDefaultReader.\n\nexport function defaultReaderClosedPromiseInitialize(reader: ReadableStreamReader<any>) {\n  reader._closedPromise = newPromise((resolve, reject) => {\n    reader._closedPromise_resolve = resolve;\n    reader._closedPromise_reject = reject;\n  });\n}\n\nexport function defaultReaderClosedPromiseInitializeAsRejected(reader: ReadableStreamReader<any>, reason: any) {\n  defaultReaderClosedPromiseInitialize(reader);\n  defaultReaderClosedPromiseReject(reader, reason);\n}\n\nexport function defaultReaderClosedPromiseInitializeAsResolved(reader: ReadableStreamReader<any>) {\n  defaultReaderClosedPromiseInitialize(reader);\n  defaultReaderClosedPromiseResolve(reader);\n}\n\nexport function defaultReaderClosedPromiseReject(reader: ReadableStreamReader<any>, reason: any) {\n  if (reader._closedPromise_reject === undefined) {\n    return;\n  }\n\n  setPromiseIsHandledToTrue(reader._closedPromise);\n  reader._closedPromise_reject(reason);\n  reader._closedPromise_resolve = undefined;\n  reader._closedPromise_reject = undefined;\n}\n\nexport function defaultReaderClosedPromiseResetToRejected(reader: ReadableStreamReader<any>, reason: any) {\n  assert(reader._closedPromise_resolve === undefined);\n  assert(reader._closedPromise_reject === undefined);\n\n  defaultReaderClosedPromiseInitializeAsRejected(reader, reason);\n}\n\nexport function defaultReaderClosedPromiseResolve(reader: ReadableStreamReader<any>) {\n  if (reader._closedPromise_resolve === undefined) {\n    return;\n  }\n\n  reader._closedPromise_resolve(undefined);\n  reader._closedPromise_resolve = undefined;\n  reader._closedPromise_reject = undefined;\n}\n","export const AbortSteps = Symbol('[[AbortSteps]]');\nexport const ErrorSteps = Symbol('[[ErrorSteps]]');\nexport const CancelSteps = Symbol('[[CancelSteps]]');\nexport const PullSteps = Symbol('[[PullSteps]]');\n","/// <reference lib=\"es2015.core\" />\n\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isFinite#Polyfill\nconst NumberIsFinite: typeof Number.isFinite = Number.isFinite || function (x) {\n  return typeof x === 'number' && isFinite(x);\n};\n\nexport default NumberIsFinite;\n","/// <reference lib=\"es2015.core\" />\n\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/trunc#Polyfill\nconst MathTrunc: typeof Math.trunc = Math.trunc || function (v) {\n  return v < 0 ? Math.ceil(v) : Math.floor(v);\n};\n\nexport default MathTrunc;\n","import NumberIsFinite from '../../stub/number-isfinite';\nimport MathTrunc from '../../stub/math-trunc';\n\n// https://heycam.github.io/webidl/#idl-dictionaries\nexport function isDictionary(x: any): x is object | null {\n  return typeof x === 'object' || typeof x === 'function';\n}\n\nexport function assertDictionary(obj: unknown,\n                                 context: string): asserts obj is object | null | undefined {\n  if (obj !== undefined && !isDictionary(obj)) {\n    throw new TypeError(`${context} is not an object.`);\n  }\n}\n\nexport type AnyFunction = (...args: any[]) => any;\n\n// https://heycam.github.io/webidl/#idl-callback-functions\nexport function assertFunction(x: unknown, context: string): asserts x is AnyFunction {\n  if (typeof x !== 'function') {\n    throw new TypeError(`${context} is not a function.`);\n  }\n}\n\n// https://heycam.github.io/webidl/#idl-object\nexport function isObject(x: any): x is object {\n  return (typeof x === 'object' && x !== null) || typeof x === 'function';\n}\n\nexport function assertObject(x: unknown,\n                             context: string): asserts x is object {\n  if (!isObject(x)) {\n    throw new TypeError(`${context} is not an object.`);\n  }\n}\n\nexport function assertRequiredArgument<T extends any>(x: T | undefined,\n                                                      position: number,\n                                                      context: string): asserts x is T {\n  if (x === undefined) {\n    throw new TypeError(`Parameter ${position} is required in '${context}'.`);\n  }\n}\n\nexport function assertRequiredField<T extends any>(x: T | undefined,\n                                                   field: string,\n                                                   context: string): asserts x is T {\n  if (x === undefined) {\n    throw new TypeError(`${field} is required in '${context}'.`);\n  }\n}\n\n// https://heycam.github.io/webidl/#idl-unrestricted-double\nexport function convertUnrestrictedDouble(value: unknown): number {\n  return Number(value);\n}\n\nfunction censorNegativeZero(x: number): number {\n  return x === 0 ? 0 : x;\n}\n\nfunction integerPart(x: number): number {\n  return censorNegativeZero(MathTrunc(x));\n}\n\n// https://heycam.github.io/webidl/#idl-unsigned-long-long\nexport function convertUnsignedLongLongWithEnforceRange(value: unknown, context: string): number {\n  const lowerBound = 0;\n  const upperBound = Number.MAX_SAFE_INTEGER;\n\n  let x = Number(value);\n  x = censorNegativeZero(x);\n\n  if (!NumberIsFinite(x)) {\n    throw new TypeError(`${context} is not a finite number`);\n  }\n\n  x = integerPart(x);\n\n  if (x < lowerBound || x > upperBound) {\n    throw new TypeError(`${context} is outside the accepted range of ${lowerBound} to ${upperBound}, inclusive`);\n  }\n\n  if (!NumberIsFinite(x) || x === 0) {\n    return 0;\n  }\n\n  // TODO Use BigInt if supported?\n  // let xBigInt = BigInt(integerPart(x));\n  // xBigInt = BigInt.asUintN(64, xBigInt);\n  // return Number(xBigInt);\n\n  return x;\n}\n","import { IsReadableStream, ReadableStream } from '../readable-stream';\n\nexport function assertReadableStream(x: unknown, context: string): asserts x is ReadableStream {\n  if (!IsReadableStream(x)) {\n    throw new TypeError(`${context} is not a ReadableStream.`);\n  }\n}\n","import assert from '../../stub/assert';\nimport { SimpleQueue } from '../simple-queue';\nimport {\n  ReadableStreamReaderGenericCancel,\n  ReadableStreamReaderGenericInitialize,\n  ReadableStreamReaderGenericRelease,\n  readerLockException\n} from './generic-reader';\nimport { IsReadableStreamLocked, ReadableStream } from '../readable-stream';\nimport { typeIsObject } from '../helpers/miscellaneous';\nimport { PullSteps } from '../abstract-ops/internal-methods';\nimport { newPromise, promiseRejectedWith } from '../helpers/webidl';\nimport { assertRequiredArgument } from '../validators/basic';\nimport { assertReadableStream } from '../validators/readable-stream';\n\n/**\n * A result returned by {@link ReadableStreamDefaultReader.read}.\n *\n * @public\n */\nexport type ReadableStreamDefaultReadResult<T> = {\n  done: false;\n  value: T;\n} | {\n  done: true;\n  value?: undefined;\n}\n\n// Abstract operations for the ReadableStream.\n\nexport function AcquireReadableStreamDefaultReader<R>(stream: ReadableStream): ReadableStreamDefaultReader<R> {\n  return new ReadableStreamDefaultReader(stream);\n}\n\n// ReadableStream API exposed for controllers.\n\nexport function ReadableStreamAddReadRequest<R>(stream: ReadableStream<R>,\n                                                readRequest: ReadRequest<R>): void {\n  assert(IsReadableStreamDefaultReader(stream._reader));\n  assert(stream._state === 'readable');\n\n  (stream._reader! as ReadableStreamDefaultReader<R>)._readRequests.push(readRequest);\n}\n\nexport function ReadableStreamFulfillReadRequest<R>(stream: ReadableStream<R>, chunk: R | undefined, done: boolean) {\n  const reader = stream._reader as ReadableStreamDefaultReader<R>;\n\n  assert(reader._readRequests.length > 0);\n\n  const readRequest = reader._readRequests.shift()!;\n  if (done) {\n    readRequest._closeSteps();\n  } else {\n    readRequest._chunkSteps(chunk!);\n  }\n}\n\nexport function ReadableStreamGetNumReadRequests<R>(stream: ReadableStream<R>): number {\n  return (stream._reader as ReadableStreamDefaultReader<R>)._readRequests.length;\n}\n\nexport function ReadableStreamHasDefaultReader(stream: ReadableStream): boolean {\n  const reader = stream._reader;\n\n  if (reader === undefined) {\n    return false;\n  }\n\n  if (!IsReadableStreamDefaultReader(reader)) {\n    return false;\n  }\n\n  return true;\n}\n\n// Readers\n\nexport interface ReadRequest<R> {\n  _chunkSteps(chunk: R): void;\n\n  _closeSteps(): void;\n\n  _errorSteps(e: any): void;\n}\n\n/**\n * A default reader vended by a {@link ReadableStream}.\n *\n * @public\n */\nexport class ReadableStreamDefaultReader<R = any> {\n  /** @internal */\n  _ownerReadableStream!: ReadableStream<R>;\n  /** @internal */\n  _closedPromise!: Promise<undefined>;\n  /** @internal */\n  _closedPromise_resolve?: (value?: undefined) => void;\n  /** @internal */\n  _closedPromise_reject?: (reason: any) => void;\n  /** @internal */\n  _readRequests: SimpleQueue<ReadRequest<R>>;\n\n  constructor(stream: ReadableStream<R>) {\n    assertRequiredArgument(stream, 1, 'ReadableStreamDefaultReader');\n    assertReadableStream(stream, 'First parameter');\n\n    if (IsReadableStreamLocked(stream)) {\n      throw new TypeError('This stream has already been locked for exclusive reading by another reader');\n    }\n\n    ReadableStreamReaderGenericInitialize(this, stream);\n\n    this._readRequests = new SimpleQueue();\n  }\n\n  /**\n   * Returns a promise that will be fulfilled when the stream becomes closed,\n   * or rejected if the stream ever errors or the reader's lock is released before the stream finishes closing.\n   */\n  get closed(): Promise<undefined> {\n    if (!IsReadableStreamDefaultReader(this)) {\n      return promiseRejectedWith(defaultReaderBrandCheckException('closed'));\n    }\n\n    return this._closedPromise;\n  }\n\n  /**\n   * If the reader is active, behaves the same as {@link ReadableStream.cancel | stream.cancel(reason)}.\n   */\n  cancel(reason: any = undefined): Promise<void> {\n    if (!IsReadableStreamDefaultReader(this)) {\n      return promiseRejectedWith(defaultReaderBrandCheckException('cancel'));\n    }\n\n    if (this._ownerReadableStream === undefined) {\n      return promiseRejectedWith(readerLockException('cancel'));\n    }\n\n    return ReadableStreamReaderGenericCancel(this, reason);\n  }\n\n  /**\n   * Returns a promise that allows access to the next chunk from the stream's internal queue, if available.\n   *\n   * If reading a chunk causes the queue to become empty, more data will be pulled from the underlying source.\n   */\n  read(): Promise<ReadableStreamDefaultReadResult<R>> {\n    if (!IsReadableStreamDefaultReader(this)) {\n      return promiseRejectedWith(defaultReaderBrandCheckException('read'));\n    }\n\n    if (this._ownerReadableStream === undefined) {\n      return promiseRejectedWith(readerLockException('read from'));\n    }\n\n    let resolvePromise!: (result: ReadableStreamDefaultReadResult<R>) => void;\n    let rejectPromise!: (reason: any) => void;\n    const promise = newPromise<ReadableStreamDefaultReadResult<R>>((resolve, reject) => {\n      resolvePromise = resolve;\n      rejectPromise = reject;\n    });\n    const readRequest: ReadRequest<R> = {\n      _chunkSteps: chunk => resolvePromise({ value: chunk, done: false }),\n      _closeSteps: () => resolvePromise({ value: undefined, done: true }),\n      _errorSteps: e => rejectPromise(e)\n    };\n    ReadableStreamDefaultReaderRead(this, readRequest);\n    return promise;\n  }\n\n  /**\n   * Releases the reader's lock on the corresponding stream. After the lock is released, the reader is no longer active.\n   * If the associated stream is errored when the lock is released, the reader will appear errored in the same way\n   * from now on; otherwise, the reader will appear closed.\n   *\n   * A reader's lock cannot be released while it still has a pending read request, i.e., if a promise returned by\n   * the reader's {@link ReadableStreamDefaultReader.read | read()} method has not yet been settled. Attempting to\n   * do so will throw a `TypeError` and leave the reader locked to the stream.\n   */\n  releaseLock(): void {\n    if (!IsReadableStreamDefaultReader(this)) {\n      throw defaultReaderBrandCheckException('releaseLock');\n    }\n\n    if (this._ownerReadableStream === undefined) {\n      return;\n    }\n\n    if (this._readRequests.length > 0) {\n      throw new TypeError('Tried to release a reader lock when that reader has pending read() calls un-settled');\n    }\n\n    ReadableStreamReaderGenericRelease(this);\n  }\n}\n\nObject.defineProperties(ReadableStreamDefaultReader.prototype, {\n  cancel: { enumerable: true },\n  read: { enumerable: true },\n  releaseLock: { enumerable: true },\n  closed: { enumerable: true }\n});\nif (typeof Symbol.toStringTag === 'symbol') {\n  Object.defineProperty(ReadableStreamDefaultReader.prototype, Symbol.toStringTag, {\n    value: 'ReadableStreamDefaultReader',\n    configurable: true\n  });\n}\n\n// Abstract operations for the readers.\n\nexport function IsReadableStreamDefaultReader<R = any>(x: any): x is ReadableStreamDefaultReader<R> {\n  if (!typeIsObject(x)) {\n    return false;\n  }\n\n  if (!Object.prototype.hasOwnProperty.call(x, '_readRequests')) {\n    return false;\n  }\n\n  return x instanceof ReadableStreamDefaultReader;\n}\n\nexport function ReadableStreamDefaultReaderRead<R>(reader: ReadableStreamDefaultReader<R>,\n                                                   readRequest: ReadRequest<R>): void {\n  const stream = reader._ownerReadableStream;\n\n  assert(stream !== undefined);\n\n  stream._disturbed = true;\n\n  if (stream._state === 'closed') {\n    readRequest._closeSteps();\n  } else if (stream._state === 'errored') {\n    readRequest._errorSteps(stream._storedError);\n  } else {\n    assert(stream._state === 'readable');\n    stream._readableStreamController[PullSteps](readRequest as ReadRequest<any>);\n  }\n}\n\n// Helper functions for the ReadableStreamDefaultReader.\n\nfunction defaultReaderBrandCheckException(name: string): TypeError {\n  return new TypeError(\n    `ReadableStreamDefaultReader.prototype.${name} can only be used on a ReadableStreamDefaultReader`);\n}\n","/// <reference lib=\"es2018.asynciterable\" />\n\nexport let AsyncIteratorPrototype: AsyncIterable<any> | undefined;\n\nif (typeof Symbol.asyncIterator === 'symbol') {\n  // We're running inside a ES2018+ environment, but we're compiling to an older syntax.\n  // We cannot access %AsyncIteratorPrototype% without non-ES2018 syntax, but we can re-create it.\n  AsyncIteratorPrototype = {\n    // 25.1.3.1 %AsyncIteratorPrototype% [ @@asyncIterator ] ( )\n    // https://tc39.github.io/ecma262/#sec-asynciteratorprototype-asynciterator\n    [Symbol.asyncIterator](this: AsyncIterator<any>) {\n      return this;\n    }\n  };\n  Object.defineProperty(AsyncIteratorPrototype, Symbol.asyncIterator, { enumerable: false });\n}\n","/// <reference lib=\"es2018.asynciterable\" />\n\nimport { ReadableStream } from '../readable-stream';\nimport {\n  AcquireReadableStreamDefaultReader,\n  ReadableStreamDefaultReader,\n  ReadableStreamDefaultReaderRead,\n  ReadableStreamDefaultReadResult,\n  ReadRequest\n} from './default-reader';\nimport {\n  ReadableStreamReaderGenericCancel,\n  ReadableStreamReaderGenericRelease,\n  readerLockException\n} from './generic-reader';\nimport assert from '../../stub/assert';\nimport { AsyncIteratorPrototype } from '@@target/stub/async-iterator-prototype';\nimport { typeIsObject } from '../helpers/miscellaneous';\nimport {\n  newPromise,\n  promiseRejectedWith,\n  promiseResolvedWith,\n  queueMicrotask,\n  transformPromiseWith\n} from '../helpers/webidl';\n\n/**\n * An async iterator returned by {@link ReadableStream.values}.\n *\n * @public\n */\nexport interface ReadableStreamAsyncIterator<R> extends AsyncIterator<R> {\n  next(): Promise<IteratorResult<R, undefined>>;\n\n  return(value?: any): Promise<IteratorResult<any>>;\n}\n\nexport class ReadableStreamAsyncIteratorImpl<R> {\n  private readonly _reader: ReadableStreamDefaultReader<R>;\n  private readonly _preventCancel: boolean;\n  private _ongoingPromise: Promise<ReadableStreamDefaultReadResult<R>> | undefined = undefined;\n  private _isFinished = false;\n\n  constructor(reader: ReadableStreamDefaultReader<R>, preventCancel: boolean) {\n    this._reader = reader;\n    this._preventCancel = preventCancel;\n  }\n\n  next(): Promise<ReadableStreamDefaultReadResult<R>> {\n    const nextSteps = () => this._nextSteps();\n    this._ongoingPromise = this._ongoingPromise ?\n      transformPromiseWith(this._ongoingPromise, nextSteps, nextSteps) :\n      nextSteps();\n    return this._ongoingPromise;\n  }\n\n  return(value: any): Promise<ReadableStreamDefaultReadResult<any>> {\n    const returnSteps = () => this._returnSteps(value);\n    return this._ongoingPromise ?\n      transformPromiseWith(this._ongoingPromise, returnSteps, returnSteps) :\n      returnSteps();\n  }\n\n  private _nextSteps(): Promise<ReadableStreamDefaultReadResult<R>> {\n    if (this._isFinished) {\n      return Promise.resolve({ value: undefined, done: true });\n    }\n\n    const reader = this._reader;\n    if (reader._ownerReadableStream === undefined) {\n      return promiseRejectedWith(readerLockException('iterate'));\n    }\n\n    let resolvePromise!: (result: ReadableStreamDefaultReadResult<R>) => void;\n    let rejectPromise!: (reason: any) => void;\n    const promise = newPromise<ReadableStreamDefaultReadResult<R>>((resolve, reject) => {\n      resolvePromise = resolve;\n      rejectPromise = reject;\n    });\n    const readRequest: ReadRequest<R> = {\n      _chunkSteps: chunk => {\n        this._ongoingPromise = undefined;\n        // This needs to be delayed by one microtask, otherwise we stop pulling too early which breaks a test.\n        // FIXME Is this a bug in the specification, or in the test?\n        queueMicrotask(() => resolvePromise({ value: chunk, done: false }));\n      },\n      _closeSteps: () => {\n        this._ongoingPromise = undefined;\n        this._isFinished = true;\n        ReadableStreamReaderGenericRelease(reader);\n        resolvePromise({ value: undefined, done: true });\n      },\n      _errorSteps: reason => {\n        this._ongoingPromise = undefined;\n        this._isFinished = true;\n        ReadableStreamReaderGenericRelease(reader);\n        rejectPromise(reason);\n      }\n    };\n    ReadableStreamDefaultReaderRead(reader, readRequest);\n    return promise;\n  }\n\n  private _returnSteps(value: any): Promise<ReadableStreamDefaultReadResult<any>> {\n    if (this._isFinished) {\n      return Promise.resolve({ value, done: true });\n    }\n    this._isFinished = true;\n\n    const reader = this._reader;\n    if (reader._ownerReadableStream === undefined) {\n      return promiseRejectedWith(readerLockException('finish iterating'));\n    }\n\n    assert(reader._readRequests.length === 0);\n\n    if (!this._preventCancel) {\n      const result = ReadableStreamReaderGenericCancel(reader, value);\n      ReadableStreamReaderGenericRelease(reader);\n      return transformPromiseWith(result, () => ({ value, done: true }));\n    }\n\n    ReadableStreamReaderGenericRelease(reader);\n    return promiseResolvedWith({ value, done: true });\n  }\n}\n\ndeclare class ReadableStreamAsyncIteratorInstance<R> implements ReadableStreamAsyncIterator<R> {\n  /** @interal */\n  _asyncIteratorImpl: ReadableStreamAsyncIteratorImpl<R>;\n\n  next(): Promise<IteratorResult<R, undefined>>;\n\n  return(value?: any): Promise<IteratorResult<any>>;\n}\n\nconst ReadableStreamAsyncIteratorPrototype: ReadableStreamAsyncIteratorInstance<any> = {\n  next(this: ReadableStreamAsyncIteratorInstance<any>): Promise<ReadableStreamDefaultReadResult<any>> {\n    if (!IsReadableStreamAsyncIterator(this)) {\n      return promiseRejectedWith(streamAsyncIteratorBrandCheckException('next'));\n    }\n    return this._asyncIteratorImpl.next();\n  },\n\n  return(this: ReadableStreamAsyncIteratorInstance<any>, value: any): Promise<ReadableStreamDefaultReadResult<any>> {\n    if (!IsReadableStreamAsyncIterator(this)) {\n      return promiseRejectedWith(streamAsyncIteratorBrandCheckException('return'));\n    }\n    return this._asyncIteratorImpl.return(value);\n  }\n} as any;\nif (AsyncIteratorPrototype !== undefined) {\n  Object.setPrototypeOf(ReadableStreamAsyncIteratorPrototype, AsyncIteratorPrototype);\n}\n\n// Abstract operations for the ReadableStream.\n\nexport function AcquireReadableStreamAsyncIterator<R>(stream: ReadableStream<R>,\n                                                      preventCancel: boolean): ReadableStreamAsyncIterator<R> {\n  const reader = AcquireReadableStreamDefaultReader<R>(stream);\n  const impl = new ReadableStreamAsyncIteratorImpl(reader, preventCancel);\n  const iterator: ReadableStreamAsyncIteratorInstance<R> = Object.create(ReadableStreamAsyncIteratorPrototype);\n  iterator._asyncIteratorImpl = impl;\n  return iterator;\n}\n\nfunction IsReadableStreamAsyncIterator<R = any>(x: any): x is ReadableStreamAsyncIterator<R> {\n  if (!typeIsObject(x)) {\n    return false;\n  }\n\n  if (!Object.prototype.hasOwnProperty.call(x, '_asyncIteratorImpl')) {\n    return false;\n  }\n\n  try {\n    // noinspection SuspiciousTypeOfGuard\n    return (x as ReadableStreamAsyncIteratorInstance<any>)._asyncIteratorImpl instanceof\n      ReadableStreamAsyncIteratorImpl;\n  } catch {\n    return false;\n  }\n}\n\n// Helper functions for the ReadableStream.\n\nfunction streamAsyncIteratorBrandCheckException(name: string): TypeError {\n  return new TypeError(`ReadableStreamAsyncIterator.${name} can only be used on a ReadableSteamAsyncIterator`);\n}\n","/// <reference lib=\"es2015.core\" />\n\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isNaN#Polyfill\nconst NumberIsNaN: typeof Number.isNaN = Number.isNaN || function (x) {\n  // eslint-disable-next-line no-self-compare\n  return x !== x;\n};\n\nexport default NumberIsNaN;\n","export function CreateArrayFromList<T extends any[]>(elements: T): T {\n  // We use arrays to represent lists, so this is basically a no-op.\n  // Do a slice though just in case we happen to depend on the unique-ness.\n  return elements.slice() as T;\n}\n\nexport function CopyDataBlockBytes(dest: ArrayBuffer,\n                                   destOffset: number,\n                                   src: ArrayBuffer,\n                                   srcOffset: number,\n                                   n: number) {\n  new Uint8Array(dest).set(new Uint8Array(src, srcOffset, n), destOffset);\n}\n\n// Not implemented correctly\nexport function TransferArrayBuffer<T extends ArrayBufferLike>(O: T): T {\n  return O;\n}\n\n// Not implemented correctly\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nexport function CanTransferArrayBuffer(O: ArrayBufferLike): boolean {\n  return true;\n}\n\n// Not implemented correctly\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nexport function IsDetachedBuffer(O: ArrayBufferLike): boolean {\n  return false;\n}\n\nexport function ArrayBufferSlice(buffer: ArrayBufferLike, begin: number, end: number): ArrayBufferLike {\n  // ArrayBuffer.prototype.slice is not available on IE10\n  // https://www.caniuse.com/mdn-javascript_builtins_arraybuffer_slice\n  if (buffer.slice) {\n    return buffer.slice(begin, end);\n  }\n  const length = end - begin;\n  const slice = new ArrayBuffer(length);\n  CopyDataBlockBytes(slice, 0, buffer, begin, length);\n  return slice;\n}\n","import NumberIsNaN from '../../stub/number-isnan';\nimport { ArrayBufferSlice } from './ecmascript';\n\nexport function IsNonNegativeNumber(v: number): boolean {\n  if (typeof v !== 'number') {\n    return false;\n  }\n\n  if (NumberIsNaN(v)) {\n    return false;\n  }\n\n  if (v < 0) {\n    return false;\n  }\n\n  return true;\n}\n\nexport function CloneAsUint8Array(O: ArrayBufferView): Uint8Array {\n  const buffer = ArrayBufferSlice(O.buffer, O.byteOffset, O.byteOffset + O.byteLength);\n  return new Uint8Array(buffer);\n}\n","import assert from '../../stub/assert';\nimport { SimpleQueue } from '../simple-queue';\nimport { IsNonNegativeNumber } from './miscellaneous';\n\nexport interface QueueContainer<T> {\n  _queue: SimpleQueue<T>;\n  _queueTotalSize: number;\n}\n\nexport interface QueuePair<T> {\n  value: T;\n  size: number;\n}\n\nexport function DequeueValue<T>(container: QueueContainer<QueuePair<T>>): T {\n  assert('_queue' in container && '_queueTotalSize' in container);\n  assert(container._queue.length > 0);\n\n  const pair = container._queue.shift()!;\n  container._queueTotalSize -= pair.size;\n  if (container._queueTotalSize < 0) {\n    container._queueTotalSize = 0;\n  }\n\n  return pair.value;\n}\n\nexport function EnqueueValueWithSize<T>(container: QueueContainer<QueuePair<T>>, value: T, size: number) {\n  assert('_queue' in container && '_queueTotalSize' in container);\n\n  if (!IsNonNegativeNumber(size) || size === Infinity) {\n    throw new RangeError('Size must be a finite, non-NaN, non-negative number.');\n  }\n\n  container._queue.push({ value, size });\n  container._queueTotalSize += size;\n}\n\nexport function PeekQueueValue<T>(container: QueueContainer<QueuePair<T>>): T {\n  assert('_queue' in container && '_queueTotalSize' in container);\n  assert(container._queue.length > 0);\n\n  const pair = container._queue.peek();\n  return pair.value;\n}\n\nexport function ResetQueue<T>(container: QueueContainer<T>) {\n  assert('_queue' in container && '_queueTotalSize' in container);\n\n  container._queue = new SimpleQueue<T>();\n  container._queueTotalSize = 0;\n}\n","import assert from '../../stub/assert';\nimport { SimpleQueue } from '../simple-queue';\nimport { ResetQueue } from '../abstract-ops/queue-with-sizes';\nimport {\n  ReadableStreamAddReadRequest,\n  ReadableStreamFulfillReadRequest,\n  ReadableStreamGetNumReadRequests,\n  ReadableStreamHasDefaultReader,\n  ReadRequest\n} from './default-reader';\nimport {\n  ReadableStreamAddReadIntoRequest,\n  ReadableStreamFulfillReadIntoRequest,\n  ReadableStreamGetNumReadIntoRequests,\n  ReadableStreamHasBYOBReader,\n  ReadIntoRequest\n} from './byob-reader';\nimport NumberIsInteger from '../../stub/number-isinteger';\nimport {\n  IsReadableStreamLocked,\n  ReadableByteStream,\n  ReadableStreamClose,\n  ReadableStreamError\n} from '../readable-stream';\nimport { ValidatedUnderlyingByteSource } from './underlying-source';\nimport { typeIsObject } from '../helpers/miscellaneous';\nimport {\n  ArrayBufferSlice,\n  CanTransferArrayBuffer,\n  CopyDataBlockBytes,\n  IsDetachedBuffer,\n  TransferArrayBuffer\n} from '../abstract-ops/ecmascript';\nimport { CancelSteps, PullSteps } from '../abstract-ops/internal-methods';\nimport { promiseResolvedWith, uponPromise } from '../helpers/webidl';\nimport { assertRequiredArgument, convertUnsignedLongLongWithEnforceRange } from '../validators/basic';\n\n/**\n * A pull-into request in a {@link ReadableByteStreamController}.\n *\n * @public\n */\nexport class ReadableStreamBYOBRequest {\n  /** @internal */\n  _associatedReadableByteStreamController!: ReadableByteStreamController;\n  /** @internal */\n  _view!: ArrayBufferView | null;\n\n  private constructor() {\n    throw new TypeError('Illegal constructor');\n  }\n\n  /**\n   * Returns the view for writing in to, or `null` if the BYOB request has already been responded to.\n   */\n  get view(): ArrayBufferView | null {\n    if (!IsReadableStreamBYOBRequest(this)) {\n      throw byobRequestBrandCheckException('view');\n    }\n\n    return this._view;\n  }\n\n  /**\n   * Indicates to the associated readable byte stream that `bytesWritten` bytes were written into\n   * {@link ReadableStreamBYOBRequest.view | view}, causing the result be surfaced to the consumer.\n   *\n   * After this method is called, {@link ReadableStreamBYOBRequest.view | view} will be transferred and no longer\n   * modifiable.\n   */\n  respond(bytesWritten: number): void;\n  respond(bytesWritten: number | undefined): void {\n    if (!IsReadableStreamBYOBRequest(this)) {\n      throw byobRequestBrandCheckException('respond');\n    }\n    assertRequiredArgument(bytesWritten, 1, 'respond');\n    bytesWritten = convertUnsignedLongLongWithEnforceRange(bytesWritten, 'First parameter');\n\n    if (this._associatedReadableByteStreamController === undefined) {\n      throw new TypeError('This BYOB request has been invalidated');\n    }\n\n    if (IsDetachedBuffer(this._view!.buffer)) {\n      throw new TypeError(`The BYOB request's buffer has been detached and so cannot be used as a response`);\n    }\n\n    assert(this._view!.byteLength > 0);\n    assert(this._view!.buffer.byteLength > 0);\n\n    ReadableByteStreamControllerRespond(this._associatedReadableByteStreamController, bytesWritten);\n  }\n\n  /**\n   * Indicates to the associated readable byte stream that instead of writing into\n   * {@link ReadableStreamBYOBRequest.view | view}, the underlying byte source is providing a new `ArrayBufferView`,\n   * which will be given to the consumer of the readable byte stream.\n   *\n   * After this method is called, `view` will be transferred and no longer modifiable.\n   */\n  respondWithNewView(view: ArrayBufferView): void;\n  respondWithNewView(view: ArrayBufferView | undefined): void {\n    if (!IsReadableStreamBYOBRequest(this)) {\n      throw byobRequestBrandCheckException('respondWithNewView');\n    }\n    assertRequiredArgument(view, 1, 'respondWithNewView');\n\n    if (!ArrayBuffer.isView(view)) {\n      throw new TypeError('You can only respond with array buffer views');\n    }\n\n    if (this._associatedReadableByteStreamController === undefined) {\n      throw new TypeError('This BYOB request has been invalidated');\n    }\n\n    if (IsDetachedBuffer(view.buffer)) {\n      throw new TypeError('The given view\\'s buffer has been detached and so cannot be used as a response');\n    }\n\n    ReadableByteStreamControllerRespondWithNewView(this._associatedReadableByteStreamController, view);\n  }\n}\n\nObject.defineProperties(ReadableStreamBYOBRequest.prototype, {\n  respond: { enumerable: true },\n  respondWithNewView: { enumerable: true },\n  view: { enumerable: true }\n});\nif (typeof Symbol.toStringTag === 'symbol') {\n  Object.defineProperty(ReadableStreamBYOBRequest.prototype, Symbol.toStringTag, {\n    value: 'ReadableStreamBYOBRequest',\n    configurable: true\n  });\n}\n\ninterface ArrayBufferViewConstructor<T extends ArrayBufferView = ArrayBufferView> {\n  new(buffer: ArrayBufferLike, byteOffset: number, length?: number): T;\n\n  readonly prototype: T;\n  readonly BYTES_PER_ELEMENT: number;\n}\n\ninterface ByteQueueElement {\n  buffer: ArrayBufferLike;\n  byteOffset: number;\n  byteLength: number;\n}\n\ntype PullIntoDescriptor<T extends ArrayBufferView = ArrayBufferView> =\n  DefaultPullIntoDescriptor\n  | BYOBPullIntoDescriptor<T>;\n\ninterface DefaultPullIntoDescriptor {\n  buffer: ArrayBufferLike;\n  bufferByteLength: number;\n  byteOffset: number;\n  byteLength: number;\n  bytesFilled: number;\n  elementSize: number;\n  viewConstructor: ArrayBufferViewConstructor<Uint8Array>;\n  readerType: 'default';\n}\n\ninterface BYOBPullIntoDescriptor<T extends ArrayBufferView = ArrayBufferView> {\n  buffer: ArrayBufferLike;\n  bufferByteLength: number;\n  byteOffset: number;\n  byteLength: number;\n  bytesFilled: number;\n  elementSize: number;\n  viewConstructor: ArrayBufferViewConstructor<T>;\n  readerType: 'byob';\n}\n\n/**\n * Allows control of a {@link ReadableStream | readable byte stream}'s state and internal queue.\n *\n * @public\n */\nexport class ReadableByteStreamController {\n  /** @internal */\n  _controlledReadableByteStream!: ReadableByteStream;\n  /** @internal */\n  _queue!: SimpleQueue<ByteQueueElement>;\n  /** @internal */\n  _queueTotalSize!: number;\n  /** @internal */\n  _started!: boolean;\n  /** @internal */\n  _closeRequested!: boolean;\n  /** @internal */\n  _pullAgain!: boolean;\n  /** @internal */\n  _pulling !: boolean;\n  /** @internal */\n  _strategyHWM!: number;\n  /** @internal */\n  _pullAlgorithm!: () => Promise<void>;\n  /** @internal */\n  _cancelAlgorithm!: (reason: any) => Promise<void>;\n  /** @internal */\n  _autoAllocateChunkSize: number | undefined;\n  /** @internal */\n  _byobRequest: ReadableStreamBYOBRequest | null;\n  /** @internal */\n  _pendingPullIntos!: SimpleQueue<PullIntoDescriptor>;\n\n  private constructor() {\n    throw new TypeError('Illegal constructor');\n  }\n\n  /**\n   * Returns the current BYOB pull request, or `null` if there isn't one.\n   */\n  get byobRequest(): ReadableStreamBYOBRequest | null {\n    if (!IsReadableByteStreamController(this)) {\n      throw byteStreamControllerBrandCheckException('byobRequest');\n    }\n\n    return ReadableByteStreamControllerGetBYOBRequest(this);\n  }\n\n  /**\n   * Returns the desired size to fill the controlled stream's internal queue. It can be negative, if the queue is\n   * over-full. An underlying byte source ought to use this information to determine when and how to apply backpressure.\n   */\n  get desiredSize(): number | null {\n    if (!IsReadableByteStreamController(this)) {\n      throw byteStreamControllerBrandCheckException('desiredSize');\n    }\n\n    return ReadableByteStreamControllerGetDesiredSize(this);\n  }\n\n  /**\n   * Closes the controlled readable stream. Consumers will still be able to read any previously-enqueued chunks from\n   * the stream, but once those are read, the stream will become closed.\n   */\n  close(): void {\n    if (!IsReadableByteStreamController(this)) {\n      throw byteStreamControllerBrandCheckException('close');\n    }\n\n    if (this._closeRequested) {\n      throw new TypeError('The stream has already been closed; do not close it again!');\n    }\n\n    const state = this._controlledReadableByteStream._state;\n    if (state !== 'readable') {\n      throw new TypeError(`The stream (in ${state} state) is not in the readable state and cannot be closed`);\n    }\n\n    ReadableByteStreamControllerClose(this);\n  }\n\n  /**\n   * Enqueues the given chunk chunk in the controlled readable stream.\n   * The chunk has to be an `ArrayBufferView` instance, or else a `TypeError` will be thrown.\n   */\n  enqueue(chunk: ArrayBufferView): void;\n  enqueue(chunk: ArrayBufferView | undefined): void {\n    if (!IsReadableByteStreamController(this)) {\n      throw byteStreamControllerBrandCheckException('enqueue');\n    }\n\n    assertRequiredArgument(chunk, 1, 'enqueue');\n    if (!ArrayBuffer.isView(chunk)) {\n      throw new TypeError('chunk must be an array buffer view');\n    }\n    if (chunk.byteLength === 0) {\n      throw new TypeError('chunk must have non-zero byteLength');\n    }\n    if (chunk.buffer.byteLength === 0) {\n      throw new TypeError(`chunk's buffer must have non-zero byteLength`);\n    }\n\n    if (this._closeRequested) {\n      throw new TypeError('stream is closed or draining');\n    }\n\n    const state = this._controlledReadableByteStream._state;\n    if (state !== 'readable') {\n      throw new TypeError(`The stream (in ${state} state) is not in the readable state and cannot be enqueued to`);\n    }\n\n    ReadableByteStreamControllerEnqueue(this, chunk);\n  }\n\n  /**\n   * Errors the controlled readable stream, making all future interactions with it fail with the given error `e`.\n   */\n  error(e: any = undefined): void {\n    if (!IsReadableByteStreamController(this)) {\n      throw byteStreamControllerBrandCheckException('error');\n    }\n\n    ReadableByteStreamControllerError(this, e);\n  }\n\n  /** @internal */\n  [CancelSteps](reason: any): Promise<void> {\n    ReadableByteStreamControllerClearPendingPullIntos(this);\n\n    ResetQueue(this);\n\n    const result = this._cancelAlgorithm(reason);\n    ReadableByteStreamControllerClearAlgorithms(this);\n    return result;\n  }\n\n  /** @internal */\n  [PullSteps](readRequest: ReadRequest<Uint8Array>): void {\n    const stream = this._controlledReadableByteStream;\n    assert(ReadableStreamHasDefaultReader(stream));\n\n    if (this._queueTotalSize > 0) {\n      assert(ReadableStreamGetNumReadRequests(stream) === 0);\n\n      const entry = this._queue.shift()!;\n      this._queueTotalSize -= entry.byteLength;\n\n      ReadableByteStreamControllerHandleQueueDrain(this);\n\n      const view = new Uint8Array(entry.buffer, entry.byteOffset, entry.byteLength);\n\n      readRequest._chunkSteps(view);\n      return;\n    }\n\n    const autoAllocateChunkSize = this._autoAllocateChunkSize;\n    if (autoAllocateChunkSize !== undefined) {\n      let buffer: ArrayBuffer;\n      try {\n        buffer = new ArrayBuffer(autoAllocateChunkSize);\n      } catch (bufferE) {\n        readRequest._errorSteps(bufferE);\n        return;\n      }\n\n      const pullIntoDescriptor: DefaultPullIntoDescriptor = {\n        buffer,\n        bufferByteLength: autoAllocateChunkSize,\n        byteOffset: 0,\n        byteLength: autoAllocateChunkSize,\n        bytesFilled: 0,\n        elementSize: 1,\n        viewConstructor: Uint8Array,\n        readerType: 'default'\n      };\n\n      this._pendingPullIntos.push(pullIntoDescriptor);\n    }\n\n    ReadableStreamAddReadRequest(stream, readRequest);\n    ReadableByteStreamControllerCallPullIfNeeded(this);\n  }\n}\n\nObject.defineProperties(ReadableByteStreamController.prototype, {\n  close: { enumerable: true },\n  enqueue: { enumerable: true },\n  error: { enumerable: true },\n  byobRequest: { enumerable: true },\n  desiredSize: { enumerable: true }\n});\nif (typeof Symbol.toStringTag === 'symbol') {\n  Object.defineProperty(ReadableByteStreamController.prototype, Symbol.toStringTag, {\n    value: 'ReadableByteStreamController',\n    configurable: true\n  });\n}\n\n// Abstract operations for the ReadableByteStreamController.\n\nexport function IsReadableByteStreamController(x: any): x is ReadableByteStreamController {\n  if (!typeIsObject(x)) {\n    return false;\n  }\n\n  if (!Object.prototype.hasOwnProperty.call(x, '_controlledReadableByteStream')) {\n    return false;\n  }\n\n  return x instanceof ReadableByteStreamController;\n}\n\nfunction IsReadableStreamBYOBRequest(x: any): x is ReadableStreamBYOBRequest {\n  if (!typeIsObject(x)) {\n    return false;\n  }\n\n  if (!Object.prototype.hasOwnProperty.call(x, '_associatedReadableByteStreamController')) {\n    return false;\n  }\n\n  return x instanceof ReadableStreamBYOBRequest;\n}\n\nfunction ReadableByteStreamControllerCallPullIfNeeded(controller: ReadableByteStreamController): void {\n  const shouldPull = ReadableByteStreamControllerShouldCallPull(controller);\n  if (!shouldPull) {\n    return;\n  }\n\n  if (controller._pulling) {\n    controller._pullAgain = true;\n    return;\n  }\n\n  assert(!controller._pullAgain);\n\n  controller._pulling = true;\n\n  // TODO: Test controller argument\n  const pullPromise = controller._pullAlgorithm();\n  uponPromise(\n    pullPromise,\n    () => {\n      controller._pulling = false;\n\n      if (controller._pullAgain) {\n        controller._pullAgain = false;\n        ReadableByteStreamControllerCallPullIfNeeded(controller);\n      }\n    },\n    e => {\n      ReadableByteStreamControllerError(controller, e);\n    }\n  );\n}\n\nfunction ReadableByteStreamControllerClearPendingPullIntos(controller: ReadableByteStreamController) {\n  ReadableByteStreamControllerInvalidateBYOBRequest(controller);\n  controller._pendingPullIntos = new SimpleQueue();\n}\n\nfunction ReadableByteStreamControllerCommitPullIntoDescriptor<T extends ArrayBufferView>(\n  stream: ReadableByteStream,\n  pullIntoDescriptor: PullIntoDescriptor<T>\n) {\n  assert(stream._state !== 'errored');\n\n  let done = false;\n  if (stream._state === 'closed') {\n    assert(pullIntoDescriptor.bytesFilled === 0);\n    done = true;\n  }\n\n  const filledView = ReadableByteStreamControllerConvertPullIntoDescriptor<T>(pullIntoDescriptor);\n  if (pullIntoDescriptor.readerType === 'default') {\n    ReadableStreamFulfillReadRequest(stream, filledView as unknown as Uint8Array, done);\n  } else {\n    assert(pullIntoDescriptor.readerType === 'byob');\n    ReadableStreamFulfillReadIntoRequest(stream, filledView, done);\n  }\n}\n\nfunction ReadableByteStreamControllerConvertPullIntoDescriptor<T extends ArrayBufferView>(\n  pullIntoDescriptor: PullIntoDescriptor<T>\n): T {\n  const bytesFilled = pullIntoDescriptor.bytesFilled;\n  const elementSize = pullIntoDescriptor.elementSize;\n\n  assert(bytesFilled <= pullIntoDescriptor.byteLength);\n  assert(bytesFilled % elementSize === 0);\n\n  return new pullIntoDescriptor.viewConstructor(\n    pullIntoDescriptor.buffer, pullIntoDescriptor.byteOffset, bytesFilled / elementSize) as T;\n}\n\nfunction ReadableByteStreamControllerEnqueueChunkToQueue(controller: ReadableByteStreamController,\n                                                         buffer: ArrayBufferLike,\n                                                         byteOffset: number,\n                                                         byteLength: number) {\n  controller._queue.push({ buffer, byteOffset, byteLength });\n  controller._queueTotalSize += byteLength;\n}\n\nfunction ReadableByteStreamControllerFillPullIntoDescriptorFromQueue(controller: ReadableByteStreamController,\n                                                                     pullIntoDescriptor: PullIntoDescriptor) {\n  const elementSize = pullIntoDescriptor.elementSize;\n\n  const currentAlignedBytes = pullIntoDescriptor.bytesFilled - pullIntoDescriptor.bytesFilled % elementSize;\n\n  const maxBytesToCopy = Math.min(controller._queueTotalSize,\n                                  pullIntoDescriptor.byteLength - pullIntoDescriptor.bytesFilled);\n  const maxBytesFilled = pullIntoDescriptor.bytesFilled + maxBytesToCopy;\n  const maxAlignedBytes = maxBytesFilled - maxBytesFilled % elementSize;\n\n  let totalBytesToCopyRemaining = maxBytesToCopy;\n  let ready = false;\n  if (maxAlignedBytes > currentAlignedBytes) {\n    totalBytesToCopyRemaining = maxAlignedBytes - pullIntoDescriptor.bytesFilled;\n    ready = true;\n  }\n\n  const queue = controller._queue;\n\n  while (totalBytesToCopyRemaining > 0) {\n    const headOfQueue = queue.peek();\n\n    const bytesToCopy = Math.min(totalBytesToCopyRemaining, headOfQueue.byteLength);\n\n    const destStart = pullIntoDescriptor.byteOffset + pullIntoDescriptor.bytesFilled;\n    CopyDataBlockBytes(pullIntoDescriptor.buffer, destStart, headOfQueue.buffer, headOfQueue.byteOffset, bytesToCopy);\n\n    if (headOfQueue.byteLength === bytesToCopy) {\n      queue.shift();\n    } else {\n      headOfQueue.byteOffset += bytesToCopy;\n      headOfQueue.byteLength -= bytesToCopy;\n    }\n    controller._queueTotalSize -= bytesToCopy;\n\n    ReadableByteStreamControllerFillHeadPullIntoDescriptor(controller, bytesToCopy, pullIntoDescriptor);\n\n    totalBytesToCopyRemaining -= bytesToCopy;\n  }\n\n  if (!ready) {\n    assert(controller._queueTotalSize === 0);\n    assert(pullIntoDescriptor.bytesFilled > 0);\n    assert(pullIntoDescriptor.bytesFilled < pullIntoDescriptor.elementSize);\n  }\n\n  return ready;\n}\n\nfunction ReadableByteStreamControllerFillHeadPullIntoDescriptor(controller: ReadableByteStreamController,\n                                                                size: number,\n                                                                pullIntoDescriptor: PullIntoDescriptor) {\n  assert(controller._pendingPullIntos.length === 0 || controller._pendingPullIntos.peek() === pullIntoDescriptor);\n  assert(controller._byobRequest === null);\n  pullIntoDescriptor.bytesFilled += size;\n}\n\nfunction ReadableByteStreamControllerHandleQueueDrain(controller: ReadableByteStreamController) {\n  assert(controller._controlledReadableByteStream._state === 'readable');\n\n  if (controller._queueTotalSize === 0 && controller._closeRequested) {\n    ReadableByteStreamControllerClearAlgorithms(controller);\n    ReadableStreamClose(controller._controlledReadableByteStream);\n  } else {\n    ReadableByteStreamControllerCallPullIfNeeded(controller);\n  }\n}\n\nfunction ReadableByteStreamControllerInvalidateBYOBRequest(controller: ReadableByteStreamController) {\n  if (controller._byobRequest === null) {\n    return;\n  }\n\n  controller._byobRequest._associatedReadableByteStreamController = undefined!;\n  controller._byobRequest._view = null!;\n  controller._byobRequest = null;\n}\n\nfunction ReadableByteStreamControllerProcessPullIntoDescriptorsUsingQueue(controller: ReadableByteStreamController) {\n  assert(!controller._closeRequested);\n\n  while (controller._pendingPullIntos.length > 0) {\n    if (controller._queueTotalSize === 0) {\n      return;\n    }\n\n    const pullIntoDescriptor = controller._pendingPullIntos.peek();\n\n    if (ReadableByteStreamControllerFillPullIntoDescriptorFromQueue(controller, pullIntoDescriptor)) {\n      ReadableByteStreamControllerShiftPendingPullInto(controller);\n\n      ReadableByteStreamControllerCommitPullIntoDescriptor(\n        controller._controlledReadableByteStream,\n        pullIntoDescriptor\n      );\n    }\n  }\n}\n\nexport function ReadableByteStreamControllerPullInto<T extends ArrayBufferView>(\n  controller: ReadableByteStreamController,\n  view: T,\n  readIntoRequest: ReadIntoRequest<T>\n): void {\n  const stream = controller._controlledReadableByteStream;\n\n  let elementSize = 1;\n  if (view.constructor !== DataView) {\n    elementSize = (view.constructor as ArrayBufferViewConstructor<T>).BYTES_PER_ELEMENT;\n  }\n\n  const ctor = view.constructor as ArrayBufferViewConstructor<T>;\n\n  // try {\n  const buffer = TransferArrayBuffer(view.buffer);\n  // } catch (e) {\n  //   readIntoRequest._errorSteps(e);\n  //   return;\n  // }\n\n  const pullIntoDescriptor: BYOBPullIntoDescriptor<T> = {\n    buffer,\n    bufferByteLength: buffer.byteLength,\n    byteOffset: view.byteOffset,\n    byteLength: view.byteLength,\n    bytesFilled: 0,\n    elementSize,\n    viewConstructor: ctor,\n    readerType: 'byob'\n  };\n\n  if (controller._pendingPullIntos.length > 0) {\n    controller._pendingPullIntos.push(pullIntoDescriptor);\n\n    // No ReadableByteStreamControllerCallPullIfNeeded() call since:\n    // - No change happens on desiredSize\n    // - The source has already been notified of that there's at least 1 pending read(view)\n\n    ReadableStreamAddReadIntoRequest(stream, readIntoRequest);\n    return;\n  }\n\n  if (stream._state === 'closed') {\n    const emptyView = new ctor(pullIntoDescriptor.buffer, pullIntoDescriptor.byteOffset, 0);\n    readIntoRequest._closeSteps(emptyView);\n    return;\n  }\n\n  if (controller._queueTotalSize > 0) {\n    if (ReadableByteStreamControllerFillPullIntoDescriptorFromQueue(controller, pullIntoDescriptor)) {\n      const filledView = ReadableByteStreamControllerConvertPullIntoDescriptor<T>(pullIntoDescriptor);\n\n      ReadableByteStreamControllerHandleQueueDrain(controller);\n\n      readIntoRequest._chunkSteps(filledView);\n      return;\n    }\n\n    if (controller._closeRequested) {\n      const e = new TypeError('Insufficient bytes to fill elements in the given buffer');\n      ReadableByteStreamControllerError(controller, e);\n\n      readIntoRequest._errorSteps(e);\n      return;\n    }\n  }\n\n  controller._pendingPullIntos.push(pullIntoDescriptor);\n\n  ReadableStreamAddReadIntoRequest<T>(stream, readIntoRequest);\n  ReadableByteStreamControllerCallPullIfNeeded(controller);\n}\n\nfunction ReadableByteStreamControllerRespondInClosedState(controller: ReadableByteStreamController,\n                                                          firstDescriptor: PullIntoDescriptor) {\n  assert(firstDescriptor.bytesFilled === 0);\n\n  const stream = controller._controlledReadableByteStream;\n  if (ReadableStreamHasBYOBReader(stream)) {\n    while (ReadableStreamGetNumReadIntoRequests(stream) > 0) {\n      const pullIntoDescriptor = ReadableByteStreamControllerShiftPendingPullInto(controller);\n      ReadableByteStreamControllerCommitPullIntoDescriptor(stream, pullIntoDescriptor);\n    }\n  }\n}\n\nfunction ReadableByteStreamControllerRespondInReadableState(controller: ReadableByteStreamController,\n                                                            bytesWritten: number,\n                                                            pullIntoDescriptor: PullIntoDescriptor) {\n  assert(pullIntoDescriptor.bytesFilled + bytesWritten <= pullIntoDescriptor.byteLength);\n\n  ReadableByteStreamControllerFillHeadPullIntoDescriptor(controller, bytesWritten, pullIntoDescriptor);\n\n  if (pullIntoDescriptor.bytesFilled < pullIntoDescriptor.elementSize) {\n    return;\n  }\n\n  ReadableByteStreamControllerShiftPendingPullInto(controller);\n\n  const remainderSize = pullIntoDescriptor.bytesFilled % pullIntoDescriptor.elementSize;\n  if (remainderSize > 0) {\n    const end = pullIntoDescriptor.byteOffset + pullIntoDescriptor.bytesFilled;\n    const remainder = ArrayBufferSlice(pullIntoDescriptor.buffer, end - remainderSize, end);\n    ReadableByteStreamControllerEnqueueChunkToQueue(controller, remainder, 0, remainder.byteLength);\n  }\n\n  pullIntoDescriptor.bytesFilled -= remainderSize;\n  ReadableByteStreamControllerCommitPullIntoDescriptor(controller._controlledReadableByteStream, pullIntoDescriptor);\n\n  ReadableByteStreamControllerProcessPullIntoDescriptorsUsingQueue(controller);\n}\n\nfunction ReadableByteStreamControllerRespondInternal(controller: ReadableByteStreamController, bytesWritten: number) {\n  const firstDescriptor = controller._pendingPullIntos.peek();\n  assert(CanTransferArrayBuffer(firstDescriptor.buffer));\n\n  ReadableByteStreamControllerInvalidateBYOBRequest(controller);\n\n  const state = controller._controlledReadableByteStream._state;\n  if (state === 'closed') {\n    assert(bytesWritten === 0);\n    ReadableByteStreamControllerRespondInClosedState(controller, firstDescriptor);\n  } else {\n    assert(state === 'readable');\n    assert(bytesWritten > 0);\n    ReadableByteStreamControllerRespondInReadableState(controller, bytesWritten, firstDescriptor);\n  }\n\n  ReadableByteStreamControllerCallPullIfNeeded(controller);\n}\n\nfunction ReadableByteStreamControllerShiftPendingPullInto(\n  controller: ReadableByteStreamController\n): PullIntoDescriptor {\n  assert(controller._byobRequest === null);\n  const descriptor = controller._pendingPullIntos.shift()!;\n  return descriptor;\n}\n\nfunction ReadableByteStreamControllerShouldCallPull(controller: ReadableByteStreamController): boolean {\n  const stream = controller._controlledReadableByteStream;\n\n  if (stream._state !== 'readable') {\n    return false;\n  }\n\n  if (controller._closeRequested) {\n    return false;\n  }\n\n  if (!controller._started) {\n    return false;\n  }\n\n  if (ReadableStreamHasDefaultReader(stream) && ReadableStreamGetNumReadRequests(stream) > 0) {\n    return true;\n  }\n\n  if (ReadableStreamHasBYOBReader(stream) && ReadableStreamGetNumReadIntoRequests(stream) > 0) {\n    return true;\n  }\n\n  const desiredSize = ReadableByteStreamControllerGetDesiredSize(controller);\n  assert(desiredSize !== null);\n  if (desiredSize! > 0) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction ReadableByteStreamControllerClearAlgorithms(controller: ReadableByteStreamController) {\n  controller._pullAlgorithm = undefined!;\n  controller._cancelAlgorithm = undefined!;\n}\n\n// A client of ReadableByteStreamController may use these functions directly to bypass state check.\n\nexport function ReadableByteStreamControllerClose(controller: ReadableByteStreamController) {\n  const stream = controller._controlledReadableByteStream;\n\n  if (controller._closeRequested || stream._state !== 'readable') {\n    return;\n  }\n\n  if (controller._queueTotalSize > 0) {\n    controller._closeRequested = true;\n\n    return;\n  }\n\n  if (controller._pendingPullIntos.length > 0) {\n    const firstPendingPullInto = controller._pendingPullIntos.peek();\n    if (firstPendingPullInto.bytesFilled > 0) {\n      const e = new TypeError('Insufficient bytes to fill elements in the given buffer');\n      ReadableByteStreamControllerError(controller, e);\n\n      throw e;\n    }\n  }\n\n  ReadableByteStreamControllerClearAlgorithms(controller);\n  ReadableStreamClose(stream);\n}\n\nexport function ReadableByteStreamControllerEnqueue(controller: ReadableByteStreamController, chunk: ArrayBufferView) {\n  const stream = controller._controlledReadableByteStream;\n\n  if (controller._closeRequested || stream._state !== 'readable') {\n    return;\n  }\n\n  const buffer = chunk.buffer;\n  const byteOffset = chunk.byteOffset;\n  const byteLength = chunk.byteLength;\n  if (IsDetachedBuffer(buffer)) {\n    throw new TypeError('chunk\\'s buffer is detached and so cannot be enqueued');\n  }\n  const transferredBuffer = TransferArrayBuffer(buffer);\n\n  if (controller._pendingPullIntos.length > 0) {\n    const firstPendingPullInto = controller._pendingPullIntos.peek();\n    if (IsDetachedBuffer(firstPendingPullInto.buffer)) {\n      throw new TypeError(\n        'The BYOB request\\'s buffer has been detached and so cannot be filled with an enqueued chunk'\n      );\n    }\n    firstPendingPullInto.buffer = TransferArrayBuffer(firstPendingPullInto.buffer);\n  }\n\n  ReadableByteStreamControllerInvalidateBYOBRequest(controller);\n\n  if (ReadableStreamHasDefaultReader(stream)) {\n    if (ReadableStreamGetNumReadRequests(stream) === 0) {\n      assert(controller._pendingPullIntos.length === 0);\n      ReadableByteStreamControllerEnqueueChunkToQueue(controller, transferredBuffer, byteOffset, byteLength);\n    } else {\n      assert(controller._queue.length === 0);\n      if (controller._pendingPullIntos.length > 0) {\n        assert(controller._pendingPullIntos.peek().readerType === 'default');\n        ReadableByteStreamControllerShiftPendingPullInto(controller);\n      }\n      const transferredView = new Uint8Array(transferredBuffer, byteOffset, byteLength);\n      ReadableStreamFulfillReadRequest(stream, transferredView, false);\n    }\n  } else if (ReadableStreamHasBYOBReader(stream)) {\n    // TODO: Ideally in this branch detaching should happen only if the buffer is not consumed fully.\n    ReadableByteStreamControllerEnqueueChunkToQueue(controller, transferredBuffer, byteOffset, byteLength);\n    ReadableByteStreamControllerProcessPullIntoDescriptorsUsingQueue(controller);\n  } else {\n    assert(!IsReadableStreamLocked(stream));\n    ReadableByteStreamControllerEnqueueChunkToQueue(controller, transferredBuffer, byteOffset, byteLength);\n  }\n\n  ReadableByteStreamControllerCallPullIfNeeded(controller);\n}\n\nexport function ReadableByteStreamControllerError(controller: ReadableByteStreamController, e: any) {\n  const stream = controller._controlledReadableByteStream;\n\n  if (stream._state !== 'readable') {\n    return;\n  }\n\n  ReadableByteStreamControllerClearPendingPullIntos(controller);\n\n  ResetQueue(controller);\n  ReadableByteStreamControllerClearAlgorithms(controller);\n  ReadableStreamError(stream, e);\n}\n\nexport function ReadableByteStreamControllerGetBYOBRequest(\n  controller: ReadableByteStreamController\n): ReadableStreamBYOBRequest | null {\n  if (controller._byobRequest === null && controller._pendingPullIntos.length > 0) {\n    const firstDescriptor = controller._pendingPullIntos.peek();\n    const view = new Uint8Array(firstDescriptor.buffer,\n                                firstDescriptor.byteOffset + firstDescriptor.bytesFilled,\n                                firstDescriptor.byteLength - firstDescriptor.bytesFilled);\n\n    const byobRequest: ReadableStreamBYOBRequest = Object.create(ReadableStreamBYOBRequest.prototype);\n    SetUpReadableStreamBYOBRequest(byobRequest, controller, view);\n    controller._byobRequest = byobRequest;\n  }\n  return controller._byobRequest;\n}\n\nfunction ReadableByteStreamControllerGetDesiredSize(controller: ReadableByteStreamController): number | null {\n  const state = controller._controlledReadableByteStream._state;\n\n  if (state === 'errored') {\n    return null;\n  }\n  if (state === 'closed') {\n    return 0;\n  }\n\n  return controller._strategyHWM - controller._queueTotalSize;\n}\n\nexport function ReadableByteStreamControllerRespond(controller: ReadableByteStreamController, bytesWritten: number) {\n  assert(controller._pendingPullIntos.length > 0);\n\n  const firstDescriptor = controller._pendingPullIntos.peek();\n  const state = controller._controlledReadableByteStream._state;\n\n  if (state === 'closed') {\n    if (bytesWritten !== 0) {\n      throw new TypeError('bytesWritten must be 0 when calling respond() on a closed stream');\n    }\n  } else {\n    assert(state === 'readable');\n    if (bytesWritten === 0) {\n      throw new TypeError('bytesWritten must be greater than 0 when calling respond() on a readable stream');\n    }\n    if (firstDescriptor.bytesFilled + bytesWritten > firstDescriptor.byteLength) {\n      throw new RangeError('bytesWritten out of range');\n    }\n  }\n\n  firstDescriptor.buffer = TransferArrayBuffer(firstDescriptor.buffer);\n\n  ReadableByteStreamControllerRespondInternal(controller, bytesWritten);\n}\n\nexport function ReadableByteStreamControllerRespondWithNewView(controller: ReadableByteStreamController,\n                                                               view: ArrayBufferView) {\n  assert(controller._pendingPullIntos.length > 0);\n  assert(!IsDetachedBuffer(view.buffer));\n\n  const firstDescriptor = controller._pendingPullIntos.peek();\n  const state = controller._controlledReadableByteStream._state;\n\n  if (state === 'closed') {\n    if (view.byteLength !== 0) {\n      throw new TypeError('The view\\'s length must be 0 when calling respondWithNewView() on a closed stream');\n    }\n  } else {\n    assert(state === 'readable');\n    if (view.byteLength === 0) {\n      throw new TypeError(\n        'The view\\'s length must be greater than 0 when calling respondWithNewView() on a readable stream'\n      );\n    }\n  }\n\n  if (firstDescriptor.byteOffset + firstDescriptor.bytesFilled !== view.byteOffset) {\n    throw new RangeError('The region specified by view does not match byobRequest');\n  }\n  if (firstDescriptor.bufferByteLength !== view.buffer.byteLength) {\n    throw new RangeError('The buffer of view has different capacity than byobRequest');\n  }\n  if (firstDescriptor.bytesFilled + view.byteLength > firstDescriptor.byteLength) {\n    throw new RangeError('The region specified by view is larger than byobRequest');\n  }\n\n  const viewByteLength = view.byteLength;\n  firstDescriptor.buffer = TransferArrayBuffer(view.buffer);\n  ReadableByteStreamControllerRespondInternal(controller, viewByteLength);\n}\n\nexport function SetUpReadableByteStreamController(stream: ReadableByteStream,\n                                                  controller: ReadableByteStreamController,\n                                                  startAlgorithm: () => void | PromiseLike<void>,\n                                                  pullAlgorithm: () => Promise<void>,\n                                                  cancelAlgorithm: (reason: any) => Promise<void>,\n                                                  highWaterMark: number,\n                                                  autoAllocateChunkSize: number | undefined) {\n  assert(stream._readableStreamController === undefined);\n  if (autoAllocateChunkSize !== undefined) {\n    assert(NumberIsInteger(autoAllocateChunkSize));\n    assert(autoAllocateChunkSize > 0);\n  }\n\n  controller._controlledReadableByteStream = stream;\n\n  controller._pullAgain = false;\n  controller._pulling = false;\n\n  controller._byobRequest = null;\n\n  // Need to set the slots so that the assert doesn't fire. In the spec the slots already exist implicitly.\n  controller._queue = controller._queueTotalSize = undefined!;\n  ResetQueue(controller);\n\n  controller._closeRequested = false;\n  controller._started = false;\n\n  controller._strategyHWM = highWaterMark;\n\n  controller._pullAlgorithm = pullAlgorithm;\n  controller._cancelAlgorithm = cancelAlgorithm;\n\n  controller._autoAllocateChunkSize = autoAllocateChunkSize;\n\n  controller._pendingPullIntos = new SimpleQueue();\n\n  stream._readableStreamController = controller;\n\n  const startResult = startAlgorithm();\n  uponPromise(\n    promiseResolvedWith(startResult),\n    () => {\n      controller._started = true;\n\n      assert(!controller._pulling);\n      assert(!controller._pullAgain);\n\n      ReadableByteStreamControllerCallPullIfNeeded(controller);\n    },\n    r => {\n      ReadableByteStreamControllerError(controller, r);\n    }\n  );\n}\n\nexport function SetUpReadableByteStreamControllerFromUnderlyingSource(\n  stream: ReadableByteStream,\n  underlyingByteSource: ValidatedUnderlyingByteSource,\n  highWaterMark: number\n) {\n  const controller: ReadableByteStreamController = Object.create(ReadableByteStreamController.prototype);\n\n  let startAlgorithm: () => void | PromiseLike<void> = () => undefined;\n  let pullAlgorithm: () => Promise<void> = () => promiseResolvedWith(undefined);\n  let cancelAlgorithm: (reason: any) => Promise<void> = () => promiseResolvedWith(undefined);\n\n  if (underlyingByteSource.start !== undefined) {\n    startAlgorithm = () => underlyingByteSource.start!(controller);\n  }\n  if (underlyingByteSource.pull !== undefined) {\n    pullAlgorithm = () => underlyingByteSource.pull!(controller);\n  }\n  if (underlyingByteSource.cancel !== undefined) {\n    cancelAlgorithm = reason => underlyingByteSource.cancel!(reason);\n  }\n\n  const autoAllocateChunkSize = underlyingByteSource.autoAllocateChunkSize;\n  if (autoAllocateChunkSize === 0) {\n    throw new TypeError('autoAllocateChunkSize must be greater than 0');\n  }\n\n  SetUpReadableByteStreamController(\n    stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark, autoAllocateChunkSize\n  );\n}\n\nfunction SetUpReadableStreamBYOBRequest(request: ReadableStreamBYOBRequest,\n                                        controller: ReadableByteStreamController,\n                                        view: ArrayBufferView) {\n  assert(IsReadableByteStreamController(controller));\n  assert(typeof view === 'object');\n  assert(ArrayBuffer.isView(view));\n  assert(!IsDetachedBuffer(view.buffer));\n  request._associatedReadableByteStreamController = controller;\n  request._view = view;\n}\n\n// Helper functions for the ReadableStreamBYOBRequest.\n\nfunction byobRequestBrandCheckException(name: string): TypeError {\n  return new TypeError(\n    `ReadableStreamBYOBRequest.prototype.${name} can only be used on a ReadableStreamBYOBRequest`);\n}\n\n// Helper functions for the ReadableByteStreamController.\n\nfunction byteStreamControllerBrandCheckException(name: string): TypeError {\n  return new TypeError(\n    `ReadableByteStreamController.prototype.${name} can only be used on a ReadableByteStreamController`);\n}\n","import assert from '../../stub/assert';\nimport { SimpleQueue } from '../simple-queue';\nimport {\n  ReadableStreamReaderGenericCancel,\n  ReadableStreamReaderGenericInitialize,\n  ReadableStreamReaderGenericRelease,\n  readerLockException\n} from './generic-reader';\nimport { IsReadableStreamLocked, ReadableByteStream, ReadableStream } from '../readable-stream';\nimport {\n  IsReadableByteStreamController,\n  ReadableByteStreamController,\n  ReadableByteStreamControllerPullInto\n} from './byte-stream-controller';\nimport { typeIsObject } from '../helpers/miscellaneous';\nimport { newPromise, promiseRejectedWith } from '../helpers/webidl';\nimport { assertRequiredArgument } from '../validators/basic';\nimport { assertReadableStream } from '../validators/readable-stream';\nimport { IsDetachedBuffer } from '../abstract-ops/ecmascript';\n\n/**\n * A result returned by {@link ReadableStreamBYOBReader.read}.\n *\n * @public\n */\nexport type ReadableStreamBYOBReadResult<T extends ArrayBufferView> = {\n  done: false;\n  value: T;\n} | {\n  done: true;\n  value: T | undefined;\n};\n\n// Abstract operations for the ReadableStream.\n\nexport function AcquireReadableStreamBYOBReader(stream: ReadableByteStream): ReadableStreamBYOBReader {\n  return new ReadableStreamBYOBReader(stream);\n}\n\n// ReadableStream API exposed for controllers.\n\nexport function ReadableStreamAddReadIntoRequest<T extends ArrayBufferView>(stream: ReadableByteStream,\n                                                                            readIntoRequest: ReadIntoRequest<T>): void {\n  assert(IsReadableStreamBYOBReader(stream._reader));\n  assert(stream._state === 'readable' || stream._state === 'closed');\n\n  (stream._reader! as ReadableStreamBYOBReader)._readIntoRequests.push(readIntoRequest);\n}\n\nexport function ReadableStreamFulfillReadIntoRequest(stream: ReadableByteStream,\n                                                     chunk: ArrayBufferView,\n                                                     done: boolean) {\n  const reader = stream._reader as ReadableStreamBYOBReader;\n\n  assert(reader._readIntoRequests.length > 0);\n\n  const readIntoRequest = reader._readIntoRequests.shift()!;\n  if (done) {\n    readIntoRequest._closeSteps(chunk);\n  } else {\n    readIntoRequest._chunkSteps(chunk);\n  }\n}\n\nexport function ReadableStreamGetNumReadIntoRequests(stream: ReadableByteStream): number {\n  return (stream._reader as ReadableStreamBYOBReader)._readIntoRequests.length;\n}\n\nexport function ReadableStreamHasBYOBReader(stream: ReadableByteStream): boolean {\n  const reader = stream._reader;\n\n  if (reader === undefined) {\n    return false;\n  }\n\n  if (!IsReadableStreamBYOBReader(reader)) {\n    return false;\n  }\n\n  return true;\n}\n\n// Readers\n\nexport interface ReadIntoRequest<T extends ArrayBufferView> {\n  _chunkSteps(chunk: T): void;\n\n  _closeSteps(chunk: T | undefined): void;\n\n  _errorSteps(e: any): void;\n}\n\n/**\n * A BYOB reader vended by a {@link ReadableStream}.\n *\n * @public\n */\nexport class ReadableStreamBYOBReader {\n  /** @internal */\n  _ownerReadableStream!: ReadableByteStream;\n  /** @internal */\n  _closedPromise!: Promise<undefined>;\n  /** @internal */\n  _closedPromise_resolve?: (value?: undefined) => void;\n  /** @internal */\n  _closedPromise_reject?: (reason: any) => void;\n  /** @internal */\n  _readIntoRequests: SimpleQueue<ReadIntoRequest<any>>;\n\n  constructor(stream: ReadableByteStream) {\n    assertRequiredArgument(stream, 1, 'ReadableStreamBYOBReader');\n    assertReadableStream(stream, 'First parameter');\n\n    if (IsReadableStreamLocked(stream)) {\n      throw new TypeError('This stream has already been locked for exclusive reading by another reader');\n    }\n\n    if (!IsReadableByteStreamController(stream._readableStreamController)) {\n      throw new TypeError('Cannot construct a ReadableStreamBYOBReader for a stream not constructed with a byte ' +\n        'source');\n    }\n\n    ReadableStreamReaderGenericInitialize(this, stream);\n\n    this._readIntoRequests = new SimpleQueue();\n  }\n\n  /**\n   * Returns a promise that will be fulfilled when the stream becomes closed, or rejected if the stream ever errors or\n   * the reader's lock is released before the stream finishes closing.\n   */\n  get closed(): Promise<undefined> {\n    if (!IsReadableStreamBYOBReader(this)) {\n      return promiseRejectedWith(byobReaderBrandCheckException('closed'));\n    }\n\n    return this._closedPromise;\n  }\n\n  /**\n   * If the reader is active, behaves the same as {@link ReadableStream.cancel | stream.cancel(reason)}.\n   */\n  cancel(reason: any = undefined): Promise<void> {\n    if (!IsReadableStreamBYOBReader(this)) {\n      return promiseRejectedWith(byobReaderBrandCheckException('cancel'));\n    }\n\n    if (this._ownerReadableStream === undefined) {\n      return promiseRejectedWith(readerLockException('cancel'));\n    }\n\n    return ReadableStreamReaderGenericCancel(this, reason);\n  }\n\n  /**\n   * Attempts to reads bytes into view, and returns a promise resolved with the result.\n   *\n   * If reading a chunk causes the queue to become empty, more data will be pulled from the underlying source.\n   */\n  read<T extends ArrayBufferView>(view: T): Promise<ReadableStreamBYOBReadResult<T>> {\n    if (!IsReadableStreamBYOBReader(this)) {\n      return promiseRejectedWith(byobReaderBrandCheckException('read'));\n    }\n\n    if (!ArrayBuffer.isView(view)) {\n      return promiseRejectedWith(new TypeError('view must be an array buffer view'));\n    }\n    if (view.byteLength === 0) {\n      return promiseRejectedWith(new TypeError('view must have non-zero byteLength'));\n    }\n    if (view.buffer.byteLength === 0) {\n      return promiseRejectedWith(new TypeError(`view's buffer must have non-zero byteLength`));\n    }\n    if (IsDetachedBuffer(view.buffer)) {\n      return promiseRejectedWith(new TypeError('view\\'s buffer has been detached'));\n    }\n\n    if (this._ownerReadableStream === undefined) {\n      return promiseRejectedWith(readerLockException('read from'));\n    }\n\n    let resolvePromise!: (result: ReadableStreamBYOBReadResult<T>) => void;\n    let rejectPromise!: (reason: any) => void;\n    const promise = newPromise<ReadableStreamBYOBReadResult<T>>((resolve, reject) => {\n      resolvePromise = resolve;\n      rejectPromise = reject;\n    });\n    const readIntoRequest: ReadIntoRequest<T> = {\n      _chunkSteps: chunk => resolvePromise({ value: chunk, done: false }),\n      _closeSteps: chunk => resolvePromise({ value: chunk, done: true }),\n      _errorSteps: e => rejectPromise(e)\n    };\n    ReadableStreamBYOBReaderRead(this, view, readIntoRequest);\n    return promise;\n  }\n\n  /**\n   * Releases the reader's lock on the corresponding stream. After the lock is released, the reader is no longer active.\n   * If the associated stream is errored when the lock is released, the reader will appear errored in the same way\n   * from now on; otherwise, the reader will appear closed.\n   *\n   * A reader's lock cannot be released while it still has a pending read request, i.e., if a promise returned by\n   * the reader's {@link ReadableStreamBYOBReader.read | read()} method has not yet been settled. Attempting to\n   * do so will throw a `TypeError` and leave the reader locked to the stream.\n   */\n  releaseLock(): void {\n    if (!IsReadableStreamBYOBReader(this)) {\n      throw byobReaderBrandCheckException('releaseLock');\n    }\n\n    if (this._ownerReadableStream === undefined) {\n      return;\n    }\n\n    if (this._readIntoRequests.length > 0) {\n      throw new TypeError('Tried to release a reader lock when that reader has pending read() calls un-settled');\n    }\n\n    ReadableStreamReaderGenericRelease(this);\n  }\n}\n\nObject.defineProperties(ReadableStreamBYOBReader.prototype, {\n  cancel: { enumerable: true },\n  read: { enumerable: true },\n  releaseLock: { enumerable: true },\n  closed: { enumerable: true }\n});\nif (typeof Symbol.toStringTag === 'symbol') {\n  Object.defineProperty(ReadableStreamBYOBReader.prototype, Symbol.toStringTag, {\n    value: 'ReadableStreamBYOBReader',\n    configurable: true\n  });\n}\n\n// Abstract operations for the readers.\n\nexport function IsReadableStreamBYOBReader(x: any): x is ReadableStreamBYOBReader {\n  if (!typeIsObject(x)) {\n    return false;\n  }\n\n  if (!Object.prototype.hasOwnProperty.call(x, '_readIntoRequests')) {\n    return false;\n  }\n\n  return x instanceof ReadableStreamBYOBReader;\n}\n\nexport function ReadableStreamBYOBReaderRead<T extends ArrayBufferView>(\n  reader: ReadableStreamBYOBReader,\n  view: T,\n  readIntoRequest: ReadIntoRequest<T>\n): void {\n  const stream = reader._ownerReadableStream;\n\n  assert(stream !== undefined);\n\n  stream._disturbed = true;\n\n  if (stream._state === 'errored') {\n    readIntoRequest._errorSteps(stream._storedError);\n  } else {\n    ReadableByteStreamControllerPullInto(\n      stream._readableStreamController as ReadableByteStreamController,\n      view,\n      readIntoRequest\n    );\n  }\n}\n\n// Helper functions for the ReadableStreamBYOBReader.\n\nfunction byobReaderBrandCheckException(name: string): TypeError {\n  return new TypeError(\n    `ReadableStreamBYOBReader.prototype.${name} can only be used on a ReadableStreamBYOBReader`);\n}\n","import { QueuingStrategy, QueuingStrategySizeCallback } from '../queuing-strategy';\nimport NumberIsNaN from '../../stub/number-isnan';\n\nexport function ExtractHighWaterMark(strategy: QueuingStrategy, defaultHWM: number): number {\n  const { highWaterMark } = strategy;\n\n  if (highWaterMark === undefined) {\n    return defaultHWM;\n  }\n\n  if (NumberIsNaN(highWaterMark) || highWaterMark < 0) {\n    throw new RangeError('Invalid highWaterMark');\n  }\n\n  return highWaterMark;\n}\n\nexport function ExtractSizeAlgorithm<T>(strategy: QueuingStrategy<T>): QueuingStrategySizeCallback<T> {\n  const { size } = strategy;\n\n  if (!size) {\n    return () => 1;\n  }\n\n  return size;\n}\n","import { QueuingStrategy, QueuingStrategySizeCallback } from '../queuing-strategy';\nimport { assertDictionary, assertFunction, convertUnrestrictedDouble } from './basic';\n\nexport function convertQueuingStrategy<T>(init: QueuingStrategy<T> | null | undefined,\n                                          context: string): QueuingStrategy<T> {\n  assertDictionary(init, context);\n  const highWaterMark = init?.highWaterMark;\n  const size = init?.size;\n  return {\n    highWaterMark: highWaterMark === undefined ? undefined : convertUnrestrictedDouble(highWaterMark),\n    size: size === undefined ? undefined : convertQueuingStrategySize(size, `${context} has member 'size' that`)\n  };\n}\n\nfunction convertQueuingStrategySize<T>(fn: QueuingStrategySizeCallback<T>,\n                                       context: string): QueuingStrategySizeCallback<T> {\n  assertFunction(fn, context);\n  return chunk => convertUnrestrictedDouble(fn(chunk));\n}\n","import { assertDictionary, assertFunction } from './basic';\nimport { promiseCall, reflectCall } from '../helpers/webidl';\nimport {\n  UnderlyingSink,\n  UnderlyingSinkAbortCallback,\n  UnderlyingSinkCloseCallback,\n  UnderlyingSinkStartCallback,\n  UnderlyingSinkWriteCallback,\n  ValidatedUnderlyingSink\n} from '../writable-stream/underlying-sink';\nimport { WritableStreamDefaultController } from '../writable-stream';\n\nexport function convertUnderlyingSink<W>(original: UnderlyingSink<W> | null,\n                                         context: string): ValidatedUnderlyingSink<W> {\n  assertDictionary(original, context);\n  const abort = original?.abort;\n  const close = original?.close;\n  const start = original?.start;\n  const type = original?.type;\n  const write = original?.write;\n  return {\n    abort: abort === undefined ?\n      undefined :\n      convertUnderlyingSinkAbortCallback(abort, original!, `${context} has member 'abort' that`),\n    close: close === undefined ?\n      undefined :\n      convertUnderlyingSinkCloseCallback(close, original!, `${context} has member 'close' that`),\n    start: start === undefined ?\n      undefined :\n      convertUnderlyingSinkStartCallback(start, original!, `${context} has member 'start' that`),\n    write: write === undefined ?\n      undefined :\n      convertUnderlyingSinkWriteCallback(write, original!, `${context} has member 'write' that`),\n    type\n  };\n}\n\nfunction convertUnderlyingSinkAbortCallback(\n  fn: UnderlyingSinkAbortCallback,\n  original: UnderlyingSink,\n  context: string\n): (reason: any) => Promise<void> {\n  assertFunction(fn, context);\n  return (reason: any) => promiseCall(fn, original, [reason]);\n}\n\nfunction convertUnderlyingSinkCloseCallback(\n  fn: UnderlyingSinkCloseCallback,\n  original: UnderlyingSink,\n  context: string\n): () => Promise<void> {\n  assertFunction(fn, context);\n  return () => promiseCall(fn, original, []);\n}\n\nfunction convertUnderlyingSinkStartCallback(\n  fn: UnderlyingSinkStartCallback,\n  original: UnderlyingSink,\n  context: string\n): UnderlyingSinkStartCallback {\n  assertFunction(fn, context);\n  return (controller: WritableStreamDefaultController) => reflectCall(fn, original, [controller]);\n}\n\nfunction convertUnderlyingSinkWriteCallback<W>(\n  fn: UnderlyingSinkWriteCallback<W>,\n  original: UnderlyingSink<W>,\n  context: string\n): (chunk: W, controller: WritableStreamDefaultController) => Promise<void> {\n  assertFunction(fn, context);\n  return (chunk: W, controller: WritableStreamDefaultController) => promiseCall(fn, original, [chunk, controller]);\n}\n","import { IsWritableStream, WritableStream } from '../writable-stream';\n\nexport function assertWritableStream(x: unknown, context: string): asserts x is WritableStream {\n  if (!IsWritableStream(x)) {\n    throw new TypeError(`${context} is not a WritableStream.`);\n  }\n}\n","/**\n * A signal object that allows you to communicate with a request and abort it if required\n * via its associated `AbortController` object.\n *\n * @remarks\n *   This interface is compatible with the `AbortSignal` interface defined in TypeScript's DOM types.\n *   It is redefined here, so it can be polyfilled without a DOM, for example with\n *   {@link https://www.npmjs.com/package/abortcontroller-polyfill | abortcontroller-polyfill} in a Node environment.\n *\n * @public\n */\nexport interface AbortSignal {\n  /**\n   * Whether the request is aborted.\n   */\n  readonly aborted: boolean;\n\n  /**\n   * Add an event listener to be triggered when this signal becomes aborted.\n   */\n  addEventListener(type: 'abort', listener: () => void): void;\n\n  /**\n   * Remove an event listener that was previously added with {@link AbortSignal.addEventListener}.\n   */\n  removeEventListener(type: 'abort', listener: () => void): void;\n}\n\nexport function isAbortSignal(value: unknown): value is AbortSignal {\n  if (typeof value !== 'object' || value === null) {\n    return false;\n  }\n  try {\n    return typeof (value as AbortSignal).aborted === 'boolean';\n  } catch {\n    // AbortSignal.prototype.aborted throws if its brand check fails\n    return false;\n  }\n}\n\n/**\n * A controller object that allows you to abort an `AbortSignal` when desired.\n *\n * @remarks\n *   This interface is compatible with the `AbortController` interface defined in TypeScript's DOM types.\n *   It is redefined here, so it can be polyfilled without a DOM, for example with\n *   {@link https://www.npmjs.com/package/abortcontroller-polyfill | abortcontroller-polyfill} in a Node environment.\n *\n * @internal\n */\nexport interface AbortController {\n  readonly signal: AbortSignal;\n\n  abort(): void;\n}\n\ninterface AbortControllerConstructor {\n  new(): AbortController;\n}\n\nconst supportsAbortController = typeof (AbortController as any) === 'function';\n\n/**\n * Construct a new AbortController, if supported by the platform.\n *\n * @internal\n */\nexport function createAbortController(): AbortController | undefined {\n  if (supportsAbortController) {\n    return new (AbortController as AbortControllerConstructor)();\n  }\n  return undefined;\n}\n","import assert from '../stub/assert';\nimport {\n  newPromise,\n  promiseRejectedWith,\n  promiseResolvedWith,\n  setPromiseIsHandledToTrue,\n  uponPromise\n} from './helpers/webidl';\nimport {\n  DequeueValue,\n  EnqueueValueWithSize,\n  PeekQueueValue,\n  QueuePair,\n  ResetQueue\n} from './abstract-ops/queue-with-sizes';\nimport { QueuingStrategy, QueuingStrategySizeCallback } from './queuing-strategy';\nimport { SimpleQueue } from './simple-queue';\nimport { typeIsObject } from './helpers/miscellaneous';\nimport { AbortSteps, ErrorSteps } from './abstract-ops/internal-methods';\nimport { IsNonNegativeNumber } from './abstract-ops/miscellaneous';\nimport { ExtractHighWaterMark, ExtractSizeAlgorithm } from './abstract-ops/queuing-strategy';\nimport { convertQueuingStrategy } from './validators/queuing-strategy';\nimport {\n  UnderlyingSink,\n  UnderlyingSinkAbortCallback,\n  UnderlyingSinkCloseCallback,\n  UnderlyingSinkStartCallback,\n  UnderlyingSinkWriteCallback,\n  ValidatedUnderlyingSink\n} from './writable-stream/underlying-sink';\nimport { assertObject, assertRequiredArgument } from './validators/basic';\nimport { convertUnderlyingSink } from './validators/underlying-sink';\nimport { assertWritableStream } from './validators/writable-stream';\nimport { AbortController, AbortSignal, createAbortController } from './abort-signal';\n\ntype WritableStreamState = 'writable' | 'closed' | 'erroring' | 'errored';\n\ninterface WriteOrCloseRequest {\n  _resolve: (value?: undefined) => void;\n  _reject: (reason: any) => void;\n}\n\ntype WriteRequest = WriteOrCloseRequest;\ntype CloseRequest = WriteOrCloseRequest;\n\ninterface PendingAbortRequest {\n  _promise: Promise<undefined>;\n  _resolve: (value?: undefined) => void;\n  _reject: (reason: any) => void;\n  _reason: any;\n  _wasAlreadyErroring: boolean;\n}\n\n/**\n * A writable stream represents a destination for data, into which you can write.\n *\n * @public\n */\nclass WritableStream<W = any> {\n  /** @internal */\n  _state!: WritableStreamState;\n  /** @internal */\n  _storedError: any;\n  /** @internal */\n  _writer: WritableStreamDefaultWriter<W> | undefined;\n  /** @internal */\n  _writableStreamController!: WritableStreamDefaultController<W>;\n  /** @internal */\n  _writeRequests!: SimpleQueue<WriteRequest>;\n  /** @internal */\n  _inFlightWriteRequest: WriteRequest | undefined;\n  /** @internal */\n  _closeRequest: CloseRequest | undefined;\n  /** @internal */\n  _inFlightCloseRequest: CloseRequest | undefined;\n  /** @internal */\n  _pendingAbortRequest: PendingAbortRequest | undefined;\n  /** @internal */\n  _backpressure!: boolean;\n\n  constructor(underlyingSink?: UnderlyingSink<W>, strategy?: QueuingStrategy<W>);\n  constructor(rawUnderlyingSink: UnderlyingSink<W> | null | undefined = {},\n              rawStrategy: QueuingStrategy<W> | null | undefined = {}) {\n    if (rawUnderlyingSink === undefined) {\n      rawUnderlyingSink = null;\n    } else {\n      assertObject(rawUnderlyingSink, 'First parameter');\n    }\n\n    const strategy = convertQueuingStrategy(rawStrategy, 'Second parameter');\n    const underlyingSink = convertUnderlyingSink(rawUnderlyingSink, 'First parameter');\n\n    InitializeWritableStream(this);\n\n    const type = underlyingSink.type;\n    if (type !== undefined) {\n      throw new RangeError('Invalid type is specified');\n    }\n\n    const sizeAlgorithm = ExtractSizeAlgorithm(strategy);\n    const highWaterMark = ExtractHighWaterMark(strategy, 1);\n\n    SetUpWritableStreamDefaultControllerFromUnderlyingSink(this, underlyingSink, highWaterMark, sizeAlgorithm);\n  }\n\n  /**\n   * Returns whether or not the writable stream is locked to a writer.\n   */\n  get locked(): boolean {\n    if (!IsWritableStream(this)) {\n      throw streamBrandCheckException('locked');\n    }\n\n    return IsWritableStreamLocked(this);\n  }\n\n  /**\n   * Aborts the stream, signaling that the producer can no longer successfully write to the stream and it is to be\n   * immediately moved to an errored state, with any queued-up writes discarded. This will also execute any abort\n   * mechanism of the underlying sink.\n   *\n   * The returned promise will fulfill if the stream shuts down successfully, or reject if the underlying sink signaled\n   * that there was an error doing so. Additionally, it will reject with a `TypeError` (without attempting to cancel\n   * the stream) if the stream is currently locked.\n   */\n  abort(reason: any = undefined): Promise<void> {\n    if (!IsWritableStream(this)) {\n      return promiseRejectedWith(streamBrandCheckException('abort'));\n    }\n\n    if (IsWritableStreamLocked(this)) {\n      return promiseRejectedWith(new TypeError('Cannot abort a stream that already has a writer'));\n    }\n\n    return WritableStreamAbort(this, reason);\n  }\n\n  /**\n   * Closes the stream. The underlying sink will finish processing any previously-written chunks, before invoking its\n   * close behavior. During this time any further attempts to write will fail (without erroring the stream).\n   *\n   * The method returns a promise that will fulfill if all remaining chunks are successfully written and the stream\n   * successfully closes, or rejects if an error is encountered during this process. Additionally, it will reject with\n   * a `TypeError` (without attempting to cancel the stream) if the stream is currently locked.\n   */\n  close() {\n    if (!IsWritableStream(this)) {\n      return promiseRejectedWith(streamBrandCheckException('close'));\n    }\n\n    if (IsWritableStreamLocked(this)) {\n      return promiseRejectedWith(new TypeError('Cannot close a stream that already has a writer'));\n    }\n\n    if (WritableStreamCloseQueuedOrInFlight(this)) {\n      return promiseRejectedWith(new TypeError('Cannot close an already-closing stream'));\n    }\n\n    return WritableStreamClose(this);\n  }\n\n  /**\n   * Creates a {@link WritableStreamDefaultWriter | writer} and locks the stream to the new writer. While the stream\n   * is locked, no other writer can be acquired until this one is released.\n   *\n   * This functionality is especially useful for creating abstractions that desire the ability to write to a stream\n   * without interruption or interleaving. By getting a writer for the stream, you can ensure nobody else can write at\n   * the same time, which would cause the resulting written data to be unpredictable and probably useless.\n   */\n  getWriter(): WritableStreamDefaultWriter<W> {\n    if (!IsWritableStream(this)) {\n      throw streamBrandCheckException('getWriter');\n    }\n\n    return AcquireWritableStreamDefaultWriter(this);\n  }\n}\n\nObject.defineProperties(WritableStream.prototype, {\n  abort: { enumerable: true },\n  close: { enumerable: true },\n  getWriter: { enumerable: true },\n  locked: { enumerable: true }\n});\nif (typeof Symbol.toStringTag === 'symbol') {\n  Object.defineProperty(WritableStream.prototype, Symbol.toStringTag, {\n    value: 'WritableStream',\n    configurable: true\n  });\n}\n\nexport {\n  AcquireWritableStreamDefaultWriter,\n  CreateWritableStream,\n  IsWritableStream,\n  IsWritableStreamLocked,\n  WritableStream,\n  WritableStreamAbort,\n  WritableStreamDefaultControllerErrorIfNeeded,\n  WritableStreamDefaultWriterCloseWithErrorPropagation,\n  WritableStreamDefaultWriterRelease,\n  WritableStreamDefaultWriterWrite,\n  WritableStreamCloseQueuedOrInFlight,\n  UnderlyingSink,\n  UnderlyingSinkStartCallback,\n  UnderlyingSinkWriteCallback,\n  UnderlyingSinkCloseCallback,\n  UnderlyingSinkAbortCallback\n};\n\n// Abstract operations for the WritableStream.\n\nfunction AcquireWritableStreamDefaultWriter<W>(stream: WritableStream<W>): WritableStreamDefaultWriter<W> {\n  return new WritableStreamDefaultWriter(stream);\n}\n\n// Throws if and only if startAlgorithm throws.\nfunction CreateWritableStream<W>(startAlgorithm: () => void | PromiseLike<void>,\n                                 writeAlgorithm: (chunk: W) => Promise<void>,\n                                 closeAlgorithm: () => Promise<void>,\n                                 abortAlgorithm: (reason: any) => Promise<void>,\n                                 highWaterMark = 1,\n                                 sizeAlgorithm: QueuingStrategySizeCallback<W> = () => 1) {\n  assert(IsNonNegativeNumber(highWaterMark));\n\n  const stream: WritableStream<W> = Object.create(WritableStream.prototype);\n  InitializeWritableStream(stream);\n\n  const controller: WritableStreamDefaultController<W> = Object.create(WritableStreamDefaultController.prototype);\n\n  SetUpWritableStreamDefaultController(stream, controller, startAlgorithm, writeAlgorithm, closeAlgorithm,\n                                       abortAlgorithm, highWaterMark, sizeAlgorithm);\n  return stream;\n}\n\nfunction InitializeWritableStream<W>(stream: WritableStream<W>) {\n  stream._state = 'writable';\n\n  // The error that will be reported by new method calls once the state becomes errored. Only set when [[state]] is\n  // 'erroring' or 'errored'. May be set to an undefined value.\n  stream._storedError = undefined;\n\n  stream._writer = undefined;\n\n  // Initialize to undefined first because the constructor of the controller checks this\n  // variable to validate the caller.\n  stream._writableStreamController = undefined!;\n\n  // This queue is placed here instead of the writer class in order to allow for passing a writer to the next data\n  // producer without waiting for the queued writes to finish.\n  stream._writeRequests = new SimpleQueue();\n\n  // Write requests are removed from _writeRequests when write() is called on the underlying sink. This prevents\n  // them from being erroneously rejected on error. If a write() call is in-flight, the request is stored here.\n  stream._inFlightWriteRequest = undefined;\n\n  // The promise that was returned from writer.close(). Stored here because it may be fulfilled after the writer\n  // has been detached.\n  stream._closeRequest = undefined;\n\n  // Close request is removed from _closeRequest when close() is called on the underlying sink. This prevents it\n  // from being erroneously rejected on error. If a close() call is in-flight, the request is stored here.\n  stream._inFlightCloseRequest = undefined;\n\n  // The promise that was returned from writer.abort(). This may also be fulfilled after the writer has detached.\n  stream._pendingAbortRequest = undefined;\n\n  // The backpressure signal set by the controller.\n  stream._backpressure = false;\n}\n\nfunction IsWritableStream(x: unknown): x is WritableStream {\n  if (!typeIsObject(x)) {\n    return false;\n  }\n\n  if (!Object.prototype.hasOwnProperty.call(x, '_writableStreamController')) {\n    return false;\n  }\n\n  return x instanceof WritableStream;\n}\n\nfunction IsWritableStreamLocked(stream: WritableStream): boolean {\n  assert(IsWritableStream(stream));\n\n  if (stream._writer === undefined) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction WritableStreamAbort(stream: WritableStream, reason: any): Promise<undefined> {\n  if (stream._state === 'closed' || stream._state === 'errored') {\n    return promiseResolvedWith(undefined);\n  }\n  stream._writableStreamController._abortReason = reason;\n  stream._writableStreamController._abortController?.abort();\n\n  // TypeScript narrows the type of `stream._state` down to 'writable' | 'erroring',\n  // but it doesn't know that signaling abort runs author code that might have changed the state.\n  // Widen the type again by casting to WritableStreamState.\n  const state = stream._state as WritableStreamState;\n\n  if (state === 'closed' || state === 'errored') {\n    return promiseResolvedWith(undefined);\n  }\n  if (stream._pendingAbortRequest !== undefined) {\n    return stream._pendingAbortRequest._promise;\n  }\n\n  assert(state === 'writable' || state === 'erroring');\n\n  let wasAlreadyErroring = false;\n  if (state === 'erroring') {\n    wasAlreadyErroring = true;\n    // reason will not be used, so don't keep a reference to it.\n    reason = undefined;\n  }\n\n  const promise = newPromise<undefined>((resolve, reject) => {\n    stream._pendingAbortRequest = {\n      _promise: undefined!,\n      _resolve: resolve,\n      _reject: reject,\n      _reason: reason,\n      _wasAlreadyErroring: wasAlreadyErroring\n    };\n  });\n  stream._pendingAbortRequest!._promise = promise;\n\n  if (!wasAlreadyErroring) {\n    WritableStreamStartErroring(stream, reason);\n  }\n\n  return promise;\n}\n\nfunction WritableStreamClose(stream: WritableStream<any>): Promise<undefined> {\n  const state = stream._state;\n  if (state === 'closed' || state === 'errored') {\n    return promiseRejectedWith(new TypeError(\n      `The stream (in ${state} state) is not in the writable state and cannot be closed`));\n  }\n\n  assert(state === 'writable' || state === 'erroring');\n  assert(!WritableStreamCloseQueuedOrInFlight(stream));\n\n  const promise = newPromise<undefined>((resolve, reject) => {\n    const closeRequest: CloseRequest = {\n      _resolve: resolve,\n      _reject: reject\n    };\n\n    stream._closeRequest = closeRequest;\n  });\n\n  const writer = stream._writer;\n  if (writer !== undefined && stream._backpressure && state === 'writable') {\n    defaultWriterReadyPromiseResolve(writer);\n  }\n\n  WritableStreamDefaultControllerClose(stream._writableStreamController);\n\n  return promise;\n}\n\n// WritableStream API exposed for controllers.\n\nfunction WritableStreamAddWriteRequest(stream: WritableStream): Promise<undefined> {\n  assert(IsWritableStreamLocked(stream));\n  assert(stream._state === 'writable');\n\n  const promise = newPromise<undefined>((resolve, reject) => {\n    const writeRequest: WriteRequest = {\n      _resolve: resolve,\n      _reject: reject\n    };\n\n    stream._writeRequests.push(writeRequest);\n  });\n\n  return promise;\n}\n\nfunction WritableStreamDealWithRejection(stream: WritableStream, error: any) {\n  const state = stream._state;\n\n  if (state === 'writable') {\n    WritableStreamStartErroring(stream, error);\n    return;\n  }\n\n  assert(state === 'erroring');\n  WritableStreamFinishErroring(stream);\n}\n\nfunction WritableStreamStartErroring(stream: WritableStream, reason: any) {\n  assert(stream._storedError === undefined);\n  assert(stream._state === 'writable');\n\n  const controller = stream._writableStreamController;\n  assert(controller !== undefined);\n\n  stream._state = 'erroring';\n  stream._storedError = reason;\n  const writer = stream._writer;\n  if (writer !== undefined) {\n    WritableStreamDefaultWriterEnsureReadyPromiseRejected(writer, reason);\n  }\n\n  if (!WritableStreamHasOperationMarkedInFlight(stream) && controller._started) {\n    WritableStreamFinishErroring(stream);\n  }\n}\n\nfunction WritableStreamFinishErroring(stream: WritableStream) {\n  assert(stream._state === 'erroring');\n  assert(!WritableStreamHasOperationMarkedInFlight(stream));\n  stream._state = 'errored';\n  stream._writableStreamController[ErrorSteps]();\n\n  const storedError = stream._storedError;\n  stream._writeRequests.forEach(writeRequest => {\n    writeRequest._reject(storedError);\n  });\n  stream._writeRequests = new SimpleQueue();\n\n  if (stream._pendingAbortRequest === undefined) {\n    WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream);\n    return;\n  }\n\n  const abortRequest = stream._pendingAbortRequest;\n  stream._pendingAbortRequest = undefined;\n\n  if (abortRequest._wasAlreadyErroring) {\n    abortRequest._reject(storedError);\n    WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream);\n    return;\n  }\n\n  const promise = stream._writableStreamController[AbortSteps](abortRequest._reason);\n  uponPromise(\n    promise,\n    () => {\n      abortRequest._resolve();\n      WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream);\n    },\n    (reason: any) => {\n      abortRequest._reject(reason);\n      WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream);\n    });\n}\n\nfunction WritableStreamFinishInFlightWrite(stream: WritableStream) {\n  assert(stream._inFlightWriteRequest !== undefined);\n  stream._inFlightWriteRequest!._resolve(undefined);\n  stream._inFlightWriteRequest = undefined;\n}\n\nfunction WritableStreamFinishInFlightWriteWithError(stream: WritableStream, error: any) {\n  assert(stream._inFlightWriteRequest !== undefined);\n  stream._inFlightWriteRequest!._reject(error);\n  stream._inFlightWriteRequest = undefined;\n\n  assert(stream._state === 'writable' || stream._state === 'erroring');\n\n  WritableStreamDealWithRejection(stream, error);\n}\n\nfunction WritableStreamFinishInFlightClose(stream: WritableStream) {\n  assert(stream._inFlightCloseRequest !== undefined);\n  stream._inFlightCloseRequest!._resolve(undefined);\n  stream._inFlightCloseRequest = undefined;\n\n  const state = stream._state;\n\n  assert(state === 'writable' || state === 'erroring');\n\n  if (state === 'erroring') {\n    // The error was too late to do anything, so it is ignored.\n    stream._storedError = undefined;\n    if (stream._pendingAbortRequest !== undefined) {\n      stream._pendingAbortRequest._resolve();\n      stream._pendingAbortRequest = undefined;\n    }\n  }\n\n  stream._state = 'closed';\n\n  const writer = stream._writer;\n  if (writer !== undefined) {\n    defaultWriterClosedPromiseResolve(writer);\n  }\n\n  assert(stream._pendingAbortRequest === undefined);\n  assert(stream._storedError === undefined);\n}\n\nfunction WritableStreamFinishInFlightCloseWithError(stream: WritableStream, error: any) {\n  assert(stream._inFlightCloseRequest !== undefined);\n  stream._inFlightCloseRequest!._reject(error);\n  stream._inFlightCloseRequest = undefined;\n\n  assert(stream._state === 'writable' || stream._state === 'erroring');\n\n  // Never execute sink abort() after sink close().\n  if (stream._pendingAbortRequest !== undefined) {\n    stream._pendingAbortRequest._reject(error);\n    stream._pendingAbortRequest = undefined;\n  }\n  WritableStreamDealWithRejection(stream, error);\n}\n\n// TODO(ricea): Fix alphabetical order.\nfunction WritableStreamCloseQueuedOrInFlight(stream: WritableStream): boolean {\n  if (stream._closeRequest === undefined && stream._inFlightCloseRequest === undefined) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction WritableStreamHasOperationMarkedInFlight(stream: WritableStream): boolean {\n  if (stream._inFlightWriteRequest === undefined && stream._inFlightCloseRequest === undefined) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction WritableStreamMarkCloseRequestInFlight(stream: WritableStream) {\n  assert(stream._inFlightCloseRequest === undefined);\n  assert(stream._closeRequest !== undefined);\n  stream._inFlightCloseRequest = stream._closeRequest;\n  stream._closeRequest = undefined;\n}\n\nfunction WritableStreamMarkFirstWriteRequestInFlight(stream: WritableStream) {\n  assert(stream._inFlightWriteRequest === undefined);\n  assert(stream._writeRequests.length !== 0);\n  stream._inFlightWriteRequest = stream._writeRequests.shift();\n}\n\nfunction WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream: WritableStream) {\n  assert(stream._state === 'errored');\n  if (stream._closeRequest !== undefined) {\n    assert(stream._inFlightCloseRequest === undefined);\n\n    stream._closeRequest._reject(stream._storedError);\n    stream._closeRequest = undefined;\n  }\n  const writer = stream._writer;\n  if (writer !== undefined) {\n    defaultWriterClosedPromiseReject(writer, stream._storedError);\n  }\n}\n\nfunction WritableStreamUpdateBackpressure(stream: WritableStream, backpressure: boolean) {\n  assert(stream._state === 'writable');\n  assert(!WritableStreamCloseQueuedOrInFlight(stream));\n\n  const writer = stream._writer;\n  if (writer !== undefined && backpressure !== stream._backpressure) {\n    if (backpressure) {\n      defaultWriterReadyPromiseReset(writer);\n    } else {\n      assert(!backpressure);\n\n      defaultWriterReadyPromiseResolve(writer);\n    }\n  }\n\n  stream._backpressure = backpressure;\n}\n\n/**\n * A default writer vended by a {@link WritableStream}.\n *\n * @public\n */\nexport class WritableStreamDefaultWriter<W = any> {\n  /** @internal */\n  _ownerWritableStream: WritableStream<W>;\n  /** @internal */\n  _closedPromise!: Promise<undefined>;\n  /** @internal */\n  _closedPromise_resolve?: (value?: undefined) => void;\n  /** @internal */\n  _closedPromise_reject?: (reason: any) => void;\n  /** @internal */\n  _closedPromiseState!: 'pending' | 'resolved' | 'rejected';\n  /** @internal */\n  _readyPromise!: Promise<undefined>;\n  /** @internal */\n  _readyPromise_resolve?: (value?: undefined) => void;\n  /** @internal */\n  _readyPromise_reject?: (reason: any) => void;\n  /** @internal */\n  _readyPromiseState!: 'pending' | 'fulfilled' | 'rejected';\n\n  constructor(stream: WritableStream<W>) {\n    assertRequiredArgument(stream, 1, 'WritableStreamDefaultWriter');\n    assertWritableStream(stream, 'First parameter');\n\n    if (IsWritableStreamLocked(stream)) {\n      throw new TypeError('This stream has already been locked for exclusive writing by another writer');\n    }\n\n    this._ownerWritableStream = stream;\n    stream._writer = this;\n\n    const state = stream._state;\n\n    if (state === 'writable') {\n      if (!WritableStreamCloseQueuedOrInFlight(stream) && stream._backpressure) {\n        defaultWriterReadyPromiseInitialize(this);\n      } else {\n        defaultWriterReadyPromiseInitializeAsResolved(this);\n      }\n\n      defaultWriterClosedPromiseInitialize(this);\n    } else if (state === 'erroring') {\n      defaultWriterReadyPromiseInitializeAsRejected(this, stream._storedError);\n      defaultWriterClosedPromiseInitialize(this);\n    } else if (state === 'closed') {\n      defaultWriterReadyPromiseInitializeAsResolved(this);\n      defaultWriterClosedPromiseInitializeAsResolved(this);\n    } else {\n      assert(state === 'errored');\n\n      const storedError = stream._storedError;\n      defaultWriterReadyPromiseInitializeAsRejected(this, storedError);\n      defaultWriterClosedPromiseInitializeAsRejected(this, storedError);\n    }\n  }\n\n  /**\n   * Returns a promise that will be fulfilled when the stream becomes closed, or rejected if the stream ever errors or\n   * the writer’s lock is released before the stream finishes closing.\n   */\n  get closed(): Promise<undefined> {\n    if (!IsWritableStreamDefaultWriter(this)) {\n      return promiseRejectedWith(defaultWriterBrandCheckException('closed'));\n    }\n\n    return this._closedPromise;\n  }\n\n  /**\n   * Returns the desired size to fill the stream’s internal queue. It can be negative, if the queue is over-full.\n   * A producer can use this information to determine the right amount of data to write.\n   *\n   * It will be `null` if the stream cannot be successfully written to (due to either being errored, or having an abort\n   * queued up). It will return zero if the stream is closed. And the getter will throw an exception if invoked when\n   * the writer’s lock is released.\n   */\n  get desiredSize(): number | null {\n    if (!IsWritableStreamDefaultWriter(this)) {\n      throw defaultWriterBrandCheckException('desiredSize');\n    }\n\n    if (this._ownerWritableStream === undefined) {\n      throw defaultWriterLockException('desiredSize');\n    }\n\n    return WritableStreamDefaultWriterGetDesiredSize(this);\n  }\n\n  /**\n   * Returns a promise that will be fulfilled when the desired size to fill the stream’s internal queue transitions\n   * from non-positive to positive, signaling that it is no longer applying backpressure. Once the desired size dips\n   * back to zero or below, the getter will return a new promise that stays pending until the next transition.\n   *\n   * If the stream becomes errored or aborted, or the writer’s lock is released, the returned promise will become\n   * rejected.\n   */\n  get ready(): Promise<undefined> {\n    if (!IsWritableStreamDefaultWriter(this)) {\n      return promiseRejectedWith(defaultWriterBrandCheckException('ready'));\n    }\n\n    return this._readyPromise;\n  }\n\n  /**\n   * If the reader is active, behaves the same as {@link WritableStream.abort | stream.abort(reason)}.\n   */\n  abort(reason: any = undefined): Promise<void> {\n    if (!IsWritableStreamDefaultWriter(this)) {\n      return promiseRejectedWith(defaultWriterBrandCheckException('abort'));\n    }\n\n    if (this._ownerWritableStream === undefined) {\n      return promiseRejectedWith(defaultWriterLockException('abort'));\n    }\n\n    return WritableStreamDefaultWriterAbort(this, reason);\n  }\n\n  /**\n   * If the reader is active, behaves the same as {@link WritableStream.close | stream.close()}.\n   */\n  close(): Promise<void> {\n    if (!IsWritableStreamDefaultWriter(this)) {\n      return promiseRejectedWith(defaultWriterBrandCheckException('close'));\n    }\n\n    const stream = this._ownerWritableStream;\n\n    if (stream === undefined) {\n      return promiseRejectedWith(defaultWriterLockException('close'));\n    }\n\n    if (WritableStreamCloseQueuedOrInFlight(stream)) {\n      return promiseRejectedWith(new TypeError('Cannot close an already-closing stream'));\n    }\n\n    return WritableStreamDefaultWriterClose(this);\n  }\n\n  /**\n   * Releases the writer’s lock on the corresponding stream. After the lock is released, the writer is no longer active.\n   * If the associated stream is errored when the lock is released, the writer will appear errored in the same way from\n   * now on; otherwise, the writer will appear closed.\n   *\n   * Note that the lock can still be released even if some ongoing writes have not yet finished (i.e. even if the\n   * promises returned from previous calls to {@link WritableStreamDefaultWriter.write | write()} have not yet settled).\n   * It’s not necessary to hold the lock on the writer for the duration of the write; the lock instead simply prevents\n   * other producers from writing in an interleaved manner.\n   */\n  releaseLock(): void {\n    if (!IsWritableStreamDefaultWriter(this)) {\n      throw defaultWriterBrandCheckException('releaseLock');\n    }\n\n    const stream = this._ownerWritableStream;\n\n    if (stream === undefined) {\n      return;\n    }\n\n    assert(stream._writer !== undefined);\n\n    WritableStreamDefaultWriterRelease(this);\n  }\n\n  /**\n   * Writes the given chunk to the writable stream, by waiting until any previous writes have finished successfully,\n   * and then sending the chunk to the underlying sink's {@link UnderlyingSink.write | write()} method. It will return\n   * a promise that fulfills with undefined upon a successful write, or rejects if the write fails or stream becomes\n   * errored before the writing process is initiated.\n   *\n   * Note that what \"success\" means is up to the underlying sink; it might indicate simply that the chunk has been\n   * accepted, and not necessarily that it is safely saved to its ultimate destination.\n   */\n  write(chunk: W): Promise<void>;\n  write(chunk: W = undefined!): Promise<void> {\n    if (!IsWritableStreamDefaultWriter(this)) {\n      return promiseRejectedWith(defaultWriterBrandCheckException('write'));\n    }\n\n    if (this._ownerWritableStream === undefined) {\n      return promiseRejectedWith(defaultWriterLockException('write to'));\n    }\n\n    return WritableStreamDefaultWriterWrite(this, chunk);\n  }\n}\n\nObject.defineProperties(WritableStreamDefaultWriter.prototype, {\n  abort: { enumerable: true },\n  close: { enumerable: true },\n  releaseLock: { enumerable: true },\n  write: { enumerable: true },\n  closed: { enumerable: true },\n  desiredSize: { enumerable: true },\n  ready: { enumerable: true }\n});\nif (typeof Symbol.toStringTag === 'symbol') {\n  Object.defineProperty(WritableStreamDefaultWriter.prototype, Symbol.toStringTag, {\n    value: 'WritableStreamDefaultWriter',\n    configurable: true\n  });\n}\n\n// Abstract operations for the WritableStreamDefaultWriter.\n\nfunction IsWritableStreamDefaultWriter<W = any>(x: any): x is WritableStreamDefaultWriter<W> {\n  if (!typeIsObject(x)) {\n    return false;\n  }\n\n  if (!Object.prototype.hasOwnProperty.call(x, '_ownerWritableStream')) {\n    return false;\n  }\n\n  return x instanceof WritableStreamDefaultWriter;\n}\n\n// A client of WritableStreamDefaultWriter may use these functions directly to bypass state check.\n\nfunction WritableStreamDefaultWriterAbort(writer: WritableStreamDefaultWriter, reason: any) {\n  const stream = writer._ownerWritableStream;\n\n  assert(stream !== undefined);\n\n  return WritableStreamAbort(stream, reason);\n}\n\nfunction WritableStreamDefaultWriterClose(writer: WritableStreamDefaultWriter): Promise<undefined> {\n  const stream = writer._ownerWritableStream;\n\n  assert(stream !== undefined);\n\n  return WritableStreamClose(stream);\n}\n\nfunction WritableStreamDefaultWriterCloseWithErrorPropagation(writer: WritableStreamDefaultWriter): Promise<undefined> {\n  const stream = writer._ownerWritableStream;\n\n  assert(stream !== undefined);\n\n  const state = stream._state;\n  if (WritableStreamCloseQueuedOrInFlight(stream) || state === 'closed') {\n    return promiseResolvedWith(undefined);\n  }\n\n  if (state === 'errored') {\n    return promiseRejectedWith(stream._storedError);\n  }\n\n  assert(state === 'writable' || state === 'erroring');\n\n  return WritableStreamDefaultWriterClose(writer);\n}\n\nfunction WritableStreamDefaultWriterEnsureClosedPromiseRejected(writer: WritableStreamDefaultWriter, error: any) {\n  if (writer._closedPromiseState === 'pending') {\n    defaultWriterClosedPromiseReject(writer, error);\n  } else {\n    defaultWriterClosedPromiseResetToRejected(writer, error);\n  }\n}\n\nfunction WritableStreamDefaultWriterEnsureReadyPromiseRejected(writer: WritableStreamDefaultWriter, error: any) {\n  if (writer._readyPromiseState === 'pending') {\n    defaultWriterReadyPromiseReject(writer, error);\n  } else {\n    defaultWriterReadyPromiseResetToRejected(writer, error);\n  }\n}\n\nfunction WritableStreamDefaultWriterGetDesiredSize(writer: WritableStreamDefaultWriter): number | null {\n  const stream = writer._ownerWritableStream;\n  const state = stream._state;\n\n  if (state === 'errored' || state === 'erroring') {\n    return null;\n  }\n\n  if (state === 'closed') {\n    return 0;\n  }\n\n  return WritableStreamDefaultControllerGetDesiredSize(stream._writableStreamController);\n}\n\nfunction WritableStreamDefaultWriterRelease(writer: WritableStreamDefaultWriter) {\n  const stream = writer._ownerWritableStream;\n  assert(stream !== undefined);\n  assert(stream._writer === writer);\n\n  const releasedError = new TypeError(\n    `Writer was released and can no longer be used to monitor the stream's closedness`);\n\n  WritableStreamDefaultWriterEnsureReadyPromiseRejected(writer, releasedError);\n\n  // The state transitions to \"errored\" before the sink abort() method runs, but the writer.closed promise is not\n  // rejected until afterwards. This means that simply testing state will not work.\n  WritableStreamDefaultWriterEnsureClosedPromiseRejected(writer, releasedError);\n\n  stream._writer = undefined;\n  writer._ownerWritableStream = undefined!;\n}\n\nfunction WritableStreamDefaultWriterWrite<W>(writer: WritableStreamDefaultWriter<W>, chunk: W): Promise<undefined> {\n  const stream = writer._ownerWritableStream;\n\n  assert(stream !== undefined);\n\n  const controller = stream._writableStreamController;\n\n  const chunkSize = WritableStreamDefaultControllerGetChunkSize(controller, chunk);\n\n  if (stream !== writer._ownerWritableStream) {\n    return promiseRejectedWith(defaultWriterLockException('write to'));\n  }\n\n  const state = stream._state;\n  if (state === 'errored') {\n    return promiseRejectedWith(stream._storedError);\n  }\n  if (WritableStreamCloseQueuedOrInFlight(stream) || state === 'closed') {\n    return promiseRejectedWith(new TypeError('The stream is closing or closed and cannot be written to'));\n  }\n  if (state === 'erroring') {\n    return promiseRejectedWith(stream._storedError);\n  }\n\n  assert(state === 'writable');\n\n  const promise = WritableStreamAddWriteRequest(stream);\n\n  WritableStreamDefaultControllerWrite(controller, chunk, chunkSize);\n\n  return promise;\n}\n\nconst closeSentinel: unique symbol = {} as any;\n\ntype QueueRecord<W> = W | typeof closeSentinel;\n\n/**\n * Allows control of a {@link WritableStream | writable stream}'s state and internal queue.\n *\n * @public\n */\nexport class WritableStreamDefaultController<W = any> {\n  /** @internal */\n  _controlledWritableStream!: WritableStream<W>;\n  /** @internal */\n  _queue!: SimpleQueue<QueuePair<QueueRecord<W>>>;\n  /** @internal */\n  _queueTotalSize!: number;\n  /** @internal */\n  _abortReason: any;\n  /** @internal */\n  _abortController: AbortController | undefined;\n  /** @internal */\n  _started!: boolean;\n  /** @internal */\n  _strategySizeAlgorithm!: QueuingStrategySizeCallback<W>;\n  /** @internal */\n  _strategyHWM!: number;\n  /** @internal */\n  _writeAlgorithm!: (chunk: W) => Promise<void>;\n  /** @internal */\n  _closeAlgorithm!: () => Promise<void>;\n  /** @internal */\n  _abortAlgorithm!: (reason: any) => Promise<void>;\n\n  private constructor() {\n    throw new TypeError('Illegal constructor');\n  }\n\n  /**\n   * The reason which was passed to `WritableStream.abort(reason)` when the stream was aborted.\n   *\n   * @deprecated\n   *  This property has been removed from the specification, see https://github.com/whatwg/streams/pull/1177.\n   *  Use {@link WritableStreamDefaultController.signal}'s `reason` instead.\n   */\n  get abortReason(): any {\n    if (!IsWritableStreamDefaultController(this)) {\n      throw defaultControllerBrandCheckException('abortReason');\n    }\n    return this._abortReason;\n  }\n\n  /**\n   * An `AbortSignal` that can be used to abort the pending write or close operation when the stream is aborted.\n   */\n  get signal(): AbortSignal {\n    if (!IsWritableStreamDefaultController(this)) {\n      throw defaultControllerBrandCheckException('signal');\n    }\n    if (this._abortController === undefined) {\n      // Older browsers or older Node versions may not support `AbortController` or `AbortSignal`.\n      // We don't want to bundle and ship an `AbortController` polyfill together with our polyfill,\n      // so instead we only implement support for `signal` if we find a global `AbortController` constructor.\n      throw new TypeError('WritableStreamDefaultController.prototype.signal is not supported');\n    }\n    return this._abortController.signal;\n  }\n\n  /**\n   * Closes the controlled writable stream, making all future interactions with it fail with the given error `e`.\n   *\n   * This method is rarely used, since usually it suffices to return a rejected promise from one of the underlying\n   * sink's methods. However, it can be useful for suddenly shutting down a stream in response to an event outside the\n   * normal lifecycle of interactions with the underlying sink.\n   */\n  error(e: any = undefined): void {\n    if (!IsWritableStreamDefaultController(this)) {\n      throw defaultControllerBrandCheckException('error');\n    }\n    const state = this._controlledWritableStream._state;\n    if (state !== 'writable') {\n      // The stream is closed, errored or will be soon. The sink can't do anything useful if it gets an error here, so\n      // just treat it as a no-op.\n      return;\n    }\n\n    WritableStreamDefaultControllerError(this, e);\n  }\n\n  /** @internal */\n  [AbortSteps](reason: any): Promise<void> {\n    const result = this._abortAlgorithm(reason);\n    WritableStreamDefaultControllerClearAlgorithms(this);\n    return result;\n  }\n\n  /** @internal */\n  [ErrorSteps]() {\n    ResetQueue(this);\n  }\n}\n\nObject.defineProperties(WritableStreamDefaultController.prototype, {\n  abortReason: { enumerable: true },\n  signal: { enumerable: true },\n  error: { enumerable: true }\n});\nif (typeof Symbol.toStringTag === 'symbol') {\n  Object.defineProperty(WritableStreamDefaultController.prototype, Symbol.toStringTag, {\n    value: 'WritableStreamDefaultController',\n    configurable: true\n  });\n}\n\n// Abstract operations implementing interface required by the WritableStream.\n\nfunction IsWritableStreamDefaultController(x: any): x is WritableStreamDefaultController<any> {\n  if (!typeIsObject(x)) {\n    return false;\n  }\n\n  if (!Object.prototype.hasOwnProperty.call(x, '_controlledWritableStream')) {\n    return false;\n  }\n\n  return x instanceof WritableStreamDefaultController;\n}\n\nfunction SetUpWritableStreamDefaultController<W>(stream: WritableStream<W>,\n                                                 controller: WritableStreamDefaultController<W>,\n                                                 startAlgorithm: () => void | PromiseLike<void>,\n                                                 writeAlgorithm: (chunk: W) => Promise<void>,\n                                                 closeAlgorithm: () => Promise<void>,\n                                                 abortAlgorithm: (reason: any) => Promise<void>,\n                                                 highWaterMark: number,\n                                                 sizeAlgorithm: QueuingStrategySizeCallback<W>) {\n  assert(IsWritableStream(stream));\n  assert(stream._writableStreamController === undefined);\n\n  controller._controlledWritableStream = stream;\n  stream._writableStreamController = controller;\n\n  // Need to set the slots so that the assert doesn't fire. In the spec the slots already exist implicitly.\n  controller._queue = undefined!;\n  controller._queueTotalSize = undefined!;\n  ResetQueue(controller);\n\n  controller._abortReason = undefined;\n  controller._abortController = createAbortController();\n  controller._started = false;\n\n  controller._strategySizeAlgorithm = sizeAlgorithm;\n  controller._strategyHWM = highWaterMark;\n\n  controller._writeAlgorithm = writeAlgorithm;\n  controller._closeAlgorithm = closeAlgorithm;\n  controller._abortAlgorithm = abortAlgorithm;\n\n  const backpressure = WritableStreamDefaultControllerGetBackpressure(controller);\n  WritableStreamUpdateBackpressure(stream, backpressure);\n\n  const startResult = startAlgorithm();\n  const startPromise = promiseResolvedWith(startResult);\n  uponPromise(\n    startPromise,\n    () => {\n      assert(stream._state === 'writable' || stream._state === 'erroring');\n      controller._started = true;\n      WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller);\n    },\n    r => {\n      assert(stream._state === 'writable' || stream._state === 'erroring');\n      controller._started = true;\n      WritableStreamDealWithRejection(stream, r);\n    }\n  );\n}\n\nfunction SetUpWritableStreamDefaultControllerFromUnderlyingSink<W>(stream: WritableStream<W>,\n                                                                   underlyingSink: ValidatedUnderlyingSink<W>,\n                                                                   highWaterMark: number,\n                                                                   sizeAlgorithm: QueuingStrategySizeCallback<W>) {\n  const controller = Object.create(WritableStreamDefaultController.prototype);\n\n  let startAlgorithm: () => void | PromiseLike<void> = () => undefined;\n  let writeAlgorithm: (chunk: W) => Promise<void> = () => promiseResolvedWith(undefined);\n  let closeAlgorithm: () => Promise<void> = () => promiseResolvedWith(undefined);\n  let abortAlgorithm: (reason: any) => Promise<void> = () => promiseResolvedWith(undefined);\n\n  if (underlyingSink.start !== undefined) {\n    startAlgorithm = () => underlyingSink.start!(controller);\n  }\n  if (underlyingSink.write !== undefined) {\n    writeAlgorithm = chunk => underlyingSink.write!(chunk, controller);\n  }\n  if (underlyingSink.close !== undefined) {\n    closeAlgorithm = () => underlyingSink.close!();\n  }\n  if (underlyingSink.abort !== undefined) {\n    abortAlgorithm = reason => underlyingSink.abort!(reason);\n  }\n\n  SetUpWritableStreamDefaultController(\n    stream, controller, startAlgorithm, writeAlgorithm, closeAlgorithm, abortAlgorithm, highWaterMark, sizeAlgorithm\n  );\n}\n\n// ClearAlgorithms may be called twice. Erroring the same stream in multiple ways will often result in redundant calls.\nfunction WritableStreamDefaultControllerClearAlgorithms(controller: WritableStreamDefaultController<any>) {\n  controller._writeAlgorithm = undefined!;\n  controller._closeAlgorithm = undefined!;\n  controller._abortAlgorithm = undefined!;\n  controller._strategySizeAlgorithm = undefined!;\n}\n\nfunction WritableStreamDefaultControllerClose<W>(controller: WritableStreamDefaultController<W>) {\n  EnqueueValueWithSize(controller, closeSentinel, 0);\n  WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller);\n}\n\nfunction WritableStreamDefaultControllerGetChunkSize<W>(controller: WritableStreamDefaultController<W>,\n                                                        chunk: W): number {\n  try {\n    return controller._strategySizeAlgorithm(chunk);\n  } catch (chunkSizeE) {\n    WritableStreamDefaultControllerErrorIfNeeded(controller, chunkSizeE);\n    return 1;\n  }\n}\n\nfunction WritableStreamDefaultControllerGetDesiredSize(controller: WritableStreamDefaultController<any>): number {\n  return controller._strategyHWM - controller._queueTotalSize;\n}\n\nfunction WritableStreamDefaultControllerWrite<W>(controller: WritableStreamDefaultController<W>,\n                                                 chunk: W,\n                                                 chunkSize: number) {\n  try {\n    EnqueueValueWithSize(controller, chunk, chunkSize);\n  } catch (enqueueE) {\n    WritableStreamDefaultControllerErrorIfNeeded(controller, enqueueE);\n    return;\n  }\n\n  const stream = controller._controlledWritableStream;\n  if (!WritableStreamCloseQueuedOrInFlight(stream) && stream._state === 'writable') {\n    const backpressure = WritableStreamDefaultControllerGetBackpressure(controller);\n    WritableStreamUpdateBackpressure(stream, backpressure);\n  }\n\n  WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller);\n}\n\n// Abstract operations for the WritableStreamDefaultController.\n\nfunction WritableStreamDefaultControllerAdvanceQueueIfNeeded<W>(controller: WritableStreamDefaultController<W>) {\n  const stream = controller._controlledWritableStream;\n\n  if (!controller._started) {\n    return;\n  }\n\n  if (stream._inFlightWriteRequest !== undefined) {\n    return;\n  }\n\n  const state = stream._state;\n  assert(state !== 'closed' && state !== 'errored');\n  if (state === 'erroring') {\n    WritableStreamFinishErroring(stream);\n    return;\n  }\n\n  if (controller._queue.length === 0) {\n    return;\n  }\n\n  const value = PeekQueueValue(controller);\n  if (value === closeSentinel) {\n    WritableStreamDefaultControllerProcessClose(controller);\n  } else {\n    WritableStreamDefaultControllerProcessWrite(controller, value);\n  }\n}\n\nfunction WritableStreamDefaultControllerErrorIfNeeded(controller: WritableStreamDefaultController<any>, error: any) {\n  if (controller._controlledWritableStream._state === 'writable') {\n    WritableStreamDefaultControllerError(controller, error);\n  }\n}\n\nfunction WritableStreamDefaultControllerProcessClose(controller: WritableStreamDefaultController<any>) {\n  const stream = controller._controlledWritableStream;\n\n  WritableStreamMarkCloseRequestInFlight(stream);\n\n  DequeueValue(controller);\n  assert(controller._queue.length === 0);\n\n  const sinkClosePromise = controller._closeAlgorithm();\n  WritableStreamDefaultControllerClearAlgorithms(controller);\n  uponPromise(\n    sinkClosePromise,\n    () => {\n      WritableStreamFinishInFlightClose(stream);\n    },\n    reason => {\n      WritableStreamFinishInFlightCloseWithError(stream, reason);\n    }\n  );\n}\n\nfunction WritableStreamDefaultControllerProcessWrite<W>(controller: WritableStreamDefaultController<W>, chunk: W) {\n  const stream = controller._controlledWritableStream;\n\n  WritableStreamMarkFirstWriteRequestInFlight(stream);\n\n  const sinkWritePromise = controller._writeAlgorithm(chunk);\n  uponPromise(\n    sinkWritePromise,\n    () => {\n      WritableStreamFinishInFlightWrite(stream);\n\n      const state = stream._state;\n      assert(state === 'writable' || state === 'erroring');\n\n      DequeueValue(controller);\n\n      if (!WritableStreamCloseQueuedOrInFlight(stream) && state === 'writable') {\n        const backpressure = WritableStreamDefaultControllerGetBackpressure(controller);\n        WritableStreamUpdateBackpressure(stream, backpressure);\n      }\n\n      WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller);\n    },\n    reason => {\n      if (stream._state === 'writable') {\n        WritableStreamDefaultControllerClearAlgorithms(controller);\n      }\n      WritableStreamFinishInFlightWriteWithError(stream, reason);\n    }\n  );\n}\n\nfunction WritableStreamDefaultControllerGetBackpressure(controller: WritableStreamDefaultController<any>): boolean {\n  const desiredSize = WritableStreamDefaultControllerGetDesiredSize(controller);\n  return desiredSize <= 0;\n}\n\n// A client of WritableStreamDefaultController may use these functions directly to bypass state check.\n\nfunction WritableStreamDefaultControllerError(controller: WritableStreamDefaultController<any>, error: any) {\n  const stream = controller._controlledWritableStream;\n\n  assert(stream._state === 'writable');\n\n  WritableStreamDefaultControllerClearAlgorithms(controller);\n  WritableStreamStartErroring(stream, error);\n}\n\n// Helper functions for the WritableStream.\n\nfunction streamBrandCheckException(name: string): TypeError {\n  return new TypeError(`WritableStream.prototype.${name} can only be used on a WritableStream`);\n}\n\n// Helper functions for the WritableStreamDefaultController.\n\nfunction defaultControllerBrandCheckException(name: string): TypeError {\n  return new TypeError(\n    `WritableStreamDefaultController.prototype.${name} can only be used on a WritableStreamDefaultController`);\n}\n\n\n// Helper functions for the WritableStreamDefaultWriter.\n\nfunction defaultWriterBrandCheckException(name: string): TypeError {\n  return new TypeError(\n    `WritableStreamDefaultWriter.prototype.${name} can only be used on a WritableStreamDefaultWriter`);\n}\n\nfunction defaultWriterLockException(name: string): TypeError {\n  return new TypeError('Cannot ' + name + ' a stream using a released writer');\n}\n\nfunction defaultWriterClosedPromiseInitialize(writer: WritableStreamDefaultWriter) {\n  writer._closedPromise = newPromise((resolve, reject) => {\n    writer._closedPromise_resolve = resolve;\n    writer._closedPromise_reject = reject;\n    writer._closedPromiseState = 'pending';\n  });\n}\n\nfunction defaultWriterClosedPromiseInitializeAsRejected(writer: WritableStreamDefaultWriter, reason: any) {\n  defaultWriterClosedPromiseInitialize(writer);\n  defaultWriterClosedPromiseReject(writer, reason);\n}\n\nfunction defaultWriterClosedPromiseInitializeAsResolved(writer: WritableStreamDefaultWriter) {\n  defaultWriterClosedPromiseInitialize(writer);\n  defaultWriterClosedPromiseResolve(writer);\n}\n\nfunction defaultWriterClosedPromiseReject(writer: WritableStreamDefaultWriter, reason: any) {\n  if (writer._closedPromise_reject === undefined) {\n    return;\n  }\n  assert(writer._closedPromiseState === 'pending');\n\n  setPromiseIsHandledToTrue(writer._closedPromise);\n  writer._closedPromise_reject(reason);\n  writer._closedPromise_resolve = undefined;\n  writer._closedPromise_reject = undefined;\n  writer._closedPromiseState = 'rejected';\n}\n\nfunction defaultWriterClosedPromiseResetToRejected(writer: WritableStreamDefaultWriter, reason: any) {\n  assert(writer._closedPromise_resolve === undefined);\n  assert(writer._closedPromise_reject === undefined);\n  assert(writer._closedPromiseState !== 'pending');\n\n  defaultWriterClosedPromiseInitializeAsRejected(writer, reason);\n}\n\nfunction defaultWriterClosedPromiseResolve(writer: WritableStreamDefaultWriter) {\n  if (writer._closedPromise_resolve === undefined) {\n    return;\n  }\n  assert(writer._closedPromiseState === 'pending');\n\n  writer._closedPromise_resolve(undefined);\n  writer._closedPromise_resolve = undefined;\n  writer._closedPromise_reject = undefined;\n  writer._closedPromiseState = 'resolved';\n}\n\nfunction defaultWriterReadyPromiseInitialize(writer: WritableStreamDefaultWriter) {\n  writer._readyPromise = newPromise((resolve, reject) => {\n    writer._readyPromise_resolve = resolve;\n    writer._readyPromise_reject = reject;\n  });\n  writer._readyPromiseState = 'pending';\n}\n\nfunction defaultWriterReadyPromiseInitializeAsRejected(writer: WritableStreamDefaultWriter, reason: any) {\n  defaultWriterReadyPromiseInitialize(writer);\n  defaultWriterReadyPromiseReject(writer, reason);\n}\n\nfunction defaultWriterReadyPromiseInitializeAsResolved(writer: WritableStreamDefaultWriter) {\n  defaultWriterReadyPromiseInitialize(writer);\n  defaultWriterReadyPromiseResolve(writer);\n}\n\nfunction defaultWriterReadyPromiseReject(writer: WritableStreamDefaultWriter, reason: any) {\n  if (writer._readyPromise_reject === undefined) {\n    return;\n  }\n\n  setPromiseIsHandledToTrue(writer._readyPromise);\n  writer._readyPromise_reject(reason);\n  writer._readyPromise_resolve = undefined;\n  writer._readyPromise_reject = undefined;\n  writer._readyPromiseState = 'rejected';\n}\n\nfunction defaultWriterReadyPromiseReset(writer: WritableStreamDefaultWriter) {\n  assert(writer._readyPromise_resolve === undefined);\n  assert(writer._readyPromise_reject === undefined);\n\n  defaultWriterReadyPromiseInitialize(writer);\n}\n\nfunction defaultWriterReadyPromiseResetToRejected(writer: WritableStreamDefaultWriter, reason: any) {\n  assert(writer._readyPromise_resolve === undefined);\n  assert(writer._readyPromise_reject === undefined);\n\n  defaultWriterReadyPromiseInitializeAsRejected(writer, reason);\n}\n\nfunction defaultWriterReadyPromiseResolve(writer: WritableStreamDefaultWriter) {\n  if (writer._readyPromise_resolve === undefined) {\n    return;\n  }\n\n  writer._readyPromise_resolve(undefined);\n  writer._readyPromise_resolve = undefined;\n  writer._readyPromise_reject = undefined;\n  writer._readyPromiseState = 'fulfilled';\n}\n","/// <reference lib=\"dom\" />\nexport const NativeDOMException: typeof DOMException | undefined =\n  typeof DOMException !== 'undefined' ? DOMException : undefined;\n","/// <reference types=\"node\" />\nimport { NativeDOMException } from './native';\n\ndeclare class DOMExceptionClass extends Error {\n  constructor(message?: string, name?: string);\n\n  name: string;\n  message: string;\n}\n\ntype DOMException = DOMExceptionClass;\ntype DOMExceptionConstructor = typeof DOMExceptionClass;\n\nfunction isDOMExceptionConstructor(ctor: unknown): ctor is DOMExceptionConstructor {\n  if (!(typeof ctor === 'function' || typeof ctor === 'object')) {\n    return false;\n  }\n  try {\n    new (ctor as DOMExceptionConstructor)();\n    return true;\n  } catch {\n    return false;\n  }\n}\n\nfunction createDOMExceptionPolyfill(): DOMExceptionConstructor {\n  // eslint-disable-next-line no-shadow\n  const ctor = function DOMException(this: DOMException, message?: string, name?: string) {\n    this.message = message || '';\n    this.name = name || 'Error';\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, this.constructor);\n    }\n  } as any;\n  ctor.prototype = Object.create(Error.prototype);\n  Object.defineProperty(ctor.prototype, 'constructor', { value: ctor, writable: true, configurable: true });\n  return ctor;\n}\n\n// eslint-disable-next-line no-redeclare\nconst DOMException: DOMExceptionConstructor =\n  isDOMExceptionConstructor(NativeDOMException) ? NativeDOMException : createDOMExceptionPolyfill();\n\nexport { DOMException };\n","import { IsReadableStream, IsReadableStreamLocked, ReadableStream, ReadableStreamCancel } from '../readable-stream';\nimport { AcquireReadableStreamDefaultReader, ReadableStreamDefaultReaderRead } from './default-reader';\nimport { ReadableStreamReaderGenericRelease } from './generic-reader';\nimport {\n  AcquireWritableStreamDefaultWriter,\n  IsWritableStream,\n  IsWritableStreamLocked,\n  WritableStream,\n  WritableStreamAbort,\n  WritableStreamCloseQueuedOrInFlight,\n  WritableStreamDefaultWriterCloseWithErrorPropagation,\n  WritableStreamDefaultWriterRelease,\n  WritableStreamDefaultWriterWrite\n} from '../writable-stream';\nimport assert from '../../stub/assert';\nimport {\n  newPromise,\n  PerformPromiseThen,\n  promiseResolvedWith,\n  setPromiseIsHandledToTrue,\n  uponFulfillment,\n  uponPromise,\n  uponRejection\n} from '../helpers/webidl';\nimport { noop } from '../../utils';\nimport { AbortSignal, isAbortSignal } from '../abort-signal';\nimport { DOMException } from '../../stub/dom-exception';\n\nexport function ReadableStreamPipeTo<T>(source: ReadableStream<T>,\n                                        dest: WritableStream<T>,\n                                        preventClose: boolean,\n                                        preventAbort: boolean,\n                                        preventCancel: boolean,\n                                        signal: AbortSignal | undefined): Promise<undefined> {\n  assert(IsReadableStream(source));\n  assert(IsWritableStream(dest));\n  assert(typeof preventClose === 'boolean');\n  assert(typeof preventAbort === 'boolean');\n  assert(typeof preventCancel === 'boolean');\n  assert(signal === undefined || isAbortSignal(signal));\n  assert(!IsReadableStreamLocked(source));\n  assert(!IsWritableStreamLocked(dest));\n\n  const reader = AcquireReadableStreamDefaultReader<T>(source);\n  const writer = AcquireWritableStreamDefaultWriter<T>(dest);\n\n  source._disturbed = true;\n\n  let shuttingDown = false;\n\n  // This is used to keep track of the spec's requirement that we wait for ongoing writes during shutdown.\n  let currentWrite = promiseResolvedWith<void>(undefined);\n\n  return newPromise((resolve, reject) => {\n    let abortAlgorithm: () => void;\n    if (signal !== undefined) {\n      abortAlgorithm = () => {\n        const error = new DOMException('Aborted', 'AbortError');\n        const actions: Array<() => Promise<void>> = [];\n        if (!preventAbort) {\n          actions.push(() => {\n            if (dest._state === 'writable') {\n              return WritableStreamAbort(dest, error);\n            }\n            return promiseResolvedWith(undefined);\n          });\n        }\n        if (!preventCancel) {\n          actions.push(() => {\n            if (source._state === 'readable') {\n              return ReadableStreamCancel(source, error);\n            }\n            return promiseResolvedWith(undefined);\n          });\n        }\n        shutdownWithAction(() => Promise.all(actions.map(action => action())), true, error);\n      };\n\n      if (signal.aborted) {\n        abortAlgorithm();\n        return;\n      }\n\n      signal.addEventListener('abort', abortAlgorithm);\n    }\n\n    // Using reader and writer, read all chunks from this and write them to dest\n    // - Backpressure must be enforced\n    // - Shutdown must stop all activity\n    function pipeLoop() {\n      return newPromise<void>((resolveLoop, rejectLoop) => {\n        function next(done: boolean) {\n          if (done) {\n            resolveLoop();\n          } else {\n            // Use `PerformPromiseThen` instead of `uponPromise` to avoid\n            // adding unnecessary `.catch(rethrowAssertionErrorRejection)` handlers\n            PerformPromiseThen(pipeStep(), next, rejectLoop);\n          }\n        }\n\n        next(false);\n      });\n    }\n\n    function pipeStep(): Promise<boolean> {\n      if (shuttingDown) {\n        return promiseResolvedWith(true);\n      }\n\n      return PerformPromiseThen(writer._readyPromise, () => {\n        return newPromise<boolean>((resolveRead, rejectRead) => {\n          ReadableStreamDefaultReaderRead(\n            reader,\n            {\n              _chunkSteps: chunk => {\n                currentWrite = PerformPromiseThen(WritableStreamDefaultWriterWrite(writer, chunk), undefined, noop);\n                resolveRead(false);\n              },\n              _closeSteps: () => resolveRead(true),\n              _errorSteps: rejectRead\n            }\n          );\n        });\n      });\n    }\n\n    // Errors must be propagated forward\n    isOrBecomesErrored(source, reader._closedPromise, storedError => {\n      if (!preventAbort) {\n        shutdownWithAction(() => WritableStreamAbort(dest, storedError), true, storedError);\n      } else {\n        shutdown(true, storedError);\n      }\n    });\n\n    // Errors must be propagated backward\n    isOrBecomesErrored(dest, writer._closedPromise, storedError => {\n      if (!preventCancel) {\n        shutdownWithAction(() => ReadableStreamCancel(source, storedError), true, storedError);\n      } else {\n        shutdown(true, storedError);\n      }\n    });\n\n    // Closing must be propagated forward\n    isOrBecomesClosed(source, reader._closedPromise, () => {\n      if (!preventClose) {\n        shutdownWithAction(() => WritableStreamDefaultWriterCloseWithErrorPropagation(writer));\n      } else {\n        shutdown();\n      }\n    });\n\n    // Closing must be propagated backward\n    if (WritableStreamCloseQueuedOrInFlight(dest) || dest._state === 'closed') {\n      const destClosed = new TypeError('the destination writable stream closed before all data could be piped to it');\n\n      if (!preventCancel) {\n        shutdownWithAction(() => ReadableStreamCancel(source, destClosed), true, destClosed);\n      } else {\n        shutdown(true, destClosed);\n      }\n    }\n\n    setPromiseIsHandledToTrue(pipeLoop());\n\n    function waitForWritesToFinish(): Promise<void> {\n      // Another write may have started while we were waiting on this currentWrite, so we have to be sure to wait\n      // for that too.\n      const oldCurrentWrite = currentWrite;\n      return PerformPromiseThen(\n        currentWrite,\n        () => oldCurrentWrite !== currentWrite ? waitForWritesToFinish() : undefined\n      );\n    }\n\n    function isOrBecomesErrored(stream: ReadableStream | WritableStream,\n                                promise: Promise<void>,\n                                action: (reason: any) => void) {\n      if (stream._state === 'errored') {\n        action(stream._storedError);\n      } else {\n        uponRejection(promise, action);\n      }\n    }\n\n    function isOrBecomesClosed(stream: ReadableStream | WritableStream, promise: Promise<void>, action: () => void) {\n      if (stream._state === 'closed') {\n        action();\n      } else {\n        uponFulfillment(promise, action);\n      }\n    }\n\n    function shutdownWithAction(action: () => Promise<unknown>, originalIsError?: boolean, originalError?: any) {\n      if (shuttingDown) {\n        return;\n      }\n      shuttingDown = true;\n\n      if (dest._state === 'writable' && !WritableStreamCloseQueuedOrInFlight(dest)) {\n        uponFulfillment(waitForWritesToFinish(), doTheRest);\n      } else {\n        doTheRest();\n      }\n\n      function doTheRest() {\n        uponPromise(\n          action(),\n          () => finalize(originalIsError, originalError),\n          newError => finalize(true, newError)\n        );\n      }\n    }\n\n    function shutdown(isError?: boolean, error?: any) {\n      if (shuttingDown) {\n        return;\n      }\n      shuttingDown = true;\n\n      if (dest._state === 'writable' && !WritableStreamCloseQueuedOrInFlight(dest)) {\n        uponFulfillment(waitForWritesToFinish(), () => finalize(isError, error));\n      } else {\n        finalize(isError, error);\n      }\n    }\n\n    function finalize(isError?: boolean, error?: any) {\n      WritableStreamDefaultWriterRelease(writer);\n      ReadableStreamReaderGenericRelease(reader);\n\n      if (signal !== undefined) {\n        signal.removeEventListener('abort', abortAlgorithm);\n      }\n      if (isError) {\n        reject(error);\n      } else {\n        resolve(undefined);\n      }\n    }\n  });\n}\n","import { QueuingStrategySizeCallback } from '../queuing-strategy';\nimport assert from '../../stub/assert';\nimport { DequeueValue, EnqueueValueWithSize, QueuePair, ResetQueue } from '../abstract-ops/queue-with-sizes';\nimport {\n  ReadableStreamAddReadRequest,\n  ReadableStreamFulfillReadRequest,\n  ReadableStreamGetNumReadRequests,\n  ReadRequest\n} from './default-reader';\nimport { SimpleQueue } from '../simple-queue';\nimport { IsReadableStreamLocked, ReadableStream, ReadableStreamClose, ReadableStreamError } from '../readable-stream';\nimport { ValidatedUnderlyingSource } from './underlying-source';\nimport { typeIsObject } from '../helpers/miscellaneous';\nimport { CancelSteps, PullSteps } from '../abstract-ops/internal-methods';\nimport { promiseResolvedWith, uponPromise } from '../helpers/webidl';\n\n/**\n * Allows control of a {@link ReadableStream | readable stream}'s state and internal queue.\n *\n * @public\n */\nexport class ReadableStreamDefaultController<R> {\n  /** @internal */\n  _controlledReadableStream!: ReadableStream<R>;\n  /** @internal */\n  _queue!: SimpleQueue<QueuePair<R>>;\n  /** @internal */\n  _queueTotalSize!: number;\n  /** @internal */\n  _started!: boolean;\n  /** @internal */\n  _closeRequested!: boolean;\n  /** @internal */\n  _pullAgain!: boolean;\n  /** @internal */\n  _pulling !: boolean;\n  /** @internal */\n  _strategySizeAlgorithm!: QueuingStrategySizeCallback<R>;\n  /** @internal */\n  _strategyHWM!: number;\n  /** @internal */\n  _pullAlgorithm!: () => Promise<void>;\n  /** @internal */\n  _cancelAlgorithm!: (reason: any) => Promise<void>;\n\n  private constructor() {\n    throw new TypeError('Illegal constructor');\n  }\n\n  /**\n   * Returns the desired size to fill the controlled stream's internal queue. It can be negative, if the queue is\n   * over-full. An underlying source ought to use this information to determine when and how to apply backpressure.\n   */\n  get desiredSize(): number | null {\n    if (!IsReadableStreamDefaultController(this)) {\n      throw defaultControllerBrandCheckException('desiredSize');\n    }\n\n    return ReadableStreamDefaultControllerGetDesiredSize(this);\n  }\n\n  /**\n   * Closes the controlled readable stream. Consumers will still be able to read any previously-enqueued chunks from\n   * the stream, but once those are read, the stream will become closed.\n   */\n  close(): void {\n    if (!IsReadableStreamDefaultController(this)) {\n      throw defaultControllerBrandCheckException('close');\n    }\n\n    if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(this)) {\n      throw new TypeError('The stream is not in a state that permits close');\n    }\n\n    ReadableStreamDefaultControllerClose(this);\n  }\n\n  /**\n   * Enqueues the given chunk `chunk` in the controlled readable stream.\n   */\n  enqueue(chunk: R): void;\n  enqueue(chunk: R = undefined!): void {\n    if (!IsReadableStreamDefaultController(this)) {\n      throw defaultControllerBrandCheckException('enqueue');\n    }\n\n    if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(this)) {\n      throw new TypeError('The stream is not in a state that permits enqueue');\n    }\n\n    return ReadableStreamDefaultControllerEnqueue(this, chunk);\n  }\n\n  /**\n   * Errors the controlled readable stream, making all future interactions with it fail with the given error `e`.\n   */\n  error(e: any = undefined): void {\n    if (!IsReadableStreamDefaultController(this)) {\n      throw defaultControllerBrandCheckException('error');\n    }\n\n    ReadableStreamDefaultControllerError(this, e);\n  }\n\n  /** @internal */\n  [CancelSteps](reason: any): Promise<void> {\n    ResetQueue(this);\n    const result = this._cancelAlgorithm(reason);\n    ReadableStreamDefaultControllerClearAlgorithms(this);\n    return result;\n  }\n\n  /** @internal */\n  [PullSteps](readRequest: ReadRequest<R>): void {\n    const stream = this._controlledReadableStream;\n\n    if (this._queue.length > 0) {\n      const chunk = DequeueValue(this);\n\n      if (this._closeRequested && this._queue.length === 0) {\n        ReadableStreamDefaultControllerClearAlgorithms(this);\n        ReadableStreamClose(stream);\n      } else {\n        ReadableStreamDefaultControllerCallPullIfNeeded(this);\n      }\n\n      readRequest._chunkSteps(chunk);\n    } else {\n      ReadableStreamAddReadRequest(stream, readRequest);\n      ReadableStreamDefaultControllerCallPullIfNeeded(this);\n    }\n  }\n}\n\nObject.defineProperties(ReadableStreamDefaultController.prototype, {\n  close: { enumerable: true },\n  enqueue: { enumerable: true },\n  error: { enumerable: true },\n  desiredSize: { enumerable: true }\n});\nif (typeof Symbol.toStringTag === 'symbol') {\n  Object.defineProperty(ReadableStreamDefaultController.prototype, Symbol.toStringTag, {\n    value: 'ReadableStreamDefaultController',\n    configurable: true\n  });\n}\n\n// Abstract operations for the ReadableStreamDefaultController.\n\nfunction IsReadableStreamDefaultController<R = any>(x: any): x is ReadableStreamDefaultController<R> {\n  if (!typeIsObject(x)) {\n    return false;\n  }\n\n  if (!Object.prototype.hasOwnProperty.call(x, '_controlledReadableStream')) {\n    return false;\n  }\n\n  return x instanceof ReadableStreamDefaultController;\n}\n\nfunction ReadableStreamDefaultControllerCallPullIfNeeded(controller: ReadableStreamDefaultController<any>): void {\n  const shouldPull = ReadableStreamDefaultControllerShouldCallPull(controller);\n  if (!shouldPull) {\n    return;\n  }\n\n  if (controller._pulling) {\n    controller._pullAgain = true;\n    return;\n  }\n\n  assert(!controller._pullAgain);\n\n  controller._pulling = true;\n\n  const pullPromise = controller._pullAlgorithm();\n  uponPromise(\n    pullPromise,\n    () => {\n      controller._pulling = false;\n\n      if (controller._pullAgain) {\n        controller._pullAgain = false;\n        ReadableStreamDefaultControllerCallPullIfNeeded(controller);\n      }\n    },\n    e => {\n      ReadableStreamDefaultControllerError(controller, e);\n    }\n  );\n}\n\nfunction ReadableStreamDefaultControllerShouldCallPull(controller: ReadableStreamDefaultController<any>): boolean {\n  const stream = controller._controlledReadableStream;\n\n  if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(controller)) {\n    return false;\n  }\n\n  if (!controller._started) {\n    return false;\n  }\n\n  if (IsReadableStreamLocked(stream) && ReadableStreamGetNumReadRequests(stream) > 0) {\n    return true;\n  }\n\n  const desiredSize = ReadableStreamDefaultControllerGetDesiredSize(controller);\n  assert(desiredSize !== null);\n  if (desiredSize! > 0) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction ReadableStreamDefaultControllerClearAlgorithms(controller: ReadableStreamDefaultController<any>) {\n  controller._pullAlgorithm = undefined!;\n  controller._cancelAlgorithm = undefined!;\n  controller._strategySizeAlgorithm = undefined!;\n}\n\n// A client of ReadableStreamDefaultController may use these functions directly to bypass state check.\n\nexport function ReadableStreamDefaultControllerClose(controller: ReadableStreamDefaultController<any>) {\n  if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(controller)) {\n    return;\n  }\n\n  const stream = controller._controlledReadableStream;\n\n  controller._closeRequested = true;\n\n  if (controller._queue.length === 0) {\n    ReadableStreamDefaultControllerClearAlgorithms(controller);\n    ReadableStreamClose(stream);\n  }\n}\n\nexport function ReadableStreamDefaultControllerEnqueue<R>(\n  controller: ReadableStreamDefaultController<R>,\n  chunk: R\n): void {\n  if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(controller)) {\n    return;\n  }\n\n  const stream = controller._controlledReadableStream;\n\n  if (IsReadableStreamLocked(stream) && ReadableStreamGetNumReadRequests(stream) > 0) {\n    ReadableStreamFulfillReadRequest(stream, chunk, false);\n  } else {\n    let chunkSize;\n    try {\n      chunkSize = controller._strategySizeAlgorithm(chunk);\n    } catch (chunkSizeE) {\n      ReadableStreamDefaultControllerError(controller, chunkSizeE);\n      throw chunkSizeE;\n    }\n\n    try {\n      EnqueueValueWithSize(controller, chunk, chunkSize);\n    } catch (enqueueE) {\n      ReadableStreamDefaultControllerError(controller, enqueueE);\n      throw enqueueE;\n    }\n  }\n\n  ReadableStreamDefaultControllerCallPullIfNeeded(controller);\n}\n\nexport function ReadableStreamDefaultControllerError(controller: ReadableStreamDefaultController<any>, e: any) {\n  const stream = controller._controlledReadableStream;\n\n  if (stream._state !== 'readable') {\n    return;\n  }\n\n  ResetQueue(controller);\n\n  ReadableStreamDefaultControllerClearAlgorithms(controller);\n  ReadableStreamError(stream, e);\n}\n\nexport function ReadableStreamDefaultControllerGetDesiredSize(\n  controller: ReadableStreamDefaultController<any>\n): number | null {\n  const state = controller._controlledReadableStream._state;\n\n  if (state === 'errored') {\n    return null;\n  }\n  if (state === 'closed') {\n    return 0;\n  }\n\n  return controller._strategyHWM - controller._queueTotalSize;\n}\n\n// This is used in the implementation of TransformStream.\nexport function ReadableStreamDefaultControllerHasBackpressure(\n  controller: ReadableStreamDefaultController<any>\n): boolean {\n  if (ReadableStreamDefaultControllerShouldCallPull(controller)) {\n    return false;\n  }\n\n  return true;\n}\n\nexport function ReadableStreamDefaultControllerCanCloseOrEnqueue(\n  controller: ReadableStreamDefaultController<any>\n): boolean {\n  const state = controller._controlledReadableStream._state;\n\n  if (!controller._closeRequested && state === 'readable') {\n    return true;\n  }\n\n  return false;\n}\n\nexport function SetUpReadableStreamDefaultController<R>(stream: ReadableStream<R>,\n                                                        controller: ReadableStreamDefaultController<R>,\n                                                        startAlgorithm: () => void | PromiseLike<void>,\n                                                        pullAlgorithm: () => Promise<void>,\n                                                        cancelAlgorithm: (reason: any) => Promise<void>,\n                                                        highWaterMark: number,\n                                                        sizeAlgorithm: QueuingStrategySizeCallback<R>) {\n  assert(stream._readableStreamController === undefined);\n\n  controller._controlledReadableStream = stream;\n\n  controller._queue = undefined!;\n  controller._queueTotalSize = undefined!;\n  ResetQueue(controller);\n\n  controller._started = false;\n  controller._closeRequested = false;\n  controller._pullAgain = false;\n  controller._pulling = false;\n\n  controller._strategySizeAlgorithm = sizeAlgorithm;\n  controller._strategyHWM = highWaterMark;\n\n  controller._pullAlgorithm = pullAlgorithm;\n  controller._cancelAlgorithm = cancelAlgorithm;\n\n  stream._readableStreamController = controller;\n\n  const startResult = startAlgorithm();\n  uponPromise(\n    promiseResolvedWith(startResult),\n    () => {\n      controller._started = true;\n\n      assert(!controller._pulling);\n      assert(!controller._pullAgain);\n\n      ReadableStreamDefaultControllerCallPullIfNeeded(controller);\n    },\n    r => {\n      ReadableStreamDefaultControllerError(controller, r);\n    }\n  );\n}\n\nexport function SetUpReadableStreamDefaultControllerFromUnderlyingSource<R>(\n  stream: ReadableStream<R>,\n  underlyingSource: ValidatedUnderlyingSource<R>,\n  highWaterMark: number,\n  sizeAlgorithm: QueuingStrategySizeCallback<R>\n) {\n  const controller: ReadableStreamDefaultController<R> = Object.create(ReadableStreamDefaultController.prototype);\n\n  let startAlgorithm: () => void | PromiseLike<void> = () => undefined;\n  let pullAlgorithm: () => Promise<void> = () => promiseResolvedWith(undefined);\n  let cancelAlgorithm: (reason: any) => Promise<void> = () => promiseResolvedWith(undefined);\n\n  if (underlyingSource.start !== undefined) {\n    startAlgorithm = () => underlyingSource.start!(controller);\n  }\n  if (underlyingSource.pull !== undefined) {\n    pullAlgorithm = () => underlyingSource.pull!(controller);\n  }\n  if (underlyingSource.cancel !== undefined) {\n    cancelAlgorithm = reason => underlyingSource.cancel!(reason);\n  }\n\n  SetUpReadableStreamDefaultController(\n    stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark, sizeAlgorithm\n  );\n}\n\n// Helper functions for the ReadableStreamDefaultController.\n\nfunction defaultControllerBrandCheckException(name: string): TypeError {\n  return new TypeError(\n    `ReadableStreamDefaultController.prototype.${name} can only be used on a ReadableStreamDefaultController`);\n}\n","import {\n  CreateReadableByteStream,\n  CreateReadableStream,\n  IsReadableStream,\n  ReadableByteStream,\n  ReadableStream,\n  ReadableStreamCancel,\n  ReadableStreamReader\n} from '../readable-stream';\nimport { ReadableStreamReaderGenericRelease } from './generic-reader';\nimport {\n  AcquireReadableStreamDefaultReader,\n  IsReadableStreamDefaultReader,\n  ReadableStreamDefaultReaderRead,\n  ReadRequest\n} from './default-reader';\nimport {\n  AcquireReadableStreamBYOBReader,\n  IsReadableStreamBYOBReader,\n  ReadableStreamBYOBReaderRead,\n  ReadIntoRequest\n} from './byob-reader';\nimport assert from '../../stub/assert';\nimport { newPromise, promiseResolvedWith, queueMicrotask, uponRejection } from '../helpers/webidl';\nimport {\n  ReadableStreamDefaultController,\n  ReadableStreamDefaultControllerClose,\n  ReadableStreamDefaultControllerEnqueue,\n  ReadableStreamDefaultControllerError\n} from './default-controller';\nimport {\n  IsReadableByteStreamController,\n  ReadableByteStreamControllerClose,\n  ReadableByteStreamControllerEnqueue,\n  ReadableByteStreamControllerError,\n  ReadableByteStreamControllerGetBYOBRequest,\n  ReadableByteStreamControllerRespond,\n  ReadableByteStreamControllerRespondWithNewView\n} from './byte-stream-controller';\nimport { CreateArrayFromList } from '../abstract-ops/ecmascript';\nimport { CloneAsUint8Array } from '../abstract-ops/miscellaneous';\n\nexport function ReadableStreamTee<R>(stream: ReadableStream<R>,\n                                     cloneForBranch2: boolean): [ReadableStream<R>, ReadableStream<R>] {\n  assert(IsReadableStream(stream));\n  assert(typeof cloneForBranch2 === 'boolean');\n  if (IsReadableByteStreamController(stream._readableStreamController)) {\n    return ReadableByteStreamTee(stream as unknown as ReadableByteStream) as\n      unknown as [ReadableStream<R>, ReadableStream<R>];\n  }\n  return ReadableStreamDefaultTee(stream, cloneForBranch2);\n}\n\nexport function ReadableStreamDefaultTee<R>(stream: ReadableStream<R>,\n                                            cloneForBranch2: boolean): [ReadableStream<R>, ReadableStream<R>] {\n  assert(IsReadableStream(stream));\n  assert(typeof cloneForBranch2 === 'boolean');\n\n  const reader = AcquireReadableStreamDefaultReader<R>(stream);\n\n  let reading = false;\n  let readAgain = false;\n  let canceled1 = false;\n  let canceled2 = false;\n  let reason1: any;\n  let reason2: any;\n  let branch1: ReadableStream<R>;\n  let branch2: ReadableStream<R>;\n\n  let resolveCancelPromise: (value: undefined | Promise<undefined>) => void;\n  const cancelPromise = newPromise<undefined>(resolve => {\n    resolveCancelPromise = resolve;\n  });\n\n  function pullAlgorithm(): Promise<void> {\n    if (reading) {\n      readAgain = true;\n      return promiseResolvedWith(undefined);\n    }\n\n    reading = true;\n\n    const readRequest: ReadRequest<R> = {\n      _chunkSteps: chunk => {\n        // This needs to be delayed a microtask because it takes at least a microtask to detect errors (using\n        // reader._closedPromise below), and we want errors in stream to error both branches immediately. We cannot let\n        // successful synchronously-available reads get ahead of asynchronously-available errors.\n        queueMicrotask(() => {\n          readAgain = false;\n          const chunk1 = chunk;\n          const chunk2 = chunk;\n\n          // There is no way to access the cloning code right now in the reference implementation.\n          // If we add one then we'll need an implementation for serializable objects.\n          // if (!canceled2 && cloneForBranch2) {\n          //   chunk2 = StructuredDeserialize(StructuredSerialize(chunk2));\n          // }\n\n          if (!canceled1) {\n            ReadableStreamDefaultControllerEnqueue(\n              branch1._readableStreamController as ReadableStreamDefaultController<R>,\n              chunk1\n            );\n          }\n          if (!canceled2) {\n            ReadableStreamDefaultControllerEnqueue(\n              branch2._readableStreamController as ReadableStreamDefaultController<R>,\n              chunk2\n            );\n          }\n\n          reading = false;\n          if (readAgain) {\n            pullAlgorithm();\n          }\n        });\n      },\n      _closeSteps: () => {\n        reading = false;\n        if (!canceled1) {\n          ReadableStreamDefaultControllerClose(branch1._readableStreamController as ReadableStreamDefaultController<R>);\n        }\n        if (!canceled2) {\n          ReadableStreamDefaultControllerClose(branch2._readableStreamController as ReadableStreamDefaultController<R>);\n        }\n\n        if (!canceled1 || !canceled2) {\n          resolveCancelPromise(undefined);\n        }\n      },\n      _errorSteps: () => {\n        reading = false;\n      }\n    };\n    ReadableStreamDefaultReaderRead(reader, readRequest);\n\n    return promiseResolvedWith(undefined);\n  }\n\n  function cancel1Algorithm(reason: any): Promise<void> {\n    canceled1 = true;\n    reason1 = reason;\n    if (canceled2) {\n      const compositeReason = CreateArrayFromList([reason1, reason2]);\n      const cancelResult = ReadableStreamCancel(stream, compositeReason);\n      resolveCancelPromise(cancelResult);\n    }\n    return cancelPromise;\n  }\n\n  function cancel2Algorithm(reason: any): Promise<void> {\n    canceled2 = true;\n    reason2 = reason;\n    if (canceled1) {\n      const compositeReason = CreateArrayFromList([reason1, reason2]);\n      const cancelResult = ReadableStreamCancel(stream, compositeReason);\n      resolveCancelPromise(cancelResult);\n    }\n    return cancelPromise;\n  }\n\n  function startAlgorithm() {\n    // do nothing\n  }\n\n  branch1 = CreateReadableStream(startAlgorithm, pullAlgorithm, cancel1Algorithm);\n  branch2 = CreateReadableStream(startAlgorithm, pullAlgorithm, cancel2Algorithm);\n\n  uponRejection(reader._closedPromise, (r: any) => {\n    ReadableStreamDefaultControllerError(branch1._readableStreamController as ReadableStreamDefaultController<R>, r);\n    ReadableStreamDefaultControllerError(branch2._readableStreamController as ReadableStreamDefaultController<R>, r);\n    if (!canceled1 || !canceled2) {\n      resolveCancelPromise(undefined);\n    }\n  });\n\n  return [branch1, branch2];\n}\n\nexport function ReadableByteStreamTee(stream: ReadableByteStream): [ReadableByteStream, ReadableByteStream] {\n  assert(IsReadableStream(stream));\n  assert(IsReadableByteStreamController(stream._readableStreamController));\n\n  let reader: ReadableStreamReader<Uint8Array> = AcquireReadableStreamDefaultReader(stream);\n  let reading = false;\n  let readAgainForBranch1 = false;\n  let readAgainForBranch2 = false;\n  let canceled1 = false;\n  let canceled2 = false;\n  let reason1: any;\n  let reason2: any;\n  let branch1: ReadableByteStream;\n  let branch2: ReadableByteStream;\n\n  let resolveCancelPromise: (value: undefined | Promise<undefined>) => void;\n  const cancelPromise = newPromise<void>(resolve => {\n    resolveCancelPromise = resolve;\n  });\n\n  function forwardReaderError(thisReader: ReadableStreamReader<Uint8Array>) {\n    uponRejection(thisReader._closedPromise, r => {\n      if (thisReader !== reader) {\n        return;\n      }\n      ReadableByteStreamControllerError(branch1._readableStreamController, r);\n      ReadableByteStreamControllerError(branch2._readableStreamController, r);\n      if (!canceled1 || !canceled2) {\n        resolveCancelPromise(undefined);\n      }\n    });\n  }\n\n  function pullWithDefaultReader() {\n    if (IsReadableStreamBYOBReader(reader)) {\n      assert(reader._readIntoRequests.length === 0);\n      ReadableStreamReaderGenericRelease(reader);\n\n      reader = AcquireReadableStreamDefaultReader(stream);\n      forwardReaderError(reader);\n    }\n\n    const readRequest: ReadRequest<Uint8Array> = {\n      _chunkSteps: chunk => {\n        // This needs to be delayed a microtask because it takes at least a microtask to detect errors (using\n        // reader._closedPromise below), and we want errors in stream to error both branches immediately. We cannot let\n        // successful synchronously-available reads get ahead of asynchronously-available errors.\n        queueMicrotask(() => {\n          readAgainForBranch1 = false;\n          readAgainForBranch2 = false;\n\n          const chunk1 = chunk;\n          let chunk2 = chunk;\n          if (!canceled1 && !canceled2) {\n            try {\n              chunk2 = CloneAsUint8Array(chunk);\n            } catch (cloneE) {\n              ReadableByteStreamControllerError(branch1._readableStreamController, cloneE);\n              ReadableByteStreamControllerError(branch2._readableStreamController, cloneE);\n              resolveCancelPromise(ReadableStreamCancel(stream, cloneE));\n              return;\n            }\n          }\n\n          if (!canceled1) {\n            ReadableByteStreamControllerEnqueue(branch1._readableStreamController, chunk1);\n          }\n          if (!canceled2) {\n            ReadableByteStreamControllerEnqueue(branch2._readableStreamController, chunk2);\n          }\n\n          reading = false;\n          if (readAgainForBranch1) {\n            pull1Algorithm();\n          } else if (readAgainForBranch2) {\n            pull2Algorithm();\n          }\n        });\n      },\n      _closeSteps: () => {\n        reading = false;\n        if (!canceled1) {\n          ReadableByteStreamControllerClose(branch1._readableStreamController);\n        }\n        if (!canceled2) {\n          ReadableByteStreamControllerClose(branch2._readableStreamController);\n        }\n        if (branch1._readableStreamController._pendingPullIntos.length > 0) {\n          ReadableByteStreamControllerRespond(branch1._readableStreamController, 0);\n        }\n        if (branch2._readableStreamController._pendingPullIntos.length > 0) {\n          ReadableByteStreamControllerRespond(branch2._readableStreamController, 0);\n        }\n        if (!canceled1 || !canceled2) {\n          resolveCancelPromise(undefined);\n        }\n      },\n      _errorSteps: () => {\n        reading = false;\n      }\n    };\n    ReadableStreamDefaultReaderRead(reader, readRequest);\n  }\n\n  function pullWithBYOBReader(view: ArrayBufferView, forBranch2: boolean) {\n    if (IsReadableStreamDefaultReader<Uint8Array>(reader)) {\n      assert(reader._readRequests.length === 0);\n      ReadableStreamReaderGenericRelease(reader);\n\n      reader = AcquireReadableStreamBYOBReader(stream);\n      forwardReaderError(reader);\n    }\n\n    const byobBranch = forBranch2 ? branch2 : branch1;\n    const otherBranch = forBranch2 ? branch1 : branch2;\n\n    const readIntoRequest: ReadIntoRequest<ArrayBufferView> = {\n      _chunkSteps: chunk => {\n        // This needs to be delayed a microtask because it takes at least a microtask to detect errors (using\n        // reader._closedPromise below), and we want errors in stream to error both branches immediately. We cannot let\n        // successful synchronously-available reads get ahead of asynchronously-available errors.\n        queueMicrotask(() => {\n          readAgainForBranch1 = false;\n          readAgainForBranch2 = false;\n\n          const byobCanceled = forBranch2 ? canceled2 : canceled1;\n          const otherCanceled = forBranch2 ? canceled1 : canceled2;\n\n          if (!otherCanceled) {\n            let clonedChunk;\n            try {\n              clonedChunk = CloneAsUint8Array(chunk);\n            } catch (cloneE) {\n              ReadableByteStreamControllerError(byobBranch._readableStreamController, cloneE);\n              ReadableByteStreamControllerError(otherBranch._readableStreamController, cloneE);\n              resolveCancelPromise(ReadableStreamCancel(stream, cloneE));\n              return;\n            }\n            if (!byobCanceled) {\n              ReadableByteStreamControllerRespondWithNewView(byobBranch._readableStreamController, chunk);\n            }\n            ReadableByteStreamControllerEnqueue(otherBranch._readableStreamController, clonedChunk);\n          } else if (!byobCanceled) {\n            ReadableByteStreamControllerRespondWithNewView(byobBranch._readableStreamController, chunk);\n          }\n\n          reading = false;\n          if (readAgainForBranch1) {\n            pull1Algorithm();\n          } else if (readAgainForBranch2) {\n            pull2Algorithm();\n          }\n        });\n      },\n      _closeSteps: chunk => {\n        reading = false;\n\n        const byobCanceled = forBranch2 ? canceled2 : canceled1;\n        const otherCanceled = forBranch2 ? canceled1 : canceled2;\n\n        if (!byobCanceled) {\n          ReadableByteStreamControllerClose(byobBranch._readableStreamController);\n        }\n        if (!otherCanceled) {\n          ReadableByteStreamControllerClose(otherBranch._readableStreamController);\n        }\n\n        if (chunk !== undefined) {\n          assert(chunk.byteLength === 0);\n\n          if (!byobCanceled) {\n            ReadableByteStreamControllerRespondWithNewView(byobBranch._readableStreamController, chunk);\n          }\n          if (!otherCanceled && otherBranch._readableStreamController._pendingPullIntos.length > 0) {\n            ReadableByteStreamControllerRespond(otherBranch._readableStreamController, 0);\n          }\n        }\n\n        if (!byobCanceled || !otherCanceled) {\n          resolveCancelPromise(undefined);\n        }\n      },\n      _errorSteps: () => {\n        reading = false;\n      }\n    };\n    ReadableStreamBYOBReaderRead(reader, view, readIntoRequest);\n  }\n\n  function pull1Algorithm(): Promise<void> {\n    if (reading) {\n      readAgainForBranch1 = true;\n      return promiseResolvedWith(undefined);\n    }\n\n    reading = true;\n\n    const byobRequest = ReadableByteStreamControllerGetBYOBRequest(branch1._readableStreamController);\n    if (byobRequest === null) {\n      pullWithDefaultReader();\n    } else {\n      pullWithBYOBReader(byobRequest._view!, false);\n    }\n\n    return promiseResolvedWith(undefined);\n  }\n\n  function pull2Algorithm(): Promise<void> {\n    if (reading) {\n      readAgainForBranch2 = true;\n      return promiseResolvedWith(undefined);\n    }\n\n    reading = true;\n\n    const byobRequest = ReadableByteStreamControllerGetBYOBRequest(branch2._readableStreamController);\n    if (byobRequest === null) {\n      pullWithDefaultReader();\n    } else {\n      pullWithBYOBReader(byobRequest._view!, true);\n    }\n\n    return promiseResolvedWith(undefined);\n  }\n\n  function cancel1Algorithm(reason: any): Promise<void> {\n    canceled1 = true;\n    reason1 = reason;\n    if (canceled2) {\n      const compositeReason = CreateArrayFromList([reason1, reason2]);\n      const cancelResult = ReadableStreamCancel(stream, compositeReason);\n      resolveCancelPromise(cancelResult);\n    }\n    return cancelPromise;\n  }\n\n  function cancel2Algorithm(reason: any): Promise<void> {\n    canceled2 = true;\n    reason2 = reason;\n    if (canceled1) {\n      const compositeReason = CreateArrayFromList([reason1, reason2]);\n      const cancelResult = ReadableStreamCancel(stream, compositeReason);\n      resolveCancelPromise(cancelResult);\n    }\n    return cancelPromise;\n  }\n\n  function startAlgorithm(): void {\n    return;\n  }\n\n  branch1 = CreateReadableByteStream(startAlgorithm, pull1Algorithm, cancel1Algorithm);\n  branch2 = CreateReadableByteStream(startAlgorithm, pull2Algorithm, cancel2Algorithm);\n\n  forwardReaderError(reader);\n\n  return [branch1, branch2];\n}\n","import { assertDictionary, assertFunction, convertUnsignedLongLongWithEnforceRange } from './basic';\nimport {\n  ReadableStreamController,\n  UnderlyingByteSource,\n  UnderlyingDefaultOrByteSource,\n  UnderlyingDefaultOrByteSourcePullCallback,\n  UnderlyingDefaultOrByteSourceStartCallback,\n  UnderlyingSource,\n  UnderlyingSourceCancelCallback,\n  ValidatedUnderlyingDefaultOrByteSource\n} from '../readable-stream/underlying-source';\nimport { promiseCall, reflectCall } from '../helpers/webidl';\n\nexport function convertUnderlyingDefaultOrByteSource<R>(\n  source: UnderlyingSource<R> | UnderlyingByteSource | null,\n  context: string\n): ValidatedUnderlyingDefaultOrByteSource<R> {\n  assertDictionary(source, context);\n  const original = source as (UnderlyingDefaultOrByteSource<R> | null);\n  const autoAllocateChunkSize = original?.autoAllocateChunkSize;\n  const cancel = original?.cancel;\n  const pull = original?.pull;\n  const start = original?.start;\n  const type = original?.type;\n  return {\n    autoAllocateChunkSize: autoAllocateChunkSize === undefined ?\n      undefined :\n      convertUnsignedLongLongWithEnforceRange(\n        autoAllocateChunkSize,\n        `${context} has member 'autoAllocateChunkSize' that`\n      ),\n    cancel: cancel === undefined ?\n      undefined :\n      convertUnderlyingSourceCancelCallback(cancel, original!, `${context} has member 'cancel' that`),\n    pull: pull === undefined ?\n      undefined :\n      convertUnderlyingSourcePullCallback(pull, original!, `${context} has member 'pull' that`),\n    start: start === undefined ?\n      undefined :\n      convertUnderlyingSourceStartCallback(start, original!, `${context} has member 'start' that`),\n    type: type === undefined ? undefined : convertReadableStreamType(type, `${context} has member 'type' that`)\n  };\n}\n\nfunction convertUnderlyingSourceCancelCallback(\n  fn: UnderlyingSourceCancelCallback,\n  original: UnderlyingDefaultOrByteSource,\n  context: string\n): (reason: any) => Promise<void> {\n  assertFunction(fn, context);\n  return (reason: any) => promiseCall(fn, original, [reason]);\n}\n\nfunction convertUnderlyingSourcePullCallback<R>(\n  fn: UnderlyingDefaultOrByteSourcePullCallback<R>,\n  original: UnderlyingDefaultOrByteSource<R>,\n  context: string\n): (controller: ReadableStreamController<R>) => Promise<void> {\n  assertFunction(fn, context);\n  return (controller: ReadableStreamController<R>) => promiseCall(fn, original, [controller]);\n}\n\nfunction convertUnderlyingSourceStartCallback<R>(\n  fn: UnderlyingDefaultOrByteSourceStartCallback<R>,\n  original: UnderlyingDefaultOrByteSource<R>,\n  context: string\n): UnderlyingDefaultOrByteSourceStartCallback<R> {\n  assertFunction(fn, context);\n  return (controller: ReadableStreamController<R>) => reflectCall(fn, original, [controller]);\n}\n\nfunction convertReadableStreamType(type: string, context: string): 'bytes' {\n  type = `${type}`;\n  if (type !== 'bytes') {\n    throw new TypeError(`${context} '${type}' is not a valid enumeration value for ReadableStreamType`);\n  }\n  return type;\n}\n","import { assertDictionary } from './basic';\nimport { ReadableStreamGetReaderOptions } from '../readable-stream/reader-options';\n\nexport function convertReaderOptions(options: ReadableStreamGetReaderOptions | null | undefined,\n                                     context: string): ReadableStreamGetReaderOptions {\n  assertDictionary(options, context);\n  const mode = options?.mode;\n  return {\n    mode: mode === undefined ? undefined : convertReadableStreamReaderMode(mode, `${context} has member 'mode' that`)\n  };\n}\n\nfunction convertReadableStreamReaderMode(mode: string, context: string): 'byob' {\n  mode = `${mode}`;\n  if (mode !== 'byob') {\n    throw new TypeError(`${context} '${mode}' is not a valid enumeration value for ReadableStreamReaderMode`);\n  }\n  return mode;\n}\n","import { assertDictionary } from './basic';\nimport {\n  ReadableStreamIteratorOptions,\n  ValidatedReadableStreamIteratorOptions\n} from '../readable-stream/iterator-options';\n\nexport function convertIteratorOptions(options: ReadableStreamIteratorOptions | null | undefined,\n                                       context: string): ValidatedReadableStreamIteratorOptions {\n  assertDictionary(options, context);\n  const preventCancel = options?.preventCancel;\n  return { preventCancel: Boolean(preventCancel) };\n}\n","import { assertDictionary } from './basic';\nimport { StreamPipeOptions, ValidatedStreamPipeOptions } from '../readable-stream/pipe-options';\nimport { AbortSignal, isAbortSignal } from '../abort-signal';\n\nexport function convertPipeOptions(options: StreamPipeOptions | null | undefined,\n                                   context: string): ValidatedStreamPipeOptions {\n  assertDictionary(options, context);\n  const preventAbort = options?.preventAbort;\n  const preventCancel = options?.preventCancel;\n  const preventClose = options?.preventClose;\n  const signal = options?.signal;\n  if (signal !== undefined) {\n    assertAbortSignal(signal, `${context} has member 'signal' that`);\n  }\n  return {\n    preventAbort: Boolean(preventAbort),\n    preventCancel: Boolean(preventCancel),\n    preventClose: Boolean(preventClose),\n    signal\n  };\n}\n\nfunction assertAbortSignal(signal: unknown, context: string): asserts signal is AbortSignal {\n  if (!isAbortSignal(signal)) {\n    throw new TypeError(`${context} is not an AbortSignal.`);\n  }\n}\n","import { assertDictionary, assertRequiredField } from './basic';\nimport { ReadableStream } from '../readable-stream';\nimport { WritableStream } from '../writable-stream';\nimport { assertReadableStream } from './readable-stream';\nimport { assertWritableStream } from './writable-stream';\n\nexport function convertReadableWritablePair<RS extends ReadableStream, WS extends WritableStream>(\n  pair: { readable: RS; writable: WS } | null | undefined,\n  context: string\n): { readable: RS; writable: WS } {\n  assertDictionary(pair, context);\n\n  const readable = pair?.readable;\n  assertRequiredField(readable, 'readable', 'ReadableWritablePair');\n  assertReadableStream(readable, `${context} has member 'readable' that`);\n\n  const writable = pair?.writable;\n  assertRequiredField(writable, 'writable', 'ReadableWritablePair');\n  assertWritableStream(writable, `${context} has member 'writable' that`);\n\n  return { readable, writable };\n}\n","import assert from '../stub/assert';\nimport {\n  promiseRejectedWith,\n  promiseResolvedWith,\n  setPromiseIsHandledToTrue,\n  transformPromiseWith\n} from './helpers/webidl';\nimport { QueuingStrategy, QueuingStrategySizeCallback } from './queuing-strategy';\nimport { AcquireReadableStreamAsyncIterator, ReadableStreamAsyncIterator } from './readable-stream/async-iterator';\nimport { defaultReaderClosedPromiseReject, defaultReaderClosedPromiseResolve } from './readable-stream/generic-reader';\nimport {\n  AcquireReadableStreamDefaultReader,\n  IsReadableStreamDefaultReader,\n  ReadableStreamDefaultReader,\n  ReadableStreamDefaultReadResult\n} from './readable-stream/default-reader';\nimport {\n  AcquireReadableStreamBYOBReader,\n  IsReadableStreamBYOBReader,\n  ReadableStreamBYOBReader,\n  ReadableStreamBYOBReadResult\n} from './readable-stream/byob-reader';\nimport { ReadableStreamPipeTo } from './readable-stream/pipe';\nimport { ReadableStreamTee } from './readable-stream/tee';\nimport { IsWritableStream, IsWritableStreamLocked, WritableStream } from './writable-stream';\nimport { SimpleQueue } from './simple-queue';\nimport {\n  ReadableByteStreamController,\n  ReadableStreamBYOBRequest,\n  SetUpReadableByteStreamController,\n  SetUpReadableByteStreamControllerFromUnderlyingSource\n} from './readable-stream/byte-stream-controller';\nimport {\n  ReadableStreamDefaultController,\n  SetUpReadableStreamDefaultController,\n  SetUpReadableStreamDefaultControllerFromUnderlyingSource\n} from './readable-stream/default-controller';\nimport {\n  UnderlyingByteSource,\n  UnderlyingByteSourcePullCallback,\n  UnderlyingByteSourceStartCallback,\n  UnderlyingSource,\n  UnderlyingSourceCancelCallback,\n  UnderlyingSourcePullCallback,\n  UnderlyingSourceStartCallback\n} from './readable-stream/underlying-source';\nimport { noop } from '../utils';\nimport { typeIsObject } from './helpers/miscellaneous';\nimport { CreateArrayFromList } from './abstract-ops/ecmascript';\nimport { CancelSteps } from './abstract-ops/internal-methods';\nimport { IsNonNegativeNumber } from './abstract-ops/miscellaneous';\nimport { assertObject, assertRequiredArgument } from './validators/basic';\nimport { convertQueuingStrategy } from './validators/queuing-strategy';\nimport { ExtractHighWaterMark, ExtractSizeAlgorithm } from './abstract-ops/queuing-strategy';\nimport { convertUnderlyingDefaultOrByteSource } from './validators/underlying-source';\nimport { ReadableStreamGetReaderOptions } from './readable-stream/reader-options';\nimport { convertReaderOptions } from './validators/reader-options';\nimport { StreamPipeOptions, ValidatedStreamPipeOptions } from './readable-stream/pipe-options';\nimport { ReadableStreamIteratorOptions } from './readable-stream/iterator-options';\nimport { convertIteratorOptions } from './validators/iterator-options';\nimport { convertPipeOptions } from './validators/pipe-options';\nimport { ReadableWritablePair } from './readable-stream/readable-writable-pair';\nimport { convertReadableWritablePair } from './validators/readable-writable-pair';\n\nexport type ReadableByteStream = ReadableStream<Uint8Array> & {\n  _readableStreamController: ReadableByteStreamController\n};\n\ntype ReadableStreamState = 'readable' | 'closed' | 'errored';\n\n/**\n * A readable stream represents a source of data, from which you can read.\n *\n * @public\n */\nexport class ReadableStream<R = any> {\n  /** @internal */\n  _state!: ReadableStreamState;\n  /** @internal */\n  _reader: ReadableStreamReader<R> | undefined;\n  /** @internal */\n  _storedError: any;\n  /** @internal */\n  _disturbed!: boolean;\n  /** @internal */\n  _readableStreamController!: ReadableStreamDefaultController<R> | ReadableByteStreamController;\n\n  constructor(underlyingSource: UnderlyingByteSource, strategy?: { highWaterMark?: number; size?: undefined });\n  constructor(underlyingSource?: UnderlyingSource<R>, strategy?: QueuingStrategy<R>);\n  constructor(rawUnderlyingSource: UnderlyingSource<R> | UnderlyingByteSource | null | undefined = {},\n              rawStrategy: QueuingStrategy<R> | null | undefined = {}) {\n    if (rawUnderlyingSource === undefined) {\n      rawUnderlyingSource = null;\n    } else {\n      assertObject(rawUnderlyingSource, 'First parameter');\n    }\n\n    const strategy = convertQueuingStrategy(rawStrategy, 'Second parameter');\n    const underlyingSource = convertUnderlyingDefaultOrByteSource(rawUnderlyingSource, 'First parameter');\n\n    InitializeReadableStream(this);\n\n    if (underlyingSource.type === 'bytes') {\n      if (strategy.size !== undefined) {\n        throw new RangeError('The strategy for a byte stream cannot have a size function');\n      }\n      const highWaterMark = ExtractHighWaterMark(strategy, 0);\n      SetUpReadableByteStreamControllerFromUnderlyingSource(\n        this as unknown as ReadableByteStream,\n        underlyingSource,\n        highWaterMark\n      );\n    } else {\n      assert(underlyingSource.type === undefined);\n      const sizeAlgorithm = ExtractSizeAlgorithm(strategy);\n      const highWaterMark = ExtractHighWaterMark(strategy, 1);\n      SetUpReadableStreamDefaultControllerFromUnderlyingSource(\n        this,\n        underlyingSource,\n        highWaterMark,\n        sizeAlgorithm\n      );\n    }\n  }\n\n  /**\n   * Whether or not the readable stream is locked to a {@link ReadableStreamDefaultReader | reader}.\n   */\n  get locked(): boolean {\n    if (!IsReadableStream(this)) {\n      throw streamBrandCheckException('locked');\n    }\n\n    return IsReadableStreamLocked(this);\n  }\n\n  /**\n   * Cancels the stream, signaling a loss of interest in the stream by a consumer.\n   *\n   * The supplied `reason` argument will be given to the underlying source's {@link UnderlyingSource.cancel | cancel()}\n   * method, which might or might not use it.\n   */\n  cancel(reason: any = undefined): Promise<void> {\n    if (!IsReadableStream(this)) {\n      return promiseRejectedWith(streamBrandCheckException('cancel'));\n    }\n\n    if (IsReadableStreamLocked(this)) {\n      return promiseRejectedWith(new TypeError('Cannot cancel a stream that already has a reader'));\n    }\n\n    return ReadableStreamCancel(this, reason);\n  }\n\n  /**\n   * Creates a {@link ReadableStreamBYOBReader} and locks the stream to the new reader.\n   *\n   * This call behaves the same way as the no-argument variant, except that it only works on readable byte streams,\n   * i.e. streams which were constructed specifically with the ability to handle \"bring your own buffer\" reading.\n   * The returned BYOB reader provides the ability to directly read individual chunks from the stream via its\n   * {@link ReadableStreamBYOBReader.read | read()} method, into developer-supplied buffers, allowing more precise\n   * control over allocation.\n   */\n  getReader({ mode }: { mode: 'byob' }): ReadableStreamBYOBReader;\n  /**\n   * Creates a {@link ReadableStreamDefaultReader} and locks the stream to the new reader.\n   * While the stream is locked, no other reader can be acquired until this one is released.\n   *\n   * This functionality is especially useful for creating abstractions that desire the ability to consume a stream\n   * in its entirety. By getting a reader for the stream, you can ensure nobody else can interleave reads with yours\n   * or cancel the stream, which would interfere with your abstraction.\n   */\n  getReader(): ReadableStreamDefaultReader<R>;\n  getReader(\n    rawOptions: ReadableStreamGetReaderOptions | null | undefined = undefined\n  ): ReadableStreamDefaultReader<R> | ReadableStreamBYOBReader {\n    if (!IsReadableStream(this)) {\n      throw streamBrandCheckException('getReader');\n    }\n\n    const options = convertReaderOptions(rawOptions, 'First parameter');\n\n    if (options.mode === undefined) {\n      return AcquireReadableStreamDefaultReader(this);\n    }\n\n    assert(options.mode === 'byob');\n    return AcquireReadableStreamBYOBReader(this as unknown as ReadableByteStream);\n  }\n\n  /**\n   * Provides a convenient, chainable way of piping this readable stream through a transform stream\n   * (or any other `{ writable, readable }` pair). It simply {@link ReadableStream.pipeTo | pipes} the stream\n   * into the writable side of the supplied pair, and returns the readable side for further use.\n   *\n   * Piping a stream will lock it for the duration of the pipe, preventing any other consumer from acquiring a reader.\n   */\n  pipeThrough<RS extends ReadableStream>(\n    transform: { readable: RS; writable: WritableStream<R> },\n    options?: StreamPipeOptions\n  ): RS;\n  pipeThrough<RS extends ReadableStream>(\n    rawTransform: { readable: RS; writable: WritableStream<R> } | null | undefined,\n    rawOptions: StreamPipeOptions | null | undefined = {}\n  ): RS {\n    if (!IsReadableStream(this)) {\n      throw streamBrandCheckException('pipeThrough');\n    }\n    assertRequiredArgument(rawTransform, 1, 'pipeThrough');\n\n    const transform = convertReadableWritablePair(rawTransform, 'First parameter');\n    const options = convertPipeOptions(rawOptions, 'Second parameter');\n\n    if (IsReadableStreamLocked(this)) {\n      throw new TypeError('ReadableStream.prototype.pipeThrough cannot be used on a locked ReadableStream');\n    }\n    if (IsWritableStreamLocked(transform.writable)) {\n      throw new TypeError('ReadableStream.prototype.pipeThrough cannot be used on a locked WritableStream');\n    }\n\n    const promise = ReadableStreamPipeTo(\n      this, transform.writable, options.preventClose, options.preventAbort, options.preventCancel, options.signal\n    );\n\n    setPromiseIsHandledToTrue(promise);\n\n    return transform.readable;\n  }\n\n  /**\n   * Pipes this readable stream to a given writable stream. The way in which the piping process behaves under\n   * various error conditions can be customized with a number of passed options. It returns a promise that fulfills\n   * when the piping process completes successfully, or rejects if any errors were encountered.\n   *\n   * Piping a stream will lock it for the duration of the pipe, preventing any other consumer from acquiring a reader.\n   */\n  pipeTo(destination: WritableStream<R>, options?: StreamPipeOptions): Promise<void>;\n  pipeTo(destination: WritableStream<R> | null | undefined,\n         rawOptions: StreamPipeOptions | null | undefined = {}): Promise<void> {\n    if (!IsReadableStream(this)) {\n      return promiseRejectedWith(streamBrandCheckException('pipeTo'));\n    }\n\n    if (destination === undefined) {\n      return promiseRejectedWith(`Parameter 1 is required in 'pipeTo'.`);\n    }\n    if (!IsWritableStream(destination)) {\n      return promiseRejectedWith(\n        new TypeError(`ReadableStream.prototype.pipeTo's first argument must be a WritableStream`)\n      );\n    }\n\n    let options: ValidatedStreamPipeOptions;\n    try {\n      options = convertPipeOptions(rawOptions, 'Second parameter');\n    } catch (e) {\n      return promiseRejectedWith(e);\n    }\n\n    if (IsReadableStreamLocked(this)) {\n      return promiseRejectedWith(\n        new TypeError('ReadableStream.prototype.pipeTo cannot be used on a locked ReadableStream')\n      );\n    }\n    if (IsWritableStreamLocked(destination)) {\n      return promiseRejectedWith(\n        new TypeError('ReadableStream.prototype.pipeTo cannot be used on a locked WritableStream')\n      );\n    }\n\n    return ReadableStreamPipeTo<R>(\n      this, destination, options.preventClose, options.preventAbort, options.preventCancel, options.signal\n    );\n  }\n\n  /**\n   * Tees this readable stream, returning a two-element array containing the two resulting branches as\n   * new {@link ReadableStream} instances.\n   *\n   * Teeing a stream will lock it, preventing any other consumer from acquiring a reader.\n   * To cancel the stream, cancel both of the resulting branches; a composite cancellation reason will then be\n   * propagated to the stream's underlying source.\n   *\n   * Note that the chunks seen in each branch will be the same object. If the chunks are not immutable,\n   * this could allow interference between the two branches.\n   */\n  tee(): [ReadableStream<R>, ReadableStream<R>] {\n    if (!IsReadableStream(this)) {\n      throw streamBrandCheckException('tee');\n    }\n\n    const branches = ReadableStreamTee(this, false);\n    return CreateArrayFromList(branches);\n  }\n\n  /**\n   * Asynchronously iterates over the chunks in the stream's internal queue.\n   *\n   * Asynchronously iterating over the stream will lock it, preventing any other consumer from acquiring a reader.\n   * The lock will be released if the async iterator's {@link ReadableStreamAsyncIterator.return | return()} method\n   * is called, e.g. by breaking out of the loop.\n   *\n   * By default, calling the async iterator's {@link ReadableStreamAsyncIterator.return | return()} method will also\n   * cancel the stream. To prevent this, use the stream's {@link ReadableStream.values | values()} method, passing\n   * `true` for the `preventCancel` option.\n   */\n  values(options?: ReadableStreamIteratorOptions): ReadableStreamAsyncIterator<R>;\n  values(rawOptions: ReadableStreamIteratorOptions | null | undefined = undefined): ReadableStreamAsyncIterator<R> {\n    if (!IsReadableStream(this)) {\n      throw streamBrandCheckException('values');\n    }\n\n    const options = convertIteratorOptions(rawOptions, 'First parameter');\n    return AcquireReadableStreamAsyncIterator<R>(this, options.preventCancel);\n  }\n\n  /**\n   * {@inheritDoc ReadableStream.values}\n   */\n  [Symbol.asyncIterator]: (options?: ReadableStreamIteratorOptions) => ReadableStreamAsyncIterator<R>;\n}\n\nObject.defineProperties(ReadableStream.prototype, {\n  cancel: { enumerable: true },\n  getReader: { enumerable: true },\n  pipeThrough: { enumerable: true },\n  pipeTo: { enumerable: true },\n  tee: { enumerable: true },\n  values: { enumerable: true },\n  locked: { enumerable: true }\n});\nif (typeof Symbol.toStringTag === 'symbol') {\n  Object.defineProperty(ReadableStream.prototype, Symbol.toStringTag, {\n    value: 'ReadableStream',\n    configurable: true\n  });\n}\nif (typeof Symbol.asyncIterator === 'symbol') {\n  Object.defineProperty(ReadableStream.prototype, Symbol.asyncIterator, {\n    value: ReadableStream.prototype.values,\n    writable: true,\n    configurable: true\n  });\n}\n\nexport {\n  ReadableStreamAsyncIterator,\n  ReadableStreamDefaultReadResult,\n  ReadableStreamBYOBReadResult,\n  UnderlyingByteSource,\n  UnderlyingSource,\n  UnderlyingSourceStartCallback,\n  UnderlyingSourcePullCallback,\n  UnderlyingSourceCancelCallback,\n  UnderlyingByteSourceStartCallback,\n  UnderlyingByteSourcePullCallback,\n  StreamPipeOptions,\n  ReadableWritablePair,\n  ReadableStreamIteratorOptions\n};\n\n// Abstract operations for the ReadableStream.\n\n// Throws if and only if startAlgorithm throws.\nexport function CreateReadableStream<R>(startAlgorithm: () => void | PromiseLike<void>,\n                                        pullAlgorithm: () => Promise<void>,\n                                        cancelAlgorithm: (reason: any) => Promise<void>,\n                                        highWaterMark = 1,\n                                        sizeAlgorithm: QueuingStrategySizeCallback<R> = () => 1): ReadableStream<R> {\n  assert(IsNonNegativeNumber(highWaterMark));\n\n  const stream: ReadableStream<R> = Object.create(ReadableStream.prototype);\n  InitializeReadableStream(stream);\n\n  const controller: ReadableStreamDefaultController<R> = Object.create(ReadableStreamDefaultController.prototype);\n  SetUpReadableStreamDefaultController(\n    stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark, sizeAlgorithm\n  );\n\n  return stream;\n}\n\n// Throws if and only if startAlgorithm throws.\nexport function CreateReadableByteStream(\n  startAlgorithm: () => void | PromiseLike<void>,\n  pullAlgorithm: () => Promise<void>,\n  cancelAlgorithm: (reason: any) => Promise<void>\n): ReadableByteStream {\n  const stream: ReadableByteStream = Object.create(ReadableStream.prototype);\n  InitializeReadableStream(stream);\n\n  const controller: ReadableByteStreamController = Object.create(ReadableByteStreamController.prototype);\n  SetUpReadableByteStreamController(stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, 0, undefined);\n\n  return stream;\n}\n\nfunction InitializeReadableStream(stream: ReadableStream) {\n  stream._state = 'readable';\n  stream._reader = undefined;\n  stream._storedError = undefined;\n  stream._disturbed = false;\n}\n\nexport function IsReadableStream(x: unknown): x is ReadableStream {\n  if (!typeIsObject(x)) {\n    return false;\n  }\n\n  if (!Object.prototype.hasOwnProperty.call(x, '_readableStreamController')) {\n    return false;\n  }\n\n  return x instanceof ReadableStream;\n}\n\nexport function IsReadableStreamDisturbed(stream: ReadableStream): boolean {\n  assert(IsReadableStream(stream));\n\n  return stream._disturbed;\n}\n\nexport function IsReadableStreamLocked(stream: ReadableStream): boolean {\n  assert(IsReadableStream(stream));\n\n  if (stream._reader === undefined) {\n    return false;\n  }\n\n  return true;\n}\n\n// ReadableStream API exposed for controllers.\n\nexport function ReadableStreamCancel<R>(stream: ReadableStream<R>, reason: any): Promise<undefined> {\n  stream._disturbed = true;\n\n  if (stream._state === 'closed') {\n    return promiseResolvedWith(undefined);\n  }\n  if (stream._state === 'errored') {\n    return promiseRejectedWith(stream._storedError);\n  }\n\n  ReadableStreamClose(stream);\n\n  const reader = stream._reader;\n  if (reader !== undefined && IsReadableStreamBYOBReader(reader)) {\n    reader._readIntoRequests.forEach(readIntoRequest => {\n      readIntoRequest._closeSteps(undefined);\n    });\n    reader._readIntoRequests = new SimpleQueue();\n  }\n\n  const sourceCancelPromise = stream._readableStreamController[CancelSteps](reason);\n  return transformPromiseWith(sourceCancelPromise, noop);\n}\n\nexport function ReadableStreamClose<R>(stream: ReadableStream<R>): void {\n  assert(stream._state === 'readable');\n\n  stream._state = 'closed';\n\n  const reader = stream._reader;\n\n  if (reader === undefined) {\n    return;\n  }\n\n  defaultReaderClosedPromiseResolve(reader);\n\n  if (IsReadableStreamDefaultReader<R>(reader)) {\n    reader._readRequests.forEach(readRequest => {\n      readRequest._closeSteps();\n    });\n    reader._readRequests = new SimpleQueue();\n  }\n}\n\nexport function ReadableStreamError<R>(stream: ReadableStream<R>, e: any): void {\n  assert(IsReadableStream(stream));\n  assert(stream._state === 'readable');\n\n  stream._state = 'errored';\n  stream._storedError = e;\n\n  const reader = stream._reader;\n\n  if (reader === undefined) {\n    return;\n  }\n\n  defaultReaderClosedPromiseReject(reader, e);\n\n  if (IsReadableStreamDefaultReader<R>(reader)) {\n    reader._readRequests.forEach(readRequest => {\n      readRequest._errorSteps(e);\n    });\n\n    reader._readRequests = new SimpleQueue();\n  } else {\n    assert(IsReadableStreamBYOBReader(reader));\n\n    reader._readIntoRequests.forEach(readIntoRequest => {\n      readIntoRequest._errorSteps(e);\n    });\n\n    reader._readIntoRequests = new SimpleQueue();\n  }\n}\n\n// Readers\n\nexport type ReadableStreamReader<R> = ReadableStreamDefaultReader<R> | ReadableStreamBYOBReader;\n\nexport {\n  ReadableStreamDefaultReader,\n  ReadableStreamBYOBReader\n};\n\n// Controllers\n\nexport {\n  ReadableStreamDefaultController,\n  ReadableStreamBYOBRequest,\n  ReadableByteStreamController\n};\n\n// Helper functions for the ReadableStream.\n\nfunction streamBrandCheckException(name: string): TypeError {\n  return new TypeError(`ReadableStream.prototype.${name} can only be used on a ReadableStream`);\n}\n","import { QueuingStrategyInit } from '../queuing-strategy';\nimport { assertDictionary, assertRequiredField, convertUnrestrictedDouble } from './basic';\n\nexport function convertQueuingStrategyInit(init: QueuingStrategyInit | null | undefined,\n                                           context: string): QueuingStrategyInit {\n  assertDictionary(init, context);\n  const highWaterMark = init?.highWaterMark;\n  assertRequiredField(highWaterMark, 'highWaterMark', 'QueuingStrategyInit');\n  return {\n    highWaterMark: convertUnrestrictedDouble(highWaterMark)\n  };\n}\n","import { QueuingStrategy, QueuingStrategyInit } from './queuing-strategy';\nimport { typeIsObject } from './helpers/miscellaneous';\nimport { assertRequiredArgument } from './validators/basic';\nimport { convertQueuingStrategyInit } from './validators/queuing-strategy-init';\n\n// The size function must not have a prototype property nor be a constructor\nconst byteLengthSizeFunction = (chunk: ArrayBufferView): number => {\n  return chunk.byteLength;\n};\ntry {\n  Object.defineProperty(byteLengthSizeFunction, 'name', {\n    value: 'size',\n    configurable: true\n  });\n} catch {\n  // This property is non-configurable in older browsers, so ignore if this throws.\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/name#browser_compatibility\n}\n\n/**\n * A queuing strategy that counts the number of bytes in each chunk.\n *\n * @public\n */\nexport default class ByteLengthQueuingStrategy implements QueuingStrategy<ArrayBufferView> {\n  /** @internal */\n  readonly _byteLengthQueuingStrategyHighWaterMark: number;\n\n  constructor(options: QueuingStrategyInit) {\n    assertRequiredArgument(options, 1, 'ByteLengthQueuingStrategy');\n    options = convertQueuingStrategyInit(options, 'First parameter');\n    this._byteLengthQueuingStrategyHighWaterMark = options.highWaterMark;\n  }\n\n  /**\n   * Returns the high water mark provided to the constructor.\n   */\n  get highWaterMark(): number {\n    if (!IsByteLengthQueuingStrategy(this)) {\n      throw byteLengthBrandCheckException('highWaterMark');\n    }\n    return this._byteLengthQueuingStrategyHighWaterMark;\n  }\n\n  /**\n   * Measures the size of `chunk` by returning the value of its `byteLength` property.\n   */\n  get size(): (chunk: ArrayBufferView) => number {\n    if (!IsByteLengthQueuingStrategy(this)) {\n      throw byteLengthBrandCheckException('size');\n    }\n    return byteLengthSizeFunction;\n  }\n}\n\nObject.defineProperties(ByteLengthQueuingStrategy.prototype, {\n  highWaterMark: { enumerable: true },\n  size: { enumerable: true }\n});\nif (typeof Symbol.toStringTag === 'symbol') {\n  Object.defineProperty(ByteLengthQueuingStrategy.prototype, Symbol.toStringTag, {\n    value: 'ByteLengthQueuingStrategy',\n    configurable: true\n  });\n}\n\n// Helper functions for the ByteLengthQueuingStrategy.\n\nfunction byteLengthBrandCheckException(name: string): TypeError {\n  return new TypeError(`ByteLengthQueuingStrategy.prototype.${name} can only be used on a ByteLengthQueuingStrategy`);\n}\n\nexport function IsByteLengthQueuingStrategy(x: any): x is ByteLengthQueuingStrategy {\n  if (!typeIsObject(x)) {\n    return false;\n  }\n\n  if (!Object.prototype.hasOwnProperty.call(x, '_byteLengthQueuingStrategyHighWaterMark')) {\n    return false;\n  }\n\n  return x instanceof ByteLengthQueuingStrategy;\n}\n","import { QueuingStrategy, QueuingStrategyInit } from './queuing-strategy';\nimport { typeIsObject } from './helpers/miscellaneous';\nimport { assertRequiredArgument } from './validators/basic';\nimport { convertQueuingStrategyInit } from './validators/queuing-strategy-init';\n\n// The size function must not have a prototype property nor be a constructor\nconst countSizeFunction = (): 1 => {\n  return 1;\n};\ntry {\n  Object.defineProperty(countSizeFunction, 'name', {\n    value: 'size',\n    configurable: true\n  });\n} catch {\n  // This property is non-configurable in older browsers, so ignore if this throws.\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/name#browser_compatibility\n}\n\n/**\n * A queuing strategy that counts the number of chunks.\n *\n * @public\n */\nexport default class CountQueuingStrategy implements QueuingStrategy<any> {\n  /** @internal */\n  readonly _countQueuingStrategyHighWaterMark!: number;\n\n  constructor(options: QueuingStrategyInit) {\n    assertRequiredArgument(options, 1, 'CountQueuingStrategy');\n    options = convertQueuingStrategyInit(options, 'First parameter');\n    this._countQueuingStrategyHighWaterMark = options.highWaterMark;\n  }\n\n  /**\n   * Returns the high water mark provided to the constructor.\n   */\n  get highWaterMark(): number {\n    if (!IsCountQueuingStrategy(this)) {\n      throw countBrandCheckException('highWaterMark');\n    }\n    return this._countQueuingStrategyHighWaterMark;\n  }\n\n  /**\n   * Measures the size of `chunk` by always returning 1.\n   * This ensures that the total queue size is a count of the number of chunks in the queue.\n   */\n  get size(): (chunk: any) => 1 {\n    if (!IsCountQueuingStrategy(this)) {\n      throw countBrandCheckException('size');\n    }\n    return countSizeFunction;\n  }\n}\n\nObject.defineProperties(CountQueuingStrategy.prototype, {\n  highWaterMark: { enumerable: true },\n  size: { enumerable: true }\n});\nif (typeof Symbol.toStringTag === 'symbol') {\n  Object.defineProperty(CountQueuingStrategy.prototype, Symbol.toStringTag, {\n    value: 'CountQueuingStrategy',\n    configurable: true\n  });\n}\n\n// Helper functions for the CountQueuingStrategy.\n\nfunction countBrandCheckException(name: string): TypeError {\n  return new TypeError(`CountQueuingStrategy.prototype.${name} can only be used on a CountQueuingStrategy`);\n}\n\nexport function IsCountQueuingStrategy(x: any): x is CountQueuingStrategy {\n  if (!typeIsObject(x)) {\n    return false;\n  }\n\n  if (!Object.prototype.hasOwnProperty.call(x, '_countQueuingStrategyHighWaterMark')) {\n    return false;\n  }\n\n  return x instanceof CountQueuingStrategy;\n}\n","import { assertDictionary, assertFunction } from './basic';\nimport { promiseCall, reflectCall } from '../helpers/webidl';\nimport {\n  Transformer,\n  TransformerFlushCallback,\n  TransformerStartCallback,\n  TransformerTransformCallback,\n  ValidatedTransformer\n} from '../transform-stream/transformer';\nimport { TransformStreamDefaultController } from '../transform-stream';\n\nexport function convertTransformer<I, O>(original: Transformer<I, O> | null,\n                                         context: string): ValidatedTransformer<I, O> {\n  assertDictionary(original, context);\n  const flush = original?.flush;\n  const readableType = original?.readableType;\n  const start = original?.start;\n  const transform = original?.transform;\n  const writableType = original?.writableType;\n  return {\n    flush: flush === undefined ?\n      undefined :\n      convertTransformerFlushCallback(flush, original!, `${context} has member 'flush' that`),\n    readableType,\n    start: start === undefined ?\n      undefined :\n      convertTransformerStartCallback(start, original!, `${context} has member 'start' that`),\n    transform: transform === undefined ?\n      undefined :\n      convertTransformerTransformCallback(transform, original!, `${context} has member 'transform' that`),\n    writableType\n  };\n}\n\nfunction convertTransformerFlushCallback<I, O>(\n  fn: TransformerFlushCallback<O>,\n  original: Transformer<I, O>,\n  context: string\n): (controller: TransformStreamDefaultController<O>) => Promise<void> {\n  assertFunction(fn, context);\n  return (controller: TransformStreamDefaultController<O>) => promiseCall(fn, original, [controller]);\n}\n\nfunction convertTransformerStartCallback<I, O>(\n  fn: TransformerStartCallback<O>,\n  original: Transformer<I, O>,\n  context: string\n): TransformerStartCallback<O> {\n  assertFunction(fn, context);\n  return (controller: TransformStreamDefaultController<O>) => reflectCall(fn, original, [controller]);\n}\n\nfunction convertTransformerTransformCallback<I, O>(\n  fn: TransformerTransformCallback<I, O>,\n  original: Transformer<I, O>,\n  context: string\n): (chunk: I, controller: TransformStreamDefaultController<O>) => Promise<void> {\n  assertFunction(fn, context);\n  return (chunk: I, controller: TransformStreamDefaultController<O>) => promiseCall(fn, original, [chunk, controller]);\n}\n","import assert from '../stub/assert';\nimport { newPromise, promiseRejectedWith, promiseResolvedWith, transformPromiseWith } from './helpers/webidl';\nimport { CreateReadableStream, ReadableStream, ReadableStreamDefaultController } from './readable-stream';\nimport {\n  ReadableStreamDefaultControllerCanCloseOrEnqueue,\n  ReadableStreamDefaultControllerClose,\n  ReadableStreamDefaultControllerEnqueue,\n  ReadableStreamDefaultControllerError,\n  ReadableStreamDefaultControllerGetDesiredSize,\n  ReadableStreamDefaultControllerHasBackpressure\n} from './readable-stream/default-controller';\nimport { QueuingStrategy, QueuingStrategySizeCallback } from './queuing-strategy';\nimport { CreateWritableStream, WritableStream, WritableStreamDefaultControllerErrorIfNeeded } from './writable-stream';\nimport { typeIsObject } from './helpers/miscellaneous';\nimport { IsNonNegativeNumber } from './abstract-ops/miscellaneous';\nimport { convertQueuingStrategy } from './validators/queuing-strategy';\nimport { ExtractHighWaterMark, ExtractSizeAlgorithm } from './abstract-ops/queuing-strategy';\nimport {\n  Transformer,\n  TransformerFlushCallback,\n  TransformerStartCallback,\n  TransformerTransformCallback,\n  ValidatedTransformer\n} from './transform-stream/transformer';\nimport { convertTransformer } from './validators/transformer';\n\n// Class TransformStream\n\n/**\n * A transform stream consists of a pair of streams: a {@link WritableStream | writable stream},\n * known as its writable side, and a {@link ReadableStream | readable stream}, known as its readable side.\n * In a manner specific to the transform stream in question, writes to the writable side result in new data being\n * made available for reading from the readable side.\n *\n * @public\n */\nexport class TransformStream<I = any, O = any> {\n  /** @internal */\n  _writable!: WritableStream<I>;\n  /** @internal */\n  _readable!: ReadableStream<O>;\n  /** @internal */\n  _backpressure!: boolean;\n  /** @internal */\n  _backpressureChangePromise!: Promise<void>;\n  /** @internal */\n  _backpressureChangePromise_resolve!: () => void;\n  /** @internal */\n  _transformStreamController!: TransformStreamDefaultController<O>;\n\n  constructor(\n    transformer?: Transformer<I, O>,\n    writableStrategy?: QueuingStrategy<I>,\n    readableStrategy?: QueuingStrategy<O>\n  );\n  constructor(rawTransformer: Transformer<I, O> | null | undefined = {},\n              rawWritableStrategy: QueuingStrategy<I> | null | undefined = {},\n              rawReadableStrategy: QueuingStrategy<O> | null | undefined = {}) {\n    if (rawTransformer === undefined) {\n      rawTransformer = null;\n    }\n\n    const writableStrategy = convertQueuingStrategy(rawWritableStrategy, 'Second parameter');\n    const readableStrategy = convertQueuingStrategy(rawReadableStrategy, 'Third parameter');\n\n    const transformer = convertTransformer(rawTransformer, 'First parameter');\n    if (transformer.readableType !== undefined) {\n      throw new RangeError('Invalid readableType specified');\n    }\n    if (transformer.writableType !== undefined) {\n      throw new RangeError('Invalid writableType specified');\n    }\n\n    const readableHighWaterMark = ExtractHighWaterMark(readableStrategy, 0);\n    const readableSizeAlgorithm = ExtractSizeAlgorithm(readableStrategy);\n    const writableHighWaterMark = ExtractHighWaterMark(writableStrategy, 1);\n    const writableSizeAlgorithm = ExtractSizeAlgorithm(writableStrategy);\n\n    let startPromise_resolve!: (value: void | PromiseLike<void>) => void;\n    const startPromise = newPromise<void>(resolve => {\n      startPromise_resolve = resolve;\n    });\n\n    InitializeTransformStream(\n      this, startPromise, writableHighWaterMark, writableSizeAlgorithm, readableHighWaterMark, readableSizeAlgorithm\n    );\n    SetUpTransformStreamDefaultControllerFromTransformer(this, transformer);\n\n    if (transformer.start !== undefined) {\n      startPromise_resolve(transformer.start(this._transformStreamController));\n    } else {\n      startPromise_resolve(undefined);\n    }\n  }\n\n  /**\n   * The readable side of the transform stream.\n   */\n  get readable(): ReadableStream<O> {\n    if (!IsTransformStream(this)) {\n      throw streamBrandCheckException('readable');\n    }\n\n    return this._readable;\n  }\n\n  /**\n   * The writable side of the transform stream.\n   */\n  get writable(): WritableStream<I> {\n    if (!IsTransformStream(this)) {\n      throw streamBrandCheckException('writable');\n    }\n\n    return this._writable;\n  }\n}\n\nObject.defineProperties(TransformStream.prototype, {\n  readable: { enumerable: true },\n  writable: { enumerable: true }\n});\nif (typeof Symbol.toStringTag === 'symbol') {\n  Object.defineProperty(TransformStream.prototype, Symbol.toStringTag, {\n    value: 'TransformStream',\n    configurable: true\n  });\n}\n\nexport {\n  Transformer,\n  TransformerStartCallback,\n  TransformerFlushCallback,\n  TransformerTransformCallback\n};\n\n// Transform Stream Abstract Operations\n\nexport function CreateTransformStream<I, O>(startAlgorithm: () => void | PromiseLike<void>,\n                                            transformAlgorithm: (chunk: I) => Promise<void>,\n                                            flushAlgorithm: () => Promise<void>,\n                                            writableHighWaterMark = 1,\n                                            writableSizeAlgorithm: QueuingStrategySizeCallback<I> = () => 1,\n                                            readableHighWaterMark = 0,\n                                            readableSizeAlgorithm: QueuingStrategySizeCallback<O> = () => 1) {\n  assert(IsNonNegativeNumber(writableHighWaterMark));\n  assert(IsNonNegativeNumber(readableHighWaterMark));\n\n  const stream: TransformStream<I, O> = Object.create(TransformStream.prototype);\n\n  let startPromise_resolve!: (value: void | PromiseLike<void>) => void;\n  const startPromise = newPromise<void>(resolve => {\n    startPromise_resolve = resolve;\n  });\n\n  InitializeTransformStream(stream, startPromise, writableHighWaterMark, writableSizeAlgorithm, readableHighWaterMark,\n                            readableSizeAlgorithm);\n\n  const controller: TransformStreamDefaultController<O> = Object.create(TransformStreamDefaultController.prototype);\n\n  SetUpTransformStreamDefaultController(stream, controller, transformAlgorithm, flushAlgorithm);\n\n  const startResult = startAlgorithm();\n  startPromise_resolve(startResult);\n  return stream;\n}\n\nfunction InitializeTransformStream<I, O>(stream: TransformStream<I, O>,\n                                         startPromise: Promise<void>,\n                                         writableHighWaterMark: number,\n                                         writableSizeAlgorithm: QueuingStrategySizeCallback<I>,\n                                         readableHighWaterMark: number,\n                                         readableSizeAlgorithm: QueuingStrategySizeCallback<O>) {\n  function startAlgorithm(): Promise<void> {\n    return startPromise;\n  }\n\n  function writeAlgorithm(chunk: I): Promise<void> {\n    return TransformStreamDefaultSinkWriteAlgorithm(stream, chunk);\n  }\n\n  function abortAlgorithm(reason: any): Promise<void> {\n    return TransformStreamDefaultSinkAbortAlgorithm(stream, reason);\n  }\n\n  function closeAlgorithm(): Promise<void> {\n    return TransformStreamDefaultSinkCloseAlgorithm(stream);\n  }\n\n  stream._writable = CreateWritableStream(startAlgorithm, writeAlgorithm, closeAlgorithm, abortAlgorithm,\n                                          writableHighWaterMark, writableSizeAlgorithm);\n\n  function pullAlgorithm(): Promise<void> {\n    return TransformStreamDefaultSourcePullAlgorithm(stream);\n  }\n\n  function cancelAlgorithm(reason: any): Promise<void> {\n    TransformStreamErrorWritableAndUnblockWrite(stream, reason);\n    return promiseResolvedWith(undefined);\n  }\n\n  stream._readable = CreateReadableStream(startAlgorithm, pullAlgorithm, cancelAlgorithm, readableHighWaterMark,\n                                          readableSizeAlgorithm);\n\n  // The [[backpressure]] slot is set to undefined so that it can be initialised by TransformStreamSetBackpressure.\n  stream._backpressure = undefined!;\n  stream._backpressureChangePromise = undefined!;\n  stream._backpressureChangePromise_resolve = undefined!;\n  TransformStreamSetBackpressure(stream, true);\n\n  stream._transformStreamController = undefined!;\n}\n\nfunction IsTransformStream(x: unknown): x is TransformStream {\n  if (!typeIsObject(x)) {\n    return false;\n  }\n\n  if (!Object.prototype.hasOwnProperty.call(x, '_transformStreamController')) {\n    return false;\n  }\n\n  return x instanceof TransformStream;\n}\n\n// This is a no-op if both sides are already errored.\nfunction TransformStreamError(stream: TransformStream, e: any) {\n  ReadableStreamDefaultControllerError(\n    stream._readable._readableStreamController as ReadableStreamDefaultController<any>,\n    e\n  );\n  TransformStreamErrorWritableAndUnblockWrite(stream, e);\n}\n\nfunction TransformStreamErrorWritableAndUnblockWrite(stream: TransformStream, e: any) {\n  TransformStreamDefaultControllerClearAlgorithms(stream._transformStreamController);\n  WritableStreamDefaultControllerErrorIfNeeded(stream._writable._writableStreamController, e);\n  if (stream._backpressure) {\n    // Pretend that pull() was called to permit any pending write() calls to complete. TransformStreamSetBackpressure()\n    // cannot be called from enqueue() or pull() once the ReadableStream is errored, so this will will be the final time\n    // _backpressure is set.\n    TransformStreamSetBackpressure(stream, false);\n  }\n}\n\nfunction TransformStreamSetBackpressure(stream: TransformStream, backpressure: boolean) {\n  // Passes also when called during construction.\n  assert(stream._backpressure !== backpressure);\n\n  if (stream._backpressureChangePromise !== undefined) {\n    stream._backpressureChangePromise_resolve();\n  }\n\n  stream._backpressureChangePromise = newPromise(resolve => {\n    stream._backpressureChangePromise_resolve = resolve;\n  });\n\n  stream._backpressure = backpressure;\n}\n\n// Class TransformStreamDefaultController\n\n/**\n * Allows control of the {@link ReadableStream} and {@link WritableStream} of the associated {@link TransformStream}.\n *\n * @public\n */\nexport class TransformStreamDefaultController<O> {\n  /** @internal */\n  _controlledTransformStream: TransformStream<any, O>;\n  /** @internal */\n  _transformAlgorithm: (chunk: any) => Promise<void>;\n  /** @internal */\n  _flushAlgorithm: () => Promise<void>;\n\n  private constructor() {\n    throw new TypeError('Illegal constructor');\n  }\n\n  /**\n   * Returns the desired size to fill the readable side’s internal queue. It can be negative, if the queue is over-full.\n   */\n  get desiredSize(): number | null {\n    if (!IsTransformStreamDefaultController(this)) {\n      throw defaultControllerBrandCheckException('desiredSize');\n    }\n\n    const readableController = this._controlledTransformStream._readable._readableStreamController;\n    return ReadableStreamDefaultControllerGetDesiredSize(readableController as ReadableStreamDefaultController<O>);\n  }\n\n  /**\n   * Enqueues the given chunk `chunk` in the readable side of the controlled transform stream.\n   */\n  enqueue(chunk: O): void;\n  enqueue(chunk: O = undefined!): void {\n    if (!IsTransformStreamDefaultController(this)) {\n      throw defaultControllerBrandCheckException('enqueue');\n    }\n\n    TransformStreamDefaultControllerEnqueue(this, chunk);\n  }\n\n  /**\n   * Errors both the readable side and the writable side of the controlled transform stream, making all future\n   * interactions with it fail with the given error `e`. Any chunks queued for transformation will be discarded.\n   */\n  error(reason: any = undefined): void {\n    if (!IsTransformStreamDefaultController(this)) {\n      throw defaultControllerBrandCheckException('error');\n    }\n\n    TransformStreamDefaultControllerError(this, reason);\n  }\n\n  /**\n   * Closes the readable side and errors the writable side of the controlled transform stream. This is useful when the\n   * transformer only needs to consume a portion of the chunks written to the writable side.\n   */\n  terminate(): void {\n    if (!IsTransformStreamDefaultController(this)) {\n      throw defaultControllerBrandCheckException('terminate');\n    }\n\n    TransformStreamDefaultControllerTerminate(this);\n  }\n}\n\nObject.defineProperties(TransformStreamDefaultController.prototype, {\n  enqueue: { enumerable: true },\n  error: { enumerable: true },\n  terminate: { enumerable: true },\n  desiredSize: { enumerable: true }\n});\nif (typeof Symbol.toStringTag === 'symbol') {\n  Object.defineProperty(TransformStreamDefaultController.prototype, Symbol.toStringTag, {\n    value: 'TransformStreamDefaultController',\n    configurable: true\n  });\n}\n\n// Transform Stream Default Controller Abstract Operations\n\nfunction IsTransformStreamDefaultController<O = any>(x: any): x is TransformStreamDefaultController<O> {\n  if (!typeIsObject(x)) {\n    return false;\n  }\n\n  if (!Object.prototype.hasOwnProperty.call(x, '_controlledTransformStream')) {\n    return false;\n  }\n\n  return x instanceof TransformStreamDefaultController;\n}\n\nfunction SetUpTransformStreamDefaultController<I, O>(stream: TransformStream<I, O>,\n                                                     controller: TransformStreamDefaultController<O>,\n                                                     transformAlgorithm: (chunk: I) => Promise<void>,\n                                                     flushAlgorithm: () => Promise<void>) {\n  assert(IsTransformStream(stream));\n  assert(stream._transformStreamController === undefined);\n\n  controller._controlledTransformStream = stream;\n  stream._transformStreamController = controller;\n\n  controller._transformAlgorithm = transformAlgorithm;\n  controller._flushAlgorithm = flushAlgorithm;\n}\n\nfunction SetUpTransformStreamDefaultControllerFromTransformer<I, O>(stream: TransformStream<I, O>,\n                                                                    transformer: ValidatedTransformer<I, O>) {\n  const controller: TransformStreamDefaultController<O> = Object.create(TransformStreamDefaultController.prototype);\n\n  let transformAlgorithm = (chunk: I): Promise<void> => {\n    try {\n      TransformStreamDefaultControllerEnqueue(controller, chunk as unknown as O);\n      return promiseResolvedWith(undefined);\n    } catch (transformResultE) {\n      return promiseRejectedWith(transformResultE);\n    }\n  };\n\n  let flushAlgorithm: () => Promise<void> = () => promiseResolvedWith(undefined);\n\n  if (transformer.transform !== undefined) {\n    transformAlgorithm = chunk => transformer.transform!(chunk, controller);\n  }\n  if (transformer.flush !== undefined) {\n    flushAlgorithm = () => transformer.flush!(controller);\n  }\n\n  SetUpTransformStreamDefaultController(stream, controller, transformAlgorithm, flushAlgorithm);\n}\n\nfunction TransformStreamDefaultControllerClearAlgorithms(controller: TransformStreamDefaultController<any>) {\n  controller._transformAlgorithm = undefined!;\n  controller._flushAlgorithm = undefined!;\n}\n\nfunction TransformStreamDefaultControllerEnqueue<O>(controller: TransformStreamDefaultController<O>, chunk: O) {\n  const stream = controller._controlledTransformStream;\n  const readableController = stream._readable._readableStreamController as ReadableStreamDefaultController<O>;\n  if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(readableController)) {\n    throw new TypeError('Readable side is not in a state that permits enqueue');\n  }\n\n  // We throttle transform invocations based on the backpressure of the ReadableStream, but we still\n  // accept TransformStreamDefaultControllerEnqueue() calls.\n\n  try {\n    ReadableStreamDefaultControllerEnqueue(readableController, chunk);\n  } catch (e) {\n    // This happens when readableStrategy.size() throws.\n    TransformStreamErrorWritableAndUnblockWrite(stream, e);\n\n    throw stream._readable._storedError;\n  }\n\n  const backpressure = ReadableStreamDefaultControllerHasBackpressure(readableController);\n  if (backpressure !== stream._backpressure) {\n    assert(backpressure);\n    TransformStreamSetBackpressure(stream, true);\n  }\n}\n\nfunction TransformStreamDefaultControllerError(controller: TransformStreamDefaultController<any>, e: any) {\n  TransformStreamError(controller._controlledTransformStream, e);\n}\n\nfunction TransformStreamDefaultControllerPerformTransform<I, O>(controller: TransformStreamDefaultController<O>,\n                                                                chunk: I) {\n  const transformPromise = controller._transformAlgorithm(chunk);\n  return transformPromiseWith(transformPromise, undefined, r => {\n    TransformStreamError(controller._controlledTransformStream, r);\n    throw r;\n  });\n}\n\nfunction TransformStreamDefaultControllerTerminate<O>(controller: TransformStreamDefaultController<O>) {\n  const stream = controller._controlledTransformStream;\n  const readableController = stream._readable._readableStreamController as ReadableStreamDefaultController<O>;\n\n  ReadableStreamDefaultControllerClose(readableController);\n\n  const error = new TypeError('TransformStream terminated');\n  TransformStreamErrorWritableAndUnblockWrite(stream, error);\n}\n\n// TransformStreamDefaultSink Algorithms\n\nfunction TransformStreamDefaultSinkWriteAlgorithm<I, O>(stream: TransformStream<I, O>, chunk: I): Promise<void> {\n  assert(stream._writable._state === 'writable');\n\n  const controller = stream._transformStreamController;\n\n  if (stream._backpressure) {\n    const backpressureChangePromise = stream._backpressureChangePromise;\n    assert(backpressureChangePromise !== undefined);\n    return transformPromiseWith(backpressureChangePromise, () => {\n      const writable = stream._writable;\n      const state = writable._state;\n      if (state === 'erroring') {\n        throw writable._storedError;\n      }\n      assert(state === 'writable');\n      return TransformStreamDefaultControllerPerformTransform<I, O>(controller, chunk);\n    });\n  }\n\n  return TransformStreamDefaultControllerPerformTransform<I, O>(controller, chunk);\n}\n\nfunction TransformStreamDefaultSinkAbortAlgorithm(stream: TransformStream, reason: any): Promise<void> {\n  // abort() is not called synchronously, so it is possible for abort() to be called when the stream is already\n  // errored.\n  TransformStreamError(stream, reason);\n  return promiseResolvedWith(undefined);\n}\n\nfunction TransformStreamDefaultSinkCloseAlgorithm<I, O>(stream: TransformStream<I, O>): Promise<void> {\n  // stream._readable cannot change after construction, so caching it across a call to user code is safe.\n  const readable = stream._readable;\n\n  const controller = stream._transformStreamController;\n  const flushPromise = controller._flushAlgorithm();\n  TransformStreamDefaultControllerClearAlgorithms(controller);\n\n  // Return a promise that is fulfilled with undefined on success.\n  return transformPromiseWith(flushPromise, () => {\n    if (readable._state === 'errored') {\n      throw readable._storedError;\n    }\n    ReadableStreamDefaultControllerClose(readable._readableStreamController as ReadableStreamDefaultController<O>);\n  }, r => {\n    TransformStreamError(stream, r);\n    throw readable._storedError;\n  });\n}\n\n// TransformStreamDefaultSource Algorithms\n\nfunction TransformStreamDefaultSourcePullAlgorithm(stream: TransformStream): Promise<void> {\n  // Invariant. Enforced by the promises returned by start() and pull().\n  assert(stream._backpressure);\n\n  assert(stream._backpressureChangePromise !== undefined);\n\n  TransformStreamSetBackpressure(stream, false);\n\n  // Prevent the next pull() call until there is backpressure.\n  return stream._backpressureChangePromise;\n}\n\n// Helper functions for the TransformStreamDefaultController.\n\nfunction defaultControllerBrandCheckException(name: string): TypeError {\n  return new TypeError(\n    `TransformStreamDefaultController.prototype.${name} can only be used on a TransformStreamDefaultController`);\n}\n\n// Helper functions for the TransformStream.\n\nfunction streamBrandCheckException(name: string): TypeError {\n  return new TypeError(\n    `TransformStream.prototype.${name} can only be used on a TransformStream`);\n}\n"]},"metadata":{},"sourceType":"script"}