{"ast":null,"code":"import { h } from 'preact';\nimport classNames from 'classnames';\nimport statusBarStates from './StatusBarStates.js';\nimport calculateProcessingProgress from './calculateProcessingProgress.js';\nimport { UploadBtn, RetryBtn, CancelBtn, PauseResumeButton, DoneBtn, ProgressBarProcessing, ProgressBarError, ProgressBarUploading, ProgressBarComplete } from \"./Components.js\";\nconst {\n  STATE_ERROR,\n  STATE_WAITING,\n  STATE_PREPROCESSING,\n  STATE_UPLOADING,\n  STATE_POSTPROCESSING,\n  STATE_COMPLETE\n} = statusBarStates; // TODO: rename the function to StatusBarUI on the next major.\n\nexport default function StatusBar(props) {\n  const {\n    newFiles,\n    allowNewUpload,\n    isUploadInProgress,\n    isAllPaused,\n    resumableUploads,\n    error,\n    hideUploadButton,\n    hidePauseResumeButton,\n    hideCancelButton,\n    hideRetryButton,\n    recoveredState,\n    uploadState,\n    totalProgress,\n    files,\n    supportsUploadProgress,\n    hideAfterFinish,\n    isSomeGhost,\n    doneButtonHandler,\n    isUploadStarted,\n    i18n,\n    startUpload,\n    uppy,\n    isAllComplete,\n    showProgressDetails,\n    numUploads,\n    complete,\n    totalSize,\n    totalETA,\n    totalUploadedSize\n  } = props;\n  function getProgressValue() {\n    switch (uploadState) {\n      case STATE_POSTPROCESSING:\n      case STATE_PREPROCESSING:\n        {\n          const progress = calculateProcessingProgress(files);\n          if (progress.mode === 'determinate') {\n            return progress.value * 100;\n          }\n          return totalProgress;\n        }\n      case STATE_ERROR:\n        {\n          return null;\n        }\n      case STATE_UPLOADING:\n        {\n          if (!supportsUploadProgress) {\n            return null;\n          }\n          return totalProgress;\n        }\n      default:\n        return totalProgress;\n    }\n  }\n  function getIsIndeterminate() {\n    switch (uploadState) {\n      case STATE_POSTPROCESSING:\n      case STATE_PREPROCESSING:\n        {\n          const {\n            mode\n          } = calculateProcessingProgress(files);\n          return mode === 'indeterminate';\n        }\n      case STATE_UPLOADING:\n        {\n          if (!supportsUploadProgress) {\n            return true;\n          }\n          return false;\n        }\n      default:\n        return false;\n    }\n  }\n  function getIsHidden() {\n    if (recoveredState) {\n      return false;\n    }\n    switch (uploadState) {\n      case STATE_WAITING:\n        return hideUploadButton || newFiles === 0;\n      case STATE_COMPLETE:\n        return hideAfterFinish;\n      default:\n        return false;\n    }\n  }\n  const progressValue = getProgressValue();\n  const isHidden = getIsHidden();\n  const width = progressValue != null ? progressValue : 100;\n  const showUploadBtn = !error && newFiles && !isUploadInProgress && !isAllPaused && allowNewUpload && !hideUploadButton;\n  const showCancelBtn = !hideCancelButton && uploadState !== STATE_WAITING && uploadState !== STATE_COMPLETE;\n  const showPauseResumeBtn = resumableUploads && !hidePauseResumeButton && uploadState === STATE_UPLOADING;\n  const showRetryBtn = error && !isAllComplete && !hideRetryButton;\n  const showDoneBtn = doneButtonHandler && uploadState === STATE_COMPLETE;\n  const progressClassNames = classNames('uppy-StatusBar-progress', {\n    'is-indeterminate': getIsIndeterminate()\n  });\n  const statusBarClassNames = classNames('uppy-StatusBar', `is-${uploadState}`, {\n    'has-ghosts': isSomeGhost\n  });\n  return h(\"div\", {\n    className: statusBarClassNames,\n    \"aria-hidden\": isHidden\n  }, h(\"div\", {\n    className: progressClassNames,\n    style: {\n      width: `${width}%`\n    },\n    role: \"progressbar\",\n    \"aria-label\": `${width}%`,\n    \"aria-valuetext\": `${width}%`,\n    \"aria-valuemin\": \"0\",\n    \"aria-valuemax\": \"100\",\n    \"aria-valuenow\": progressValue\n  }), (() => {\n    switch (uploadState) {\n      case STATE_PREPROCESSING:\n      case STATE_POSTPROCESSING:\n        return h(ProgressBarProcessing, {\n          progress: calculateProcessingProgress(files)\n        });\n      case STATE_COMPLETE:\n        return h(ProgressBarComplete, {\n          i18n: i18n\n        });\n      case STATE_ERROR:\n        return h(ProgressBarError, {\n          error: error,\n          i18n: i18n,\n          numUploads: numUploads,\n          complete: complete\n        });\n      case STATE_UPLOADING:\n        return h(ProgressBarUploading, {\n          i18n: i18n,\n          supportsUploadProgress: supportsUploadProgress,\n          totalProgress: totalProgress,\n          showProgressDetails: showProgressDetails,\n          isUploadStarted: isUploadStarted,\n          isAllComplete: isAllComplete,\n          isAllPaused: isAllPaused,\n          newFiles: newFiles,\n          numUploads: numUploads,\n          complete: complete,\n          totalUploadedSize: totalUploadedSize,\n          totalSize: totalSize,\n          totalETA: totalETA,\n          startUpload: startUpload\n        });\n      default:\n        return null;\n    }\n  })(), h(\"div\", {\n    className: \"uppy-StatusBar-actions\"\n  }, recoveredState || showUploadBtn ? h(UploadBtn, {\n    newFiles: newFiles,\n    isUploadStarted: isUploadStarted,\n    recoveredState: recoveredState,\n    i18n: i18n,\n    isSomeGhost: isSomeGhost,\n    startUpload: startUpload,\n    uploadState: uploadState\n  }) : null, showRetryBtn ? h(RetryBtn, {\n    i18n: i18n,\n    uppy: uppy\n  }) : null, showPauseResumeBtn ? h(PauseResumeButton, {\n    isAllPaused: isAllPaused,\n    i18n: i18n,\n    isAllComplete: isAllComplete,\n    resumableUploads: resumableUploads,\n    uppy: uppy\n  }) : null, showCancelBtn ? h(CancelBtn, {\n    i18n: i18n,\n    uppy: uppy\n  }) : null, showDoneBtn ? h(DoneBtn, {\n    i18n: i18n,\n    doneButtonHandler: doneButtonHandler\n  }) : null));\n}","map":{"version":3,"names":["h","classNames","statusBarStates","calculateProcessingProgress","UploadBtn","RetryBtn","CancelBtn","PauseResumeButton","DoneBtn","ProgressBarProcessing","ProgressBarError","ProgressBarUploading","ProgressBarComplete","STATE_ERROR","STATE_WAITING","STATE_PREPROCESSING","STATE_UPLOADING","STATE_POSTPROCESSING","STATE_COMPLETE","StatusBar","props","newFiles","allowNewUpload","isUploadInProgress","isAllPaused","resumableUploads","error","hideUploadButton","hidePauseResumeButton","hideCancelButton","hideRetryButton","recoveredState","uploadState","totalProgress","files","supportsUploadProgress","hideAfterFinish","isSomeGhost","doneButtonHandler","isUploadStarted","i18n","startUpload","uppy","isAllComplete","showProgressDetails","numUploads","complete","totalSize","totalETA","totalUploadedSize","getProgressValue","progress","mode","value","getIsIndeterminate","getIsHidden","progressValue","isHidden","width","showUploadBtn","showCancelBtn","showPauseResumeBtn","showRetryBtn","showDoneBtn","progressClassNames","statusBarClassNames","className","style","role"],"sources":["/lab/node_modules/@uppy/status-bar/lib/StatusBarUI.js"],"sourcesContent":["import { h } from 'preact';\nimport classNames from 'classnames';\nimport statusBarStates from './StatusBarStates.js';\nimport calculateProcessingProgress from './calculateProcessingProgress.js';\nimport { UploadBtn, RetryBtn, CancelBtn, PauseResumeButton, DoneBtn, ProgressBarProcessing, ProgressBarError, ProgressBarUploading, ProgressBarComplete } from \"./Components.js\";\nconst {\n  STATE_ERROR,\n  STATE_WAITING,\n  STATE_PREPROCESSING,\n  STATE_UPLOADING,\n  STATE_POSTPROCESSING,\n  STATE_COMPLETE\n} = statusBarStates; // TODO: rename the function to StatusBarUI on the next major.\n\nexport default function StatusBar(props) {\n  const {\n    newFiles,\n    allowNewUpload,\n    isUploadInProgress,\n    isAllPaused,\n    resumableUploads,\n    error,\n    hideUploadButton,\n    hidePauseResumeButton,\n    hideCancelButton,\n    hideRetryButton,\n    recoveredState,\n    uploadState,\n    totalProgress,\n    files,\n    supportsUploadProgress,\n    hideAfterFinish,\n    isSomeGhost,\n    doneButtonHandler,\n    isUploadStarted,\n    i18n,\n    startUpload,\n    uppy,\n    isAllComplete,\n    showProgressDetails,\n    numUploads,\n    complete,\n    totalSize,\n    totalETA,\n    totalUploadedSize\n  } = props;\n\n  function getProgressValue() {\n    switch (uploadState) {\n      case STATE_POSTPROCESSING:\n      case STATE_PREPROCESSING:\n        {\n          const progress = calculateProcessingProgress(files);\n\n          if (progress.mode === 'determinate') {\n            return progress.value * 100;\n          }\n\n          return totalProgress;\n        }\n\n      case STATE_ERROR:\n        {\n          return null;\n        }\n\n      case STATE_UPLOADING:\n        {\n          if (!supportsUploadProgress) {\n            return null;\n          }\n\n          return totalProgress;\n        }\n\n      default:\n        return totalProgress;\n    }\n  }\n\n  function getIsIndeterminate() {\n    switch (uploadState) {\n      case STATE_POSTPROCESSING:\n      case STATE_PREPROCESSING:\n        {\n          const {\n            mode\n          } = calculateProcessingProgress(files);\n          return mode === 'indeterminate';\n        }\n\n      case STATE_UPLOADING:\n        {\n          if (!supportsUploadProgress) {\n            return true;\n          }\n\n          return false;\n        }\n\n      default:\n        return false;\n    }\n  }\n\n  function getIsHidden() {\n    if (recoveredState) {\n      return false;\n    }\n\n    switch (uploadState) {\n      case STATE_WAITING:\n        return hideUploadButton || newFiles === 0;\n\n      case STATE_COMPLETE:\n        return hideAfterFinish;\n\n      default:\n        return false;\n    }\n  }\n\n  const progressValue = getProgressValue();\n  const isHidden = getIsHidden();\n  const width = progressValue != null ? progressValue : 100;\n  const showUploadBtn = !error && newFiles && !isUploadInProgress && !isAllPaused && allowNewUpload && !hideUploadButton;\n  const showCancelBtn = !hideCancelButton && uploadState !== STATE_WAITING && uploadState !== STATE_COMPLETE;\n  const showPauseResumeBtn = resumableUploads && !hidePauseResumeButton && uploadState === STATE_UPLOADING;\n  const showRetryBtn = error && !isAllComplete && !hideRetryButton;\n  const showDoneBtn = doneButtonHandler && uploadState === STATE_COMPLETE;\n  const progressClassNames = classNames('uppy-StatusBar-progress', {\n    'is-indeterminate': getIsIndeterminate()\n  });\n  const statusBarClassNames = classNames('uppy-StatusBar', `is-${uploadState}`, {\n    'has-ghosts': isSomeGhost\n  });\n  return h(\"div\", {\n    className: statusBarClassNames,\n    \"aria-hidden\": isHidden\n  }, h(\"div\", {\n    className: progressClassNames,\n    style: {\n      width: `${width}%`\n    },\n    role: \"progressbar\",\n    \"aria-label\": `${width}%`,\n    \"aria-valuetext\": `${width}%`,\n    \"aria-valuemin\": \"0\",\n    \"aria-valuemax\": \"100\",\n    \"aria-valuenow\": progressValue\n  }), (() => {\n    switch (uploadState) {\n      case STATE_PREPROCESSING:\n      case STATE_POSTPROCESSING:\n        return h(ProgressBarProcessing, {\n          progress: calculateProcessingProgress(files)\n        });\n\n      case STATE_COMPLETE:\n        return h(ProgressBarComplete, {\n          i18n: i18n\n        });\n\n      case STATE_ERROR:\n        return h(ProgressBarError, {\n          error: error,\n          i18n: i18n,\n          numUploads: numUploads,\n          complete: complete\n        });\n\n      case STATE_UPLOADING:\n        return h(ProgressBarUploading, {\n          i18n: i18n,\n          supportsUploadProgress: supportsUploadProgress,\n          totalProgress: totalProgress,\n          showProgressDetails: showProgressDetails,\n          isUploadStarted: isUploadStarted,\n          isAllComplete: isAllComplete,\n          isAllPaused: isAllPaused,\n          newFiles: newFiles,\n          numUploads: numUploads,\n          complete: complete,\n          totalUploadedSize: totalUploadedSize,\n          totalSize: totalSize,\n          totalETA: totalETA,\n          startUpload: startUpload\n        });\n\n      default:\n        return null;\n    }\n  })(), h(\"div\", {\n    className: \"uppy-StatusBar-actions\"\n  }, recoveredState || showUploadBtn ? h(UploadBtn, {\n    newFiles: newFiles,\n    isUploadStarted: isUploadStarted,\n    recoveredState: recoveredState,\n    i18n: i18n,\n    isSomeGhost: isSomeGhost,\n    startUpload: startUpload,\n    uploadState: uploadState\n  }) : null, showRetryBtn ? h(RetryBtn, {\n    i18n: i18n,\n    uppy: uppy\n  }) : null, showPauseResumeBtn ? h(PauseResumeButton, {\n    isAllPaused: isAllPaused,\n    i18n: i18n,\n    isAllComplete: isAllComplete,\n    resumableUploads: resumableUploads,\n    uppy: uppy\n  }) : null, showCancelBtn ? h(CancelBtn, {\n    i18n: i18n,\n    uppy: uppy\n  }) : null, showDoneBtn ? h(DoneBtn, {\n    i18n: i18n,\n    doneButtonHandler: doneButtonHandler\n  }) : null));\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}