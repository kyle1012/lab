{"ast":null,"code":"import { createElementVNode as _createElementVNode, createTextVNode as _createTextVNode, toDisplayString as _toDisplayString, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"board-detail\"\n};\nconst _hoisted_2 = {\n  class: \"common-buttons\"\n};\nconst _hoisted_3 = {\n  class: \"board-contents\"\n};\nconst _hoisted_4 = {\n  class: \"w3-large\"\n};\nconst _hoisted_5 = /*#__PURE__*/_createElementVNode(\"br\", null, null, -1 /* HOISTED */);\nconst _hoisted_6 = {\n  class: \"board-contents\"\n};\nconst _hoisted_7 = {\n  class: \"common-buttons\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [_createElementVNode(\"button\", {\n    type: \"button\",\n    class: \"w3-button w3-round w3-blue-gray\",\n    onClick: _cache[0] || (_cache[0] = (...args) => $options.fnUpdate && $options.fnUpdate(...args))\n  }, \"수정\"), _createTextVNode(\"  \"), _createElementVNode(\"button\", {\n    type: \"button\",\n    class: \"w3-button w3-round w3-red\",\n    onClick: _cache[1] || (_cache[1] = (...args) => $options.fnDelete && $options.fnDelete(...args))\n  }, \"삭제\"), _createTextVNode(\"  \"), _createElementVNode(\"button\", {\n    type: \"button\",\n    class: \"w3-button w3-round w3-gray\",\n    onClick: _cache[2] || (_cache[2] = (...args) => $options.fnList && $options.fnList(...args))\n  }, \"목록\")]), _createElementVNode(\"div\", _hoisted_3, [_createElementVNode(\"h3\", null, _toDisplayString(_ctx.$route.query), 1 /* TEXT */), _createElementVNode(\"div\", null, [_createElementVNode(\"strong\", _hoisted_4, _toDisplayString(_ctx.author), 1 /* TEXT */), _hoisted_5, _createElementVNode(\"span\", null, _toDisplayString(_ctx.created_at), 1 /* TEXT */)])]), _createElementVNode(\"div\", _hoisted_6, [_createElementVNode(\"span\", null, _toDisplayString(_ctx.contents), 1 /* TEXT */)]), _createElementVNode(\"div\", _hoisted_7, [_createElementVNode(\"button\", {\n    type: \"button\",\n    class: \"w3-button w3-round w3-blue-gray\",\n    onClick: _cache[3] || (_cache[3] = (...args) => $options.fnUpdate && $options.fnUpdate(...args))\n  }, \"수정\"), _createTextVNode(\"  \"), _createElementVNode(\"button\", {\n    type: \"button\",\n    class: \"w3-button w3-round w3-red\",\n    onClick: _cache[4] || (_cache[4] = (...args) => $options.fnDelete && $options.fnDelete(...args))\n  }, \"삭제\"), _createTextVNode(\"  \"), _createElementVNode(\"button\", {\n    type: \"button\",\n    class: \"w3-button w3-round w3-gray\",\n    onClick: _cache[5] || (_cache[5] = (...args) => $options.fnList && $options.fnList(...args))\n  }, \"목록\")])]);\n}","map":{"version":3,"mappings":";;EACSA,KAAK,EAAC;AAAc;;EAClBA,KAAK,EAAC;AAAgB;;EAKtBA,KAAK,EAAC;AAAgB;;EAGfA,KAAK,EAAC;AAAU;gCACxBC,oBAAI;;EAIHD,KAAK,EAAC;AAAgB;;EAGtBA,KAAK,EAAC;AAAgB;;uBAjB7BE,oBAsBM,OAtBNC,UAsBM,GArBJF,oBAIM,OAJNG,UAIM,GAHJH,oBAA+F;IAAvFI,IAAI,EAAC,QAAQ;IAACL,KAAK,EAAC,iCAAiC;IAAMM,OAAK,yCAAEC,+CAAQ;KAAE,IAAE,oBAAS,IAC/F,uBAAyF;IAAjFF,IAAI,EAAC,QAAQ;IAACL,KAAK,EAAC,2BAA2B;IAAMM,OAAK,yCAAEC,+CAAQ;KAAE,IAAE,oBAAS,IACzF,uBAAwF;IAAhFF,IAAI,EAAC,QAAQ;IAACL,KAAK,EAAC,4BAA4B;IAAMM,OAAK,yCAAEC,2CAAM;KAAE,IAAE,KAEjFN,oBAOM,OAPNO,UAOM,GANJP,oBAA2B,6BAApBQ,WAAM,CAACC,KAAK,kBACnBT,oBAIM,cAHJA,oBAA8C,UAA9CU,UAA8C,mBAAlBF,WAAM,kBAClCG,UAAI,EACJX,oBAA6B,+BAApBQ,eAAU,sBAGvBR,oBAEM,OAFNY,UAEM,GADJZ,oBAA2B,+BAAlBQ,aAAQ,oBAEnBR,oBAIM,OAJNa,UAIM,GAHJb,oBAA+F;IAAvFI,IAAI,EAAC,QAAQ;IAACL,KAAK,EAAC,iCAAiC;IAAMM,OAAK,yCAAEC,+CAAQ;KAAE,IAAE,oBAAS,IAC/F,uBAAyF;IAAjFF,IAAI,EAAC,QAAQ;IAACL,KAAK,EAAC,2BAA2B;IAAMM,OAAK,yCAAEC,+CAAQ;KAAE,IAAE,oBAAS,IACzF,uBAAwF;IAAhFF,IAAI,EAAC,QAAQ;IAACL,KAAK,EAAC,4BAA4B;IAAMM,OAAK,yCAAEC,2CAAM;KAAE,IAAE","names":["class","_createElementVNode","_createElementBlock","_hoisted_1","_hoisted_2","type","onClick","$options","_hoisted_3","_ctx","query","_hoisted_4","_hoisted_5","_hoisted_6","_hoisted_7"],"sourceRoot":"","sources":["/lab/src/components/BoardDetail.vue"],"sourcesContent":["<template>\n    <div class=\"board-detail\">\n      <div class=\"common-buttons\">\n        <button type=\"button\" class=\"w3-button w3-round w3-blue-gray\" v-on:click=\"fnUpdate\">수정</button>&nbsp;\n        <button type=\"button\" class=\"w3-button w3-round w3-red\" v-on:click=\"fnDelete\">삭제</button>&nbsp;\n        <button type=\"button\" class=\"w3-button w3-round w3-gray\" v-on:click=\"fnList\">목록</button>\n      </div>\n      <div class=\"board-contents\">\n        <h3>{{ $route.query }}</h3>\n        <div>\n          <strong class=\"w3-large\">{{ author }}</strong>\n          <br>\n          <span>{{ created_at }}</span>\n        </div>\n      </div>\n      <div class=\"board-contents\">\n        <span>{{ contents }}</span>\n      </div>\n      <div class=\"common-buttons\">\n        <button type=\"button\" class=\"w3-button w3-round w3-blue-gray\" v-on:click=\"fnUpdate\">수정</button>&nbsp;\n        <button type=\"button\" class=\"w3-button w3-round w3-red\" v-on:click=\"fnDelete\">삭제</button>&nbsp;\n        <button type=\"button\" class=\"w3-button w3-round w3-gray\" v-on:click=\"fnList\">목록</button>\n      </div>\n    </div>\n  </template>\n  \n  <script>\n  export default {\n    data() { //변수생성\n      return {\n        all_list : {},\n        index : $route.query[0]\n      }\n    },\n    mounted() {\n      this.fnGetView()\n    },\n    methods: {\n      fnGetView() {\n        this.$axios.post('http://10.1.30.202:5000/detail', JSON.stringify(this.$route.query[0]),{\n        headers: {\n            \"Content-Type\": `application/json`,\n          },\n      }\n        )\n        .then((res) => {\n           this.all_list = res.data\n        }).catch((err) => {\n          if (err.message.indexOf('Network Error') > -1) {\n            alert('네트워크가 원활하지 않습니다.\\n잠시 후 다시 시도해주세요.')\n          }\n        })\n      },\n      fnList() {\n        delete this.requestBody.idx\n        this.$router.push({\n          path: './list',\n          query: this.requestBody\n        })\n      },\n      fnUpdate() {\n        this.$router.push({\n          path: './write',\n          query: this.requestBody\n        })\n      },\n      fnDelete() {\n        if (!confirm(\"삭제하시겠습니까?\")) return\n  \n        this.$axios.delete(this.$serverUrl + '/board/' + this.idx, {})\n            .then(() => {\n              alert('삭제되었습니다.')\n              this.fnList();\n            }).catch((err) => {\n          console.log(err);\n        })\n      }\n    }\n  }\n  </script>\n  <style scoped>\n  \n  \n  </style>"]},"metadata":{},"sourceType":"module"}