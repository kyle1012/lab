{"ast":null,"code":"/**\n * Recursive function, calls the original callback() when the directory is entirely parsed.\n *\n * @param {FileSystemDirectoryReader} directoryReader\n * @param {Array} oldEntries\n * @param {Function} logDropError\n * @param {Function} callback - called with ([ all files and directories in that directoryReader ])\n */\nexport default function getFilesAndDirectoriesFromDirectory(directoryReader, oldEntries, logDropError, _ref) {\n  let {\n    onSuccess\n  } = _ref;\n  directoryReader.readEntries(entries => {\n    const newEntries = [...oldEntries, ...entries]; // According to the FileSystem API spec, getFilesAndDirectoriesFromDirectory()\n    // must be called until it calls the onSuccess with an empty array.\n\n    if (entries.length) {\n      queueMicrotask(() => {\n        getFilesAndDirectoriesFromDirectory(directoryReader, newEntries, logDropError, {\n          onSuccess\n        });\n      }); // Done iterating this particular directory\n    } else {\n      onSuccess(newEntries);\n    }\n  },\n  // Make sure we resolve on error anyway, it's fine if only one directory couldn't be parsed!\n  error => {\n    logDropError(error);\n    onSuccess(oldEntries);\n  });\n}","map":{"version":3,"names":["getFilesAndDirectoriesFromDirectory","directoryReader","oldEntries","logDropError","_ref","onSuccess","readEntries","entries","newEntries","length","queueMicrotask","error"],"sources":["/lab/node_modules/@uppy/utils/lib/getDroppedFiles/utils/webkitGetAsEntryApi/getFilesAndDirectoriesFromDirectory.js"],"sourcesContent":["/**\n * Recursive function, calls the original callback() when the directory is entirely parsed.\n *\n * @param {FileSystemDirectoryReader} directoryReader\n * @param {Array} oldEntries\n * @param {Function} logDropError\n * @param {Function} callback - called with ([ all files and directories in that directoryReader ])\n */\nexport default function getFilesAndDirectoriesFromDirectory(directoryReader, oldEntries, logDropError, _ref) {\n  let {\n    onSuccess\n  } = _ref;\n  directoryReader.readEntries(entries => {\n    const newEntries = [...oldEntries, ...entries]; // According to the FileSystem API spec, getFilesAndDirectoriesFromDirectory()\n    // must be called until it calls the onSuccess with an empty array.\n\n    if (entries.length) {\n      queueMicrotask(() => {\n        getFilesAndDirectoriesFromDirectory(directoryReader, newEntries, logDropError, {\n          onSuccess\n        });\n      }); // Done iterating this particular directory\n    } else {\n      onSuccess(newEntries);\n    }\n  }, // Make sure we resolve on error anyway, it's fine if only one directory couldn't be parsed!\n  error => {\n    logDropError(error);\n    onSuccess(oldEntries);\n  });\n}"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAASA,mCAAmC,CAACC,eAAe,EAAEC,UAAU,EAAEC,YAAY,EAAEC,IAAI,EAAE;EAC3G,IAAI;IACFC;EACF,CAAC,GAAGD,IAAI;EACRH,eAAe,CAACK,WAAW,CAACC,OAAO,IAAI;IACrC,MAAMC,UAAU,GAAG,CAAC,GAAGN,UAAU,EAAE,GAAGK,OAAO,CAAC,CAAC,CAAC;IAChD;;IAEA,IAAIA,OAAO,CAACE,MAAM,EAAE;MAClBC,cAAc,CAAC,MAAM;QACnBV,mCAAmC,CAACC,eAAe,EAAEO,UAAU,EAAEL,YAAY,EAAE;UAC7EE;QACF,CAAC,CAAC;MACJ,CAAC,CAAC,CAAC,CAAC;IACN,CAAC,MAAM;MACLA,SAAS,CAACG,UAAU,CAAC;IACvB;EACF,CAAC;EAAE;EACHG,KAAK,IAAI;IACPR,YAAY,CAACQ,KAAK,CAAC;IACnBN,SAAS,CAACH,UAAU,CAAC;EACvB,CAAC,CAAC;AACJ"},"metadata":{},"sourceType":"module"}