{"ast":null,"code":"import { Fragment as _Fragment, withDirectives as _withDirectives, createVNode as _createVNode, mergeProps as _mergeProps, resolveDirective as _resolveDirective } from \"vue\";\n// Styles\nimport \"./VTextField.css\";\n\n// Components\nimport { filterFieldProps, makeVFieldProps, VField } from \"../VField/VField.mjs\";\nimport { filterInputProps, makeVInputProps, VInput } from \"../VInput/VInput.mjs\";\nimport { VCounter } from \"../VCounter/index.mjs\"; // Directives\nimport Intersect from \"../../directives/intersect/index.mjs\"; // Composables\nimport { forwardRefs } from \"../../composables/forwardRefs.mjs\";\nimport { useProxiedModel } from \"../../composables/proxiedModel.mjs\"; // Utilities\nimport { cloneVNode, computed, nextTick, ref } from 'vue';\nimport { callEvent, filterInputAttrs, genericComponent, useRender } from \"../../util/index.mjs\"; // Types\nconst activeTypes = ['color', 'file', 'time', 'date', 'datetime-local', 'week', 'month'];\nconst EventProp = [Function, Array];\nexport const VTextField = genericComponent()({\n  name: 'VTextField',\n  directives: {\n    Intersect\n  },\n  inheritAttrs: false,\n  props: {\n    autofocus: Boolean,\n    counter: [Boolean, Number, String],\n    counterValue: Function,\n    hint: String,\n    persistentHint: Boolean,\n    prefix: String,\n    placeholder: String,\n    persistentPlaceholder: Boolean,\n    persistentCounter: Boolean,\n    suffix: String,\n    type: {\n      type: String,\n      default: 'text'\n    },\n    ...makeVInputProps(),\n    ...makeVFieldProps()\n  },\n  emits: {\n    'click:control': e => true,\n    'click:input': e => true,\n    'update:modelValue': val => true\n  },\n  setup(props, _ref) {\n    let {\n      attrs,\n      emit,\n      slots\n    } = _ref;\n    const model = useProxiedModel(props, 'modelValue');\n    const counterValue = computed(() => {\n      return typeof props.counterValue === 'function' ? props.counterValue(model.value) : (model.value ?? '').toString().length;\n    });\n    const max = computed(() => {\n      if (attrs.maxlength) return attrs.maxlength;\n      if (!props.counter || typeof props.counter !== 'number' && typeof props.counter !== 'string') return undefined;\n      return props.counter;\n    });\n    function onIntersect(isIntersecting, entries) {\n      var _entries$0$target, _entries$0$target$foc;\n      if (!props.autofocus || !isIntersecting) return;\n      (_entries$0$target = entries[0].target) == null ? void 0 : (_entries$0$target$foc = _entries$0$target.focus) == null ? void 0 : _entries$0$target$foc.call(_entries$0$target);\n    }\n    const vInputRef = ref();\n    const vFieldRef = ref();\n    const isFocused = ref(false);\n    const inputRef = ref();\n    const isActive = computed(() => activeTypes.includes(props.type) || props.persistentPlaceholder || isFocused.value);\n    const messages = computed(() => {\n      return props.messages.length ? props.messages : isFocused.value || props.persistentHint ? props.hint : '';\n    });\n    function onFocus() {\n      if (inputRef.value !== document.activeElement) {\n        var _inputRef$value;\n        (_inputRef$value = inputRef.value) == null ? void 0 : _inputRef$value.focus();\n      }\n      if (!isFocused.value) isFocused.value = true;\n    }\n    function onControlClick(e) {\n      onFocus();\n      emit('click:control', e);\n    }\n    function onClear(e) {\n      e.stopPropagation();\n      onFocus();\n      nextTick(() => {\n        model.value = '';\n        callEvent(props['onClick:clear'], e);\n      });\n    }\n    function onInput(e) {\n      model.value = e.target.value;\n    }\n    useRender(() => {\n      const hasCounter = !!(slots.counter || props.counter || props.counterValue);\n      const hasDetails = !!(hasCounter || slots.details);\n      const [rootAttrs, inputAttrs] = filterInputAttrs(attrs);\n      const [{\n        modelValue: _,\n        ...inputProps\n      }] = filterInputProps(props);\n      const [fieldProps] = filterFieldProps(props);\n      return _createVNode(VInput, _mergeProps({\n        \"ref\": vInputRef,\n        \"modelValue\": model.value,\n        \"onUpdate:modelValue\": $event => model.value = $event,\n        \"class\": ['v-text-field', {\n          'v-text-field--prefixed': props.prefix,\n          'v-text-field--suffixed': props.suffix,\n          'v-text-field--flush-details': ['plain', 'underlined'].includes(props.variant)\n        }],\n        \"onClick:prepend\": props['onClick:prepend'],\n        \"onClick:append\": props['onClick:append']\n      }, rootAttrs, inputProps, {\n        \"messages\": messages.value\n      }), {\n        ...slots,\n        default: _ref2 => {\n          let {\n            id,\n            isDisabled,\n            isDirty,\n            isReadonly,\n            isValid\n          } = _ref2;\n          return _createVNode(VField, _mergeProps({\n            \"ref\": vFieldRef,\n            \"onMousedown\": e => {\n              if (e.target === inputRef.value) return;\n              e.preventDefault();\n            },\n            \"onClick:control\": onControlClick,\n            \"onClick:clear\": onClear,\n            \"onClick:prependInner\": props['onClick:prependInner'],\n            \"onClick:appendInner\": props['onClick:appendInner'],\n            \"role\": \"textbox\"\n          }, fieldProps, {\n            \"id\": id.value,\n            \"active\": isActive.value || isDirty.value,\n            \"dirty\": isDirty.value || props.dirty,\n            \"focused\": isFocused.value,\n            \"error\": isValid.value === false\n          }), {\n            ...slots,\n            default: _ref3 => {\n              let {\n                props: {\n                  class: fieldClass,\n                  ...slotProps\n                }\n              } = _ref3;\n              const inputNode = _withDirectives(_createVNode(\"input\", _mergeProps({\n                \"ref\": inputRef,\n                \"value\": model.value,\n                \"onInput\": onInput,\n                \"autofocus\": props.autofocus,\n                \"readonly\": isReadonly.value,\n                \"disabled\": isDisabled.value,\n                \"name\": props.name,\n                \"placeholder\": props.placeholder,\n                \"size\": 1,\n                \"type\": props.type,\n                \"onFocus\": onFocus,\n                \"onBlur\": () => isFocused.value = false\n              }, slotProps, inputAttrs), null), [[_resolveDirective(\"intersect\"), {\n                handler: onIntersect\n              }, null, {\n                once: true\n              }]]);\n              return _createVNode(_Fragment, null, [props.prefix && _createVNode(\"span\", {\n                \"class\": \"v-text-field__prefix\"\n              }, [props.prefix]), slots.default ? _createVNode(\"div\", {\n                \"class\": fieldClass,\n                \"onClick\": e => emit('click:input', e),\n                \"data-no-activator\": \"\"\n              }, [slots.default(), inputNode]) : cloneVNode(inputNode, {\n                class: fieldClass\n              }), props.suffix && _createVNode(\"span\", {\n                \"class\": \"v-text-field__suffix\"\n              }, [props.suffix])]);\n            }\n          });\n        },\n        details: hasDetails ? slotProps => {\n          var _slots$details;\n          return _createVNode(_Fragment, null, [(_slots$details = slots.details) == null ? void 0 : _slots$details.call(slots, slotProps), hasCounter && _createVNode(_Fragment, null, [_createVNode(\"span\", null, null), _createVNode(VCounter, {\n            \"active\": props.persistentCounter || isFocused.value,\n            \"value\": counterValue.value,\n            \"max\": max.value\n          }, slots.counter)])]);\n        } : undefined\n      });\n    });\n    return forwardRefs({}, vInputRef, vFieldRef, inputRef);\n  }\n});","map":{"version":3,"mappings":"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","names":["filterFieldProps","makeVFieldProps","VField","filterInputProps","makeVInputProps","VInput","VCounter","Intersect","forwardRefs","useProxiedModel","cloneVNode","computed","nextTick","ref","callEvent","filterInputAttrs","genericComponent","useRender","activeTypes","EventProp","Function","Array","VTextField","name","directives","inheritAttrs","props","autofocus","Boolean","counter","Number","String","counterValue","hint","persistentHint","prefix","placeholder","persistentPlaceholder","persistentCounter","suffix","type","default","emits","e","val","setup","attrs","emit","slots","model","value","toString","length","max","maxlength","undefined","onIntersect","isIntersecting","entries","target","_entries$0$target","focus","_entries$0$target$foc","vInputRef","vFieldRef","isFocused","inputRef","isActive","includes","messages","onFocus","document","activeElement","_inputRef$value","onControlClick","onClear","stopPropagation","onInput","hasCounter","hasDetails","details","rootAttrs","inputAttrs","modelValue","_","inputProps","fieldProps","variant","_ref2","id","isDisabled","isDirty","isReadonly","isValid","preventDefault","dirty","_ref3","class","fieldClass","slotProps","inputNode","handler","once","_slots$details"],"sources":["../../../src/components/VTextField/VTextField.tsx"],"sourcesContent":["// Styles\nimport './VTextField.sass'\n\n// Components\nimport { filterFieldProps, makeVFieldProps, VField } from '@/components/VField/VField'\nimport { filterInputProps, makeVInputProps, VInput } from '@/components/VInput/VInput'\nimport { VCounter } from '@/components/VCounter'\n\n// Directives\nimport Intersect from '@/directives/intersect'\n\n// Composables\nimport { forwardRefs } from '@/composables/forwardRefs'\nimport { useProxiedModel } from '@/composables/proxiedModel'\n\n// Utilities\nimport { cloneVNode, computed, nextTick, ref } from 'vue'\nimport { callEvent, filterInputAttrs, genericComponent, useRender } from '@/util'\n\n// Types\nimport type { PropType } from 'vue'\nimport type { MakeSlots, SlotsToProps } from '@/util'\nimport type { VFieldSlots } from '@/components/VField/VField'\nimport type { VInputSlots } from '@/components/VInput/VInput'\n\nconst activeTypes = ['color', 'file', 'time', 'date', 'datetime-local', 'week', 'month']\n\ntype EventProp<T = (...args: any[]) => any> = T | T[]\nconst EventProp = [Function, Array] as PropType<EventProp>\n\nexport const VTextField = genericComponent<new () => {\n  $props: SlotsToProps<Omit<VInputSlots & VFieldSlots, 'default'> & MakeSlots<{\n    default: []\n  }>>\n}>()({\n  name: 'VTextField',\n\n  directives: { Intersect },\n\n  inheritAttrs: false,\n\n  props: {\n    autofocus: Boolean,\n    counter: [Boolean, Number, String] as PropType<true | number | string>,\n    counterValue: Function as PropType<(value: any) => number>,\n    hint: String,\n    persistentHint: Boolean,\n    prefix: String,\n    placeholder: String,\n    persistentPlaceholder: Boolean,\n    persistentCounter: Boolean,\n    suffix: String,\n    type: {\n      type: String,\n      default: 'text',\n    },\n\n    ...makeVInputProps(),\n    ...makeVFieldProps(),\n  },\n\n  emits: {\n    'click:control': (e: MouseEvent) => true,\n    'click:input': (e: MouseEvent) => true,\n    'update:modelValue': (val: string) => true,\n  },\n\n  setup (props, { attrs, emit, slots }) {\n    const model = useProxiedModel(props, 'modelValue')\n    const counterValue = computed(() => {\n      return typeof props.counterValue === 'function'\n        ? props.counterValue(model.value)\n        : (model.value ?? '').toString().length\n    })\n    const max = computed(() => {\n      if (attrs.maxlength) return attrs.maxlength as undefined\n\n      if (\n        !props.counter ||\n        (typeof props.counter !== 'number' &&\n        typeof props.counter !== 'string')\n      ) return undefined\n\n      return props.counter\n    })\n\n    function onIntersect (\n      isIntersecting: boolean,\n      entries: IntersectionObserverEntry[]\n    ) {\n      if (!props.autofocus || !isIntersecting) return\n\n      (entries[0].target as HTMLInputElement)?.focus?.()\n    }\n\n    const vInputRef = ref<VInput>()\n    const vFieldRef = ref<VField>()\n    const isFocused = ref(false)\n    const inputRef = ref<HTMLInputElement>()\n    const isActive = computed(() => (\n      activeTypes.includes(props.type) ||\n      props.persistentPlaceholder ||\n      isFocused.value\n    ))\n    const messages = computed(() => {\n      return props.messages.length\n        ? props.messages\n        : (isFocused.value || props.persistentHint) ? props.hint : ''\n    })\n    function onFocus () {\n      if (inputRef.value !== document.activeElement) {\n        inputRef.value?.focus()\n      }\n\n      if (!isFocused.value) isFocused.value = true\n    }\n    function onControlClick (e: MouseEvent) {\n      onFocus()\n\n      emit('click:control', e)\n    }\n    function onClear (e: MouseEvent) {\n      e.stopPropagation()\n\n      onFocus()\n\n      nextTick(() => {\n        model.value = ''\n\n        callEvent(props['onClick:clear'], e)\n      })\n    }\n    function onInput (e: Event) {\n      model.value = (e.target as HTMLInputElement).value\n    }\n\n    useRender(() => {\n      const hasCounter = !!(slots.counter || props.counter || props.counterValue)\n      const hasDetails = !!(hasCounter || slots.details)\n      const [rootAttrs, inputAttrs] = filterInputAttrs(attrs)\n      const [{ modelValue: _, ...inputProps }] = filterInputProps(props)\n      const [fieldProps] = filterFieldProps(props)\n\n      return (\n        <VInput\n          ref={ vInputRef }\n          v-model={ model.value }\n          class={[\n            'v-text-field',\n            {\n              'v-text-field--prefixed': props.prefix,\n              'v-text-field--suffixed': props.suffix,\n              'v-text-field--flush-details': ['plain', 'underlined'].includes(props.variant),\n            },\n          ]}\n          onClick:prepend={ props['onClick:prepend'] }\n          onClick:append={ props['onClick:append'] }\n          { ...rootAttrs }\n          { ...inputProps }\n          messages={ messages.value }\n        >\n          {{\n            ...slots,\n            default: ({\n              id,\n              isDisabled,\n              isDirty,\n              isReadonly,\n              isValid,\n            }) => (\n              <VField\n                ref={ vFieldRef }\n                onMousedown={ (e: MouseEvent) => {\n                  if (e.target === inputRef.value) return\n\n                  e.preventDefault()\n                }}\n                onClick:control={ onControlClick }\n                onClick:clear={ onClear }\n                onClick:prependInner={ props['onClick:prependInner'] }\n                onClick:appendInner={ props['onClick:appendInner'] }\n                role=\"textbox\"\n                { ...fieldProps }\n                id={ id.value }\n                active={ isActive.value || isDirty.value }\n                dirty={ isDirty.value || props.dirty }\n                focused={ isFocused.value }\n                error={ isValid.value === false }\n              >\n                {{\n                  ...slots,\n                  default: ({\n                    props: { class: fieldClass, ...slotProps },\n                  }) => {\n                    const inputNode = (\n                      <input\n                        ref={ inputRef }\n                        value={ model.value }\n                        onInput={ onInput }\n                        v-intersect={[{\n                          handler: onIntersect,\n                        }, null, ['once']]}\n                        autofocus={ props.autofocus }\n                        readonly={ isReadonly.value }\n                        disabled={ isDisabled.value }\n                        name={ props.name }\n                        placeholder={ props.placeholder }\n                        size={ 1 }\n                        type={ props.type }\n                        onFocus={ onFocus }\n                        onBlur={ () => (isFocused.value = false) }\n                        { ...slotProps }\n                        { ...inputAttrs }\n                      />\n                    )\n\n                    return (\n                      <>\n                        { props.prefix && (\n                          <span class=\"v-text-field__prefix\">\n                            { props.prefix }\n                          </span>\n                        ) }\n\n                        { slots.default ? (\n                          <div\n                            class={ fieldClass }\n                            onClick={ e => emit('click:input', e) }\n                            data-no-activator=\"\"\n                          >\n                            { slots.default() }\n                            { inputNode }\n                          </div>\n                        ) : cloneVNode(inputNode, { class: fieldClass }) }\n\n                        { props.suffix && (\n                          <span class=\"v-text-field__suffix\">\n                            { props.suffix }\n                          </span>\n                        ) }\n                      </>\n                    )\n                  },\n                }}\n              </VField>\n            ),\n            details: hasDetails ? slotProps => (\n              <>\n                { slots.details?.(slotProps) }\n\n                { hasCounter && (\n                  <>\n                    <span />\n\n                    <VCounter\n                      active={ props.persistentCounter || isFocused.value }\n                      value={ counterValue.value }\n                      max={ max.value }\n                      v-slots={ slots.counter }\n                    />\n                  </>\n                ) }\n              </>\n            ) : undefined,\n          }}\n        </VInput>\n      )\n    })\n\n    return forwardRefs({}, vInputRef, vFieldRef, inputRef)\n  },\n})\n\nexport type VTextField = InstanceType<typeof VTextField>\n"]},"metadata":{},"sourceType":"module"}