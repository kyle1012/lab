{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, createElementVNode as _createElementVNode, vModelText as _vModelText, withDirectives as _withDirectives, toDisplayString as _toDisplayString, createTextVNode as _createTextVNode, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  id: \"app\"\n};\nconst _hoisted_2 = /*#__PURE__*/_createElementVNode(\"h1\", null, \"테스트\", -1 /* HOISTED */);\nconst _hoisted_3 = {\n  id: \"instance\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_dashboard = _resolveComponent(\"dashboard\");\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createElementVNode(\"div\", _hoisted_1, [_createVNode(_component_dashboard, {\n    ref: \"dash\",\n    uppy: $options.uppy\n  }, null, 8 /* PROPS */, [\"uppy\"])]), _hoisted_2, _createElementVNode(\"div\", _hoisted_3, [_withDirectives(_createElementVNode(\"input\", {\n    type: \"text\",\n    name: \"peo\",\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => _ctx.peo = $event)\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, _ctx.peo]]), _createTextVNode(_toDisplayString(_ctx.peo) + \" \", 1 /* TEXT */), _createElementVNode(\"div\", null, _toDisplayString(_ctx.text), 1 /* TEXT */)])], 64 /* STABLE_FRAGMENT */);\n}","map":{"version":3,"mappings":";;EACOA,EAAE,EAAC;AAAK;gCAMXC,oBAAY,YAAR,KAAG;;EACFD,EAAE,EAAC;AAAU;;;6DAPpBC,oBAKM,OALNC,UAKM,GAJJC,aAGEC;IAFAC,GAAG,EAAC,MAAM;IACTC,IAAI,EAAEC;uCAGTC,UAAY,EACZP,oBAGI,OAHJQ,UAGI,mBAFFR,oBAA4C;IAArCS,IAAI,EAAC,MAAM;IAACC,IAAI,EAAC,KAAK;+DAAUC,QAAG;iDAAHA,QAAG,uCAAKA,QAAG,IAAG,GACrD,qCAAqB,8BAAbA,SAAI","names":["id","_createElementVNode","_hoisted_1","_createVNode","_component_dashboard","ref","uppy","$options","_hoisted_2","_hoisted_3","type","name","_ctx"],"sourceRoot":"","sources":["/lab/src/components/HelloWorld.vue"],"sourcesContent":["<template>\n  <div id=\"app\">\n    <dashboard\n      ref=\"dash\"\n      :uppy=\"uppy\"\n    />\n  </div>\n    <h1>테스트</h1>\n    <div id=\"instance\">\n      <input type=\"text\" name=\"peo\" v-model=\"peo\">{{ peo }}\n      <div>{{ text }}</div>\n  </div>\n</template>\n<script>\nimport { Dashboard } from \"@uppy/vue\";\nimport \"@uppy/core/dist/style.css\";\nimport Uppy from \"@uppy/core\";\nimport XHRUpload from \"@uppy/xhr-upload\";\nimport \"@uppy/core/dist/style.css\";\nimport \"@uppy/dashboard/dist/style.css\";\nimport App from \"../App.vue\"\n\nexport default {\n  name: 'Hello',\n  components: {\n    Dashboard,\n    App,\n  },\n  data: () => {\n    return {\n      dep: '',\n      email: '',\n      mac1:'',\n      mac2:'',\n      num:'',\n      peo:'',\n    };\n  },\n  computed: {\n    uppy(){\n      return new Uppy()\n    .use(XHRUpload, {\n      endpoint: \"http://10.1.30.202:5000/upload\",\n      fieldName: \"file\",\n      bundle: true,\n      autoProceed: false,\n      })\n\n    .on('upload-success', (file, response) => {\n    console.log(file.name, response)\n    const users = response.body\n    this.dep = users.dep\n    this.email = users.email\n    this.mac1 = users.mac1\n    this.mac2 = users.mac2\n    this.num = users.num\n    this.peo = users.peo\n})\n  \n  },\n  beforeDestroy () {\n    this.uppy.close({ reason: 'unmount' })\n  }\n}\n}\n</script>"]},"metadata":{},"sourceType":"module"}