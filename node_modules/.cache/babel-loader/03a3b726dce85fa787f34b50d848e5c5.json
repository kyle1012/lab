{"ast":null,"code":"import Uppy from '@uppy/core';\nimport XHRUpload from '@uppy/xhr-upload';\nimport Dashboard from '@uppy/dashboard';\nimport Form from '@uppy/form';\nimport notify from './mixins/noty';\nimport '@uppy/core/dist/style.css';\nimport '@uppy/dashboard/dist/style.css';\nexport default {\n  props: {\n    maxFileSizeInBytes: {\n      type: Number,\n      required: true\n    }\n  },\n  mixins: [notify],\n  data() {\n    return {\n      payload: null,\n      previewPath: null,\n      disabled: true\n    };\n  },\n  mounted() {\n    this.instantiateUppy();\n  },\n  methods: {\n    instantiateUppy() {\n      this.uppy = Uppy({\n        debug: true,\n        autoProceed: true,\n        restrictions: {\n          maxFileSize: this.maxFileSizeInBytes,\n          minNumberOfFiles: 1,\n          maxNumberOfFiles: 1,\n          allowedFileTypes: ['image/*', 'video/*', 'application/msword', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document', 'application/pdf']\n        }\n      }).use(Dashboard, {\n        hideUploadButton: true,\n        inline: true,\n        height: 450,\n        target: this.$refs.dashboardContainer,\n        replaceTargetContent: true,\n        showProgressDetails: true,\n        browserBackButtonClose: true\n      }).use(XHRUpload, {\n        limit: 10,\n        endpoint: 'http://10.1.30.202:5000/upload',\n        formData: true,\n        fieldName: 'file'\n      });\n      this.uppy.on('complete', event => {\n        if (event.successful[0] !== undefined) {\n          this.payload = event.successful[0].response.body.path;\n          this.disabled = false;\n        }\n      });\n    },\n    updatePreviewPath({\n      path\n    }) {\n      this.previewPath = path;\n      return this;\n    },\n    resetUploader() {\n      this.uppy.reset();\n      this.disabled = true;\n      return this;\n    },\n    confirmUpload() {\n      if (this.payload) {\n        this.disabled = true;\n        axios.post('/store', {\n          file: this.payload\n        }).then(({\n          data\n        }) => {\n          this.updatePreviewPath(data).resetUploader().notify('success', 'Upload Successful!');\n        }).catch(err => {\n          console.error(err);\n          this.resetUploader();\n        });\n      } else notify('warning', `You don't have any file in processing`);\n    }\n  }\n};","map":{"version":3,"mappings":"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","names":["Uppy","XHRUpload","Dashboard","Form","notify","props","maxFileSizeInBytes","type","Number","required","mixins","data","payload","previewPath","disabled","mounted","instantiateUppy","methods","uppy","debug","autoProceed","restrictions","maxFileSize","minNumberOfFiles","maxNumberOfFiles","allowedFileTypes","use","hideUploadButton","inline","height","target","$refs","dashboardContainer","replaceTargetContent","showProgressDetails","browserBackButtonClose","limit","endpoint","formData","fieldName","on","event","successful","undefined","response","body","path","updatePreviewPath","resetUploader","reset","confirmUpload","axios","post","file","then","catch","err","console","error"],"sourceRoot":"","sources":["/lab/src/components/HelloWorld.vue"],"sourcesContent":["<template>\n  <form>\n      <div class=\"image-container mb-3\" v-if=\"previewPath\">\n          <img :src=\"previewPath\" alt=\"Uploaded Image Preview\">\n      </div>\n      <div class=\"form-group\">\n          <div ref=\"dashboardContainer\"></div>\n      </div>\n      <button :disabled=\"disabled\" @click.prevent=\"confirmUpload\" class=\"btn btn-primary btn-block mb-2\">Confirm upload</button>\n  </form>\n</template>\n\n<script>\n    import Uppy from '@uppy/core';\n    import XHRUpload from '@uppy/xhr-upload';\n    import Dashboard from '@uppy/dashboard';\n    import Form from '@uppy/form';\n\n    import notify from './mixins/noty';\n\n    import '@uppy/core/dist/style.css';\n    import '@uppy/dashboard/dist/style.css';\n\n    export default {\n        props: {\n            maxFileSizeInBytes: {\n                type: Number,\n                required: true\n            }\n        },\n        mixins: [notify],\n        data() {\n            return {\n                payload: null,\n                previewPath: null,\n                disabled: true\n            }\n        },\n        mounted() {\n            this.instantiateUppy()\n        },\n        methods: {\n            instantiateUppy() {\n                this.uppy = Uppy({\n                    debug: true,\n                    autoProceed: true,\n                    restrictions: {\n                        maxFileSize: this.maxFileSizeInBytes,\n                        minNumberOfFiles: 1,\n                        maxNumberOfFiles: 1,\n                        allowedFileTypes: ['image/*', 'video/*', 'application/msword', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document', 'application/pdf']\n                    }\n                })\n                    .use(Dashboard, {\n                        hideUploadButton: true,\n                        inline: true,\n                        height: 450,\n                        target: this.$refs.dashboardContainer,\n                        replaceTargetContent: true,\n                        showProgressDetails: true,\n                        browserBackButtonClose: true\n\n                    })\n                    .use(XHRUpload, {\n                        limit: 10,\n                        endpoint: 'http://10.1.30.202:5000/upload',\n                        formData: true,\n                        fieldName: 'file',\n                        }\n                    );\n\n                this.uppy.on('complete', (event) => {\n                    if(event.successful[0] !== undefined) {\n                        this.payload = event.successful[0].response.body.path;\n\n                        this.disabled = false;\n                    }\n                });\n            },\n            updatePreviewPath({path}) {\n                this.previewPath = path;\n\n                return this;\n            },\n            resetUploader() {\n                this.uppy.reset();\n                this.disabled = true;\n\n                return this;\n            },\n            confirmUpload() {\n                if(this.payload) {\n                    this.disabled = true;\n                    axios.post('/store', { file: this.payload })\n                        .then(({ data }) => {\n                            this.updatePreviewPath(data)\n                                .resetUploader()\n                                .notify('success', 'Upload Successful!');\n                        })\n                        .catch(err => {\n                            console.error(err);\n\n                            this.resetUploader();\n                        })\n                    ;\n                } else notify('warning', `You don't have any file in processing`);\n\n            }\n        }\n    };\n</script>\n\n<style scoped>\n    .image-container {\n        height: 150px;\n        width: 150px;\n        border-radius: 50%;\n        overflow: hidden;\n        margin-right: auto;\n        margin-left: auto;\n    }\n\n    .image-container > img {\n        width: inherit;\n        height: inherit;\n    }\n</style>"]},"metadata":{},"sourceType":"module"}