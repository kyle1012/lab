{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios';\nexport default {\n  components: {},\n  data() {\n    //변수생성\n    return {\n      list: {},\n      //리스트 데이터\n      no: '',\n      //게시판 숫자처리\n      pageNum: 0,\n      listArray: [],\n      pageSize: 5\n    };\n  },\n  mounted() {\n    this.fnGetList();\n  },\n  methods: {\n    fnGetList() {\n      axios.get(\"http://10.1.30.202:5000/board\").then(res => {\n        this.list = res.data; //서버에서 데이터를 목록으로 보내므로 바로 할당하여 사용할 수 있다.\n        this.listArray = res.data;\n        console.log(res.data);\n      }).catch(err => {\n        if (err.message.indexOf('Network Error') > -1) {\n          alert('네트워크가 원활하지 않습니다.\\n잠시 후 다시 시도해주세요.');\n        }\n      });\n    },\n    fnView(index) {\n      if (index = this.list[index - 1][0]) {\n        this.$router.push({\n          path: './BoardDetail',\n          query: this.list[index - 1]\n        });\n      }\n    }\n  },\n  computed: {\n    pageCount() {\n      const listLeng = this.listArray.length;\n      const listSize = this.pageSize;\n      let page = Math.floor(listLeng / listSize);\n      if (listLeng % listSize > 0) page += 1;\n      return page;\n    },\n    paginatedData() {\n      const start = this.pageNum * this.pageSize;\n      const end = start + this.pageSize;\n      return this.listArray.slice(start, end);\n    }\n  },\n  methods: {\n    nextPage() {\n      this.pageNum += 1;\n    },\n    prevPage() {\n      this.pageNum -= 1;\n    }\n  }\n};","map":{"version":3,"mappings":";AAgDA,OAAOA,KAAI,MAAO,OAAM;AACxB,eAAe;EACbC,UAAU,EAAE,CACZ,CAAC;EACDC,IAAI,GAAG;IAAE;IACP,OAAO;MACLC,IAAI,EAAE,CAAC,CAAC;MAAE;MACVC,EAAE,EAAE,EAAE;MAAE;MACRC,OAAO,EAAE,CAAC;MACVC,SAAS,EAAE,EAAE;MACbC,QAAQ,EAAE;IACZ;EACF,CAAC;EACDC,OAAO,GAAG;IACV,IAAI,CAACC,SAAS,EAAC;EACjB,CAAC;EACCC,OAAO,EAAE;IACLD,SAAS,GAAG;MACZT,KAAK,CAACW,GAAG,CAAC,+BAA+B,EACxCC,IAAI,CAAEC,GAAG,IAAK;QACb,IAAI,CAACV,IAAG,GAAIU,GAAG,CAACX,IAAG,EAAG;QACtB,IAAI,CAACI,SAAQ,GAAIO,GAAG,CAACX,IAAG;QACxBY,OAAO,CAACC,GAAG,CAACF,GAAG,CAACX,IAAI;MAGtB,CAAC,CAAC,CAACc,KAAK,CAAEC,GAAG,IAAK;QAChB,IAAIA,GAAG,CAACC,OAAO,CAACC,OAAO,CAAC,eAAe,IAAI,CAAC,CAAC,EAAE;UAC7CC,KAAK,CAAC,mCAAmC;QAC3C;MACF,CAAC;IACH,CAAC;IACDC,MAAM,CAACC,KAAK,EAAE;MACZ,IAAGA,KAAI,GAAI,IAAI,CAACnB,IAAI,CAACmB,KAAK,GAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAC;QACnC,IAAI,CAACC,OAAO,CAACC,IAAI,CAAC;UACnBC,IAAI,EAAE,eAAe;UACpBC,KAAK,EAAE,IAAI,CAACvB,IAAI,CAACmB,KAAK,GAAC,CAAC;QACxB,CAAC;MACH;IACA;EAEA,CAAC;EACDK,QAAQ,EAAE;IACRC,SAAS,GAAG;MACV,MAAMC,QAAO,GAAI,IAAI,CAACvB,SAAS,CAACwB,MAAM;MACtC,MAAMC,QAAO,GAAI,IAAI,CAACxB,QAAQ;MAC9B,IAAIyB,IAAG,GAAIC,IAAI,CAACC,KAAK,CAACL,QAAO,GAAIE,QAAQ,CAAC;MAC1C,IAAIF,QAAO,GAAIE,QAAO,GAAI,CAAC,EAAEC,IAAG,IAAK,CAAC;MAEtC,OAAOA,IAAI;IACb,CAAC;IAEDG,aAAa,GAAG;MACd,MAAMC,KAAI,GAAI,IAAI,CAAC/B,OAAM,GAAI,IAAI,CAACE,QAAQ;MAC1C,MAAM8B,GAAE,GAAID,KAAI,GAAI,IAAI,CAAC7B,QAAQ;MACjC,OAAO,IAAI,CAACD,SAAS,CAACgC,KAAK,CAACF,KAAK,EAAEC,GAAG,CAAC;IACzC;EAEF,CAAC;EAED3B,OAAO,EAAE;IACP6B,QAAQ,GAAG;MACT,IAAI,CAAClC,OAAM,IAAK,CAAC;IACnB,CAAC;IACDmC,QAAQ,GAAG;MACT,IAAI,CAACnC,OAAM,IAAK,CAAC;IACnB;EAEF;AACF","names":["axios","components","data","list","no","pageNum","listArray","pageSize","mounted","fnGetList","methods","get","then","res","console","log","catch","err","message","indexOf","alert","fnView","index","$router","push","path","query","computed","pageCount","listLeng","length","listSize","page","Math","floor","paginatedData","start","end","slice","nextPage","prevPage"],"sourceRoot":"","sources":["/lab/src/components/BoardList.vue"],"sourcesContent":["<template>\n  <div class=\"board-list\">\n    <div class=\"common-buttons\">\n      <button type=\"button\" class=\"w3-button w3-round w3-blue-gray\" v-on:click=\"fnWrite\">검색</button>\n    </div>\n    <table class=\"w3-table-all\">\n      <thead>\n      <tr>\n        <th>순번</th>  \n        <th>분류</th>\n        <th>제목</th>\n        <th>기안자</th>\n        <th>부서</th>\n        <th>기안일</th>\n        <th>처리일</th>\n      </tr>\n      </thead>\n      <tbody>\n    <template v-for=\"a in paginatedData\">\n      <tr v-for=\"(row, idx) in list\" :key=\"idx\">\n          <td>{{ row[0] }}</td>\n          <td>{{ row[2] }}</td>\n          <td><a @click=\"fnView(row[0])\">{{ row[3] }}</a></td>\n          <td>{{ row[4] }}</td>\n          <td>{{ row[8] }}</td>\n          <td>{{ row[14] }}</td>\n          <td>{{ row[17] }}</td>\n        </tr>\n      </template>\n      </tbody>\n    </table>\n  </div>\n  <div class=\"pagination d-flex justify-content-center align-items-center\">\n            <button :disabled=\"pageNum === 0\" class=\"btn next\" @click=\"prevPage()\">\n              <span class=\"material-icons-outlined\">\n                chevron_left\n              </span>\n            </button>\n            <span>{{ pageNum + 1 }} / {{ pageCount===0? 1: pageCount }}</span>\n            <button :disabled=\"pageNum >= pageCount - 1\" class=\"btn next\" @click=\"nextPage()\">\n              <span class=\"material-icons-outlined\">\n                chevron_right\n              </span>\n            </button>\n          </div>\n</template>\n\n<script>\nimport axios from 'axios'\nexport default {\n  components: {\n  },\n  data() { //변수생성\n    return {\n      list: {}, //리스트 데이터\n      no: '', //게시판 숫자처리\n      pageNum: 0,\n      listArray: [],\n      pageSize: 5,\n    }\n  },\n  mounted() {\n  this.fnGetList()\n},\n  methods: {\n      fnGetList() {\n      axios.get(\"http://10.1.30.202:5000/board\")\n      .then((res) => {      \n        this.list = res.data  //서버에서 데이터를 목록으로 보내므로 바로 할당하여 사용할 수 있다.\n        this.listArray = res.data\n        console.log(res.data)\n\n\n      }).catch((err) => {\n        if (err.message.indexOf('Network Error') > -1) {\n          alert('네트워크가 원활하지 않습니다.\\n잠시 후 다시 시도해주세요.')\n        }\n      })\n    },\n    fnView(index) {\n      if(index = this.list[index-1][0]){\n    this.$router.push({\n   path: './BoardDetail',\n    query: this.list[index-1]\n    })\n  }\n  },\n\n  },\n  computed: {\n    pageCount() {\n      const listLeng = this.listArray.length;\n      const listSize = this.pageSize;\n      let page = Math.floor(listLeng / listSize);\n      if (listLeng % listSize > 0) page += 1;\n\n      return page;\n    },\n\n    paginatedData() {\n      const start = this.pageNum * this.pageSize;\n      const end = start + this.pageSize;\n      return this.listArray.slice(start, end);\n    },\n\n  },\n\n  methods: {\n    nextPage() {\n      this.pageNum += 1;\n    },\n    prevPage() {\n      this.pageNum -= 1;\n    },\n\n  },\n}\n</script>"]},"metadata":{},"sourceType":"module"}