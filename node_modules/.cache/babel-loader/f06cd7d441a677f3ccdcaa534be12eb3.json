{"ast":null,"code":"import { openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = [\"src\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"iframe\", {\n    src: _ctx.pdfsrc,\n    style: {\n      \"width\": \"100%\",\n      \"height\": \"300px\",\n      \"border\": \"none\"\n    }\n  }, \"\\n  Oops! an error has occurred.\\n  \", 8 /* PROPS */, _hoisted_1);\n}","map":{"version":3,"mappings":";;;uBACAA,oBAEW;IAFFC,GAAG,EAAEC,WAAM;IAAEC,KAAgD,EAAhD;MAAA;MAAA;MAAA;IAAA;KAAiD,sCAErE","names":["_createElementBlock","src","_ctx","style"],"sourceRoot":"","sources":["/lab/src/components/pdfview.vue"],"sourcesContent":["<template>\n<iframe :src=\"pdfsrc\" style=\"width: 100%;height: 300px; border: none;\">\n  Oops! an error has occurred.\n  </iframe>\n</template>\n  <script>\n  export default {\n    data: () => ({\n      pdfsrc: '',\n    }),\n    methods: {\n      getPDFPath () {\n        return axios\n        .get('/lab/backend/files/123_11:26:00.pdf', {\n          responseType: \"blob\"\n        })\n        .then(response => {\n          console.log(\"Success\", response);\n          const blob = new Blob([response.data]);\n          const objectUrl = URL.createObjectURL(blob);\n          this.pdfsrc = objectUrl;\n        })\n       .catch(console.error); //\n      },\n      created() {\n          this.getPDFPath();\n      }\n  }\n}\n  </script>"]},"metadata":{},"sourceType":"module"}