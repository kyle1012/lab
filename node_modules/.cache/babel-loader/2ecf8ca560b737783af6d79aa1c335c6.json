{"ast":null,"code":"function encodeCharacter(character) {\n  return character.charCodeAt(0).toString(32);\n}\nfunction encodeFilename(name) {\n  let suffix = '';\n  return name.replace(/[^A-Z0-9]/ig, character => {\n    suffix += `-${encodeCharacter(character)}`;\n    return '/';\n  }) + suffix;\n}\n/**\n * Takes a file object and turns it into fileID, by converting file.name to lowercase,\n * removing extra characters and adding type, size and lastModified\n *\n * @param {object} file\n * @returns {string} the fileID\n */\n\nexport default function generateFileID(file) {\n  // It's tempting to do `[items].filter(Boolean).join('-')` here, but that\n  // is slower! simple string concatenation is fast\n  let id = 'uppy';\n  if (typeof file.name === 'string') {\n    id += `-${encodeFilename(file.name.toLowerCase())}`;\n  }\n  if (file.type !== undefined) {\n    id += `-${file.type}`;\n  }\n  if (file.meta && typeof file.meta.relativePath === 'string') {\n    id += `-${encodeFilename(file.meta.relativePath.toLowerCase())}`;\n  }\n  if (file.data.size !== undefined) {\n    id += `-${file.data.size}`;\n  }\n  if (file.data.lastModified !== undefined) {\n    id += `-${file.data.lastModified}`;\n  }\n  return id;\n}","map":{"version":3,"names":["encodeCharacter","character","charCodeAt","toString","encodeFilename","name","suffix","replace","generateFileID","file","id","toLowerCase","type","undefined","meta","relativePath","data","size","lastModified"],"sources":["/lab/node_modules/@uppy/utils/lib/generateFileID.js"],"sourcesContent":["function encodeCharacter(character) {\n  return character.charCodeAt(0).toString(32);\n}\n\nfunction encodeFilename(name) {\n  let suffix = '';\n  return name.replace(/[^A-Z0-9]/ig, character => {\n    suffix += `-${encodeCharacter(character)}`;\n    return '/';\n  }) + suffix;\n}\n/**\n * Takes a file object and turns it into fileID, by converting file.name to lowercase,\n * removing extra characters and adding type, size and lastModified\n *\n * @param {object} file\n * @returns {string} the fileID\n */\n\n\nexport default function generateFileID(file) {\n  // It's tempting to do `[items].filter(Boolean).join('-')` here, but that\n  // is slower! simple string concatenation is fast\n  let id = 'uppy';\n\n  if (typeof file.name === 'string') {\n    id += `-${encodeFilename(file.name.toLowerCase())}`;\n  }\n\n  if (file.type !== undefined) {\n    id += `-${file.type}`;\n  }\n\n  if (file.meta && typeof file.meta.relativePath === 'string') {\n    id += `-${encodeFilename(file.meta.relativePath.toLowerCase())}`;\n  }\n\n  if (file.data.size !== undefined) {\n    id += `-${file.data.size}`;\n  }\n\n  if (file.data.lastModified !== undefined) {\n    id += `-${file.data.lastModified}`;\n  }\n\n  return id;\n}"],"mappings":"AAAA,SAASA,eAAe,CAACC,SAAS,EAAE;EAClC,OAAOA,SAAS,CAACC,UAAU,CAAC,CAAC,CAAC,CAACC,QAAQ,CAAC,EAAE,CAAC;AAC7C;AAEA,SAASC,cAAc,CAACC,IAAI,EAAE;EAC5B,IAAIC,MAAM,GAAG,EAAE;EACf,OAAOD,IAAI,CAACE,OAAO,CAAC,aAAa,EAAEN,SAAS,IAAI;IAC9CK,MAAM,IAAK,IAAGN,eAAe,CAACC,SAAS,CAAE,EAAC;IAC1C,OAAO,GAAG;EACZ,CAAC,CAAC,GAAGK,MAAM;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,eAAe,SAASE,cAAc,CAACC,IAAI,EAAE;EAC3C;EACA;EACA,IAAIC,EAAE,GAAG,MAAM;EAEf,IAAI,OAAOD,IAAI,CAACJ,IAAI,KAAK,QAAQ,EAAE;IACjCK,EAAE,IAAK,IAAGN,cAAc,CAACK,IAAI,CAACJ,IAAI,CAACM,WAAW,EAAE,CAAE,EAAC;EACrD;EAEA,IAAIF,IAAI,CAACG,IAAI,KAAKC,SAAS,EAAE;IAC3BH,EAAE,IAAK,IAAGD,IAAI,CAACG,IAAK,EAAC;EACvB;EAEA,IAAIH,IAAI,CAACK,IAAI,IAAI,OAAOL,IAAI,CAACK,IAAI,CAACC,YAAY,KAAK,QAAQ,EAAE;IAC3DL,EAAE,IAAK,IAAGN,cAAc,CAACK,IAAI,CAACK,IAAI,CAACC,YAAY,CAACJ,WAAW,EAAE,CAAE,EAAC;EAClE;EAEA,IAAIF,IAAI,CAACO,IAAI,CAACC,IAAI,KAAKJ,SAAS,EAAE;IAChCH,EAAE,IAAK,IAAGD,IAAI,CAACO,IAAI,CAACC,IAAK,EAAC;EAC5B;EAEA,IAAIR,IAAI,CAACO,IAAI,CAACE,YAAY,KAAKL,SAAS,EAAE;IACxCH,EAAE,IAAK,IAAGD,IAAI,CAACO,IAAI,CAACE,YAAa,EAAC;EACpC;EAEA,OAAOR,EAAE;AACX"},"metadata":{},"sourceType":"module"}