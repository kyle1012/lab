{"ast":null,"code":"var wildcard = require('wildcard');\nvar reMimePartSplit = /[\\/\\+\\.]/;\n\n/**\n  # mime-match\n\n  A simple function to checker whether a target mime type matches a mime-type\n  pattern (e.g. image/jpeg matches image/jpeg OR image/*).\n\n  ## Example Usage\n\n  <<< example.js\n\n**/\nmodule.exports = function (target, pattern) {\n  function test(pattern) {\n    var result = wildcard(pattern, target, reMimePartSplit);\n\n    // ensure that we have a valid mime type (should have two parts)\n    return result && result.length >= 2;\n  }\n  return pattern ? test(pattern.split(';')[0]) : test;\n};","map":{"version":3,"names":["wildcard","require","reMimePartSplit","module","exports","target","pattern","test","result","length","split"],"sources":["/lab/node_modules/mime-match/index.js"],"sourcesContent":["var wildcard = require('wildcard');\nvar reMimePartSplit = /[\\/\\+\\.]/;\n\n/**\n  # mime-match\n\n  A simple function to checker whether a target mime type matches a mime-type\n  pattern (e.g. image/jpeg matches image/jpeg OR image/*).\n\n  ## Example Usage\n\n  <<< example.js\n\n**/\nmodule.exports = function(target, pattern) {\n  function test(pattern) {\n    var result = wildcard(pattern, target, reMimePartSplit);\n\n    // ensure that we have a valid mime type (should have two parts)\n    return result && result.length >= 2;\n  }\n\n  return pattern ? test(pattern.split(';')[0]) : test;\n};\n"],"mappings":"AAAA,IAAIA,QAAQ,GAAGC,OAAO,CAAC,UAAU,CAAC;AAClC,IAAIC,eAAe,GAAG,UAAU;;AAEhC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAC,MAAM,CAACC,OAAO,GAAG,UAASC,MAAM,EAAEC,OAAO,EAAE;EACzC,SAASC,IAAI,CAACD,OAAO,EAAE;IACrB,IAAIE,MAAM,GAAGR,QAAQ,CAACM,OAAO,EAAED,MAAM,EAAEH,eAAe,CAAC;;IAEvD;IACA,OAAOM,MAAM,IAAIA,MAAM,CAACC,MAAM,IAAI,CAAC;EACrC;EAEA,OAAOH,OAAO,GAAGC,IAAI,CAACD,OAAO,CAACI,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGH,IAAI;AACrD,CAAC"},"metadata":{},"sourceType":"script"}