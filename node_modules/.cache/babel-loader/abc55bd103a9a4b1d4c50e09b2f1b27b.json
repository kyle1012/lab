{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nfunction _classPrivateFieldLooseBase(receiver, privateKey) {\n  if (!Object.prototype.hasOwnProperty.call(receiver, privateKey)) {\n    throw new TypeError(\"attempted to use private field on non-instance\");\n  }\n  return receiver;\n}\nvar id = 0;\nfunction _classPrivateFieldLooseKey(name) {\n  return \"__private_\" + id++ + \"_\" + name;\n}\nimport { h } from 'preact';\nimport { UIPlugin } from '@uppy/core';\nimport StatusBar from '@uppy/status-bar';\nimport Informer from '@uppy/informer';\nimport ThumbnailGenerator from '@uppy/thumbnail-generator';\nimport findAllDOMElements from '@uppy/utils/lib/findAllDOMElements';\nimport toArray from '@uppy/utils/lib/toArray';\nimport getDroppedFiles from '@uppy/utils/lib/getDroppedFiles';\nimport { nanoid } from 'nanoid/non-secure';\nimport memoizeOne from 'memoize-one';\nimport FOCUSABLE_ELEMENTS from '@uppy/utils/lib/FOCUSABLE_ELEMENTS';\nimport * as trapFocus from './utils/trapFocus.js';\nimport createSuperFocus from './utils/createSuperFocus.js';\nimport DashboardUI from \"./components/Dashboard.js\";\nconst packageJson = {\n  \"version\": \"3.1.0\"\n};\nimport locale from './locale.js';\nconst memoize = memoizeOne.default || memoizeOne;\nconst TAB_KEY = 9;\nconst ESC_KEY = 27;\nfunction createPromise() {\n  const o = {};\n  o.promise = new Promise((resolve, reject) => {\n    o.resolve = resolve;\n    o.reject = reject;\n  });\n  return o;\n}\nfunction defaultPickerIcon() {\n  return h(\"svg\", {\n    \"aria-hidden\": \"true\",\n    focusable: \"false\",\n    width: \"30\",\n    height: \"30\",\n    viewBox: \"0 0 30 30\"\n  }, h(\"path\", {\n    d: \"M15 30c8.284 0 15-6.716 15-15 0-8.284-6.716-15-15-15C6.716 0 0 6.716 0 15c0 8.284 6.716 15 15 15zm4.258-12.676v6.846h-8.426v-6.846H5.204l9.82-12.364 9.82 12.364H19.26z\"\n  }));\n}\n/**\n * Dashboard UI with previews, metadata editing, tabs for various services and more\n */\n\nvar _openFileEditorWhenFilesAdded = /*#__PURE__*/_classPrivateFieldLooseKey(\"openFileEditorWhenFilesAdded\");\nvar _attachRenderFunctionToTarget = /*#__PURE__*/_classPrivateFieldLooseKey(\"attachRenderFunctionToTarget\");\nvar _isTargetSupported = /*#__PURE__*/_classPrivateFieldLooseKey(\"isTargetSupported\");\nvar _getAcquirers = /*#__PURE__*/_classPrivateFieldLooseKey(\"getAcquirers\");\nvar _getProgressIndicators = /*#__PURE__*/_classPrivateFieldLooseKey(\"getProgressIndicators\");\nvar _getEditors = /*#__PURE__*/_classPrivateFieldLooseKey(\"getEditors\");\nexport default class Dashboard extends UIPlugin {\n  constructor(uppy, _opts) {\n    var _this;\n    super(uppy, _opts);\n    _this = this;\n    this.removeTarget = plugin => {\n      const pluginState = this.getPluginState(); // filter out the one we want to remove\n\n      const newTargets = pluginState.targets.filter(target => target.id !== plugin.id);\n      this.setPluginState({\n        targets: newTargets\n      });\n    };\n    this.addTarget = plugin => {\n      const callerPluginId = plugin.id || plugin.constructor.name;\n      const callerPluginName = plugin.title || callerPluginId;\n      const callerPluginType = plugin.type;\n      if (callerPluginType !== 'acquirer' && callerPluginType !== 'progressindicator' && callerPluginType !== 'editor') {\n        const msg = 'Dashboard: can only be targeted by plugins of types: acquirer, progressindicator, editor';\n        this.uppy.log(msg, 'error');\n        return undefined;\n      }\n      const target = {\n        id: callerPluginId,\n        name: callerPluginName,\n        type: callerPluginType\n      };\n      const state = this.getPluginState();\n      const newTargets = state.targets.slice();\n      newTargets.push(target);\n      this.setPluginState({\n        targets: newTargets\n      });\n      return this.el;\n    };\n    this.hideAllPanels = () => {\n      const state = this.getPluginState();\n      const update = {\n        activePickerPanel: false,\n        showAddFilesPanel: false,\n        activeOverlayType: null,\n        fileCardFor: null,\n        showFileEditor: false\n      };\n      if (state.activePickerPanel === update.activePickerPanel && state.showAddFilesPanel === update.showAddFilesPanel && state.showFileEditor === update.showFileEditor && state.activeOverlayType === update.activeOverlayType) {\n        // avoid doing a state update if nothing changed\n        return;\n      }\n      this.setPluginState(update);\n    };\n    this.showPanel = id => {\n      const {\n        targets\n      } = this.getPluginState();\n      const activePickerPanel = targets.filter(target => {\n        return target.type === 'acquirer' && target.id === id;\n      })[0];\n      this.setPluginState({\n        activePickerPanel,\n        activeOverlayType: 'PickerPanel'\n      });\n      this.uppy.emit('dashboard:show-panel', id);\n    };\n    this.canEditFile = file => {\n      const {\n        targets\n      } = this.getPluginState();\n      const editors = _classPrivateFieldLooseBase(this, _getEditors)[_getEditors](targets);\n      return editors.some(target => this.uppy.getPlugin(target.id).canEditFile(file));\n    };\n    this.openFileEditor = file => {\n      const {\n        targets\n      } = this.getPluginState();\n      const editors = _classPrivateFieldLooseBase(this, _getEditors)[_getEditors](targets);\n      this.setPluginState({\n        showFileEditor: true,\n        fileCardFor: file.id || null,\n        activeOverlayType: 'FileEditor'\n      });\n      editors.forEach(editor => {\n        this.uppy.getPlugin(editor.id).selectFile(file);\n      });\n    };\n    this.saveFileEditor = () => {\n      const {\n        targets\n      } = this.getPluginState();\n      const editors = _classPrivateFieldLooseBase(this, _getEditors)[_getEditors](targets);\n      editors.forEach(editor => {\n        this.uppy.getPlugin(editor.id).save();\n      });\n      this.hideAllPanels();\n    };\n    this.openModal = () => {\n      const {\n        promise,\n        resolve\n      } = createPromise(); // save scroll position\n\n      this.savedScrollPosition = window.pageYOffset; // save active element, so we can restore focus when modal is closed\n\n      this.savedActiveElement = document.activeElement;\n      if (this.opts.disablePageScrollWhenModalOpen) {\n        document.body.classList.add('uppy-Dashboard-isFixed');\n      }\n      if (this.opts.animateOpenClose && this.getPluginState().isClosing) {\n        const handler = () => {\n          this.setPluginState({\n            isHidden: false\n          });\n          this.el.removeEventListener('animationend', handler, false);\n          resolve();\n        };\n        this.el.addEventListener('animationend', handler, false);\n      } else {\n        this.setPluginState({\n          isHidden: false\n        });\n        resolve();\n      }\n      if (this.opts.browserBackButtonClose) {\n        this.updateBrowserHistory();\n      } // handle ESC and TAB keys in modal dialog\n\n      document.addEventListener('keydown', this.handleKeyDownInModal);\n      this.uppy.emit('dashboard:modal-open');\n      return promise;\n    };\n    this.closeModal = function (opts) {\n      if (opts === void 0) {\n        opts = {};\n      }\n      const {\n        // Whether the modal is being closed by the user (`true`) or by other means (e.g. browser back button)\n        manualClose = true\n      } = opts;\n      const {\n        isHidden,\n        isClosing\n      } = _this.getPluginState();\n      if (isHidden || isClosing) {\n        // short-circuit if animation is ongoing\n        return undefined;\n      }\n      const {\n        promise,\n        resolve\n      } = createPromise();\n      if (_this.opts.disablePageScrollWhenModalOpen) {\n        document.body.classList.remove('uppy-Dashboard-isFixed');\n      }\n      if (_this.opts.animateOpenClose) {\n        _this.setPluginState({\n          isClosing: true\n        });\n        const handler = () => {\n          _this.setPluginState({\n            isHidden: true,\n            isClosing: false\n          });\n          _this.superFocus.cancel();\n          _this.savedActiveElement.focus();\n          _this.el.removeEventListener('animationend', handler, false);\n          resolve();\n        };\n        _this.el.addEventListener('animationend', handler, false);\n      } else {\n        _this.setPluginState({\n          isHidden: true\n        });\n        _this.superFocus.cancel();\n        _this.savedActiveElement.focus();\n        resolve();\n      } // handle ESC and TAB keys in modal dialog\n\n      document.removeEventListener('keydown', _this.handleKeyDownInModal);\n      if (manualClose) {\n        if (_this.opts.browserBackButtonClose) {\n          var _history$state;\n\n          // Make sure that the latest entry in the history state is our modal name\n          // eslint-disable-next-line no-restricted-globals\n          if ((_history$state = history.state) != null && _history$state[_this.modalName]) {\n            // Go back in history to clear out the entry we created (ultimately closing the modal)\n            // eslint-disable-next-line no-restricted-globals\n            history.back();\n          }\n        }\n      }\n      _this.uppy.emit('dashboard:modal-closed');\n      return promise;\n    };\n    this.isModalOpen = () => {\n      return !this.getPluginState().isHidden || false;\n    };\n    this.requestCloseModal = () => {\n      if (this.opts.onRequestCloseModal) {\n        return this.opts.onRequestCloseModal();\n      }\n      return this.closeModal();\n    };\n    this.setDarkModeCapability = isDarkModeOn => {\n      const {\n        capabilities\n      } = this.uppy.getState();\n      this.uppy.setState({\n        capabilities: {\n          ...capabilities,\n          darkMode: isDarkModeOn\n        }\n      });\n    };\n    this.handleSystemDarkModeChange = event => {\n      const isDarkModeOnNow = event.matches;\n      this.uppy.log(`[Dashboard] Dark mode is ${isDarkModeOnNow ? 'on' : 'off'}`);\n      this.setDarkModeCapability(isDarkModeOnNow);\n    };\n    this.toggleFileCard = (show, fileID) => {\n      const file = this.uppy.getFile(fileID);\n      if (show) {\n        this.uppy.emit('dashboard:file-edit-start', file);\n      } else {\n        this.uppy.emit('dashboard:file-edit-complete', file);\n      }\n      this.setPluginState({\n        fileCardFor: show ? fileID : null,\n        activeOverlayType: show ? 'FileCard' : null\n      });\n    };\n    this.toggleAddFilesPanel = show => {\n      this.setPluginState({\n        showAddFilesPanel: show,\n        activeOverlayType: show ? 'AddFiles' : null\n      });\n    };\n    this.addFiles = files => {\n      const descriptors = files.map(file => ({\n        source: this.id,\n        name: file.name,\n        type: file.type,\n        data: file,\n        meta: {\n          // path of the file relative to the ancestor directory the user selected.\n          // e.g. 'docs/Old Prague/airbnb.pdf'\n          relativePath: file.relativePath || file.webkitRelativePath || null\n        }\n      }));\n      try {\n        this.uppy.addFiles(descriptors);\n      } catch (err) {\n        this.uppy.log(err);\n      }\n    };\n    this.startListeningToResize = () => {\n      // Watch for Dashboard container (`.uppy-Dashboard-inner`) resize\n      // and update containerWidth/containerHeight in plugin state accordingly.\n      // Emits first event on initialization.\n      this.resizeObserver = new ResizeObserver(entries => {\n        const uppyDashboardInnerEl = entries[0];\n        const {\n          width,\n          height\n        } = uppyDashboardInnerEl.contentRect;\n        this.uppy.log(`[Dashboard] resized: ${width} / ${height}`, 'debug');\n        this.setPluginState({\n          containerWidth: width,\n          containerHeight: height,\n          areInsidesReadyToBeVisible: true\n        });\n      });\n      this.resizeObserver.observe(this.el.querySelector('.uppy-Dashboard-inner')); // If ResizeObserver fails to emit an event telling us what size to use - default to the mobile view\n\n      this.makeDashboardInsidesVisibleAnywayTimeout = setTimeout(() => {\n        const pluginState = this.getPluginState();\n        const isModalAndClosed = !this.opts.inline && pluginState.isHidden;\n        if (\n        // if ResizeObserver hasn't yet fired,\n        !pluginState.areInsidesReadyToBeVisible // and it's not due to the modal being closed\n        && !isModalAndClosed) {\n          this.uppy.log(\"[Dashboard] resize event didn't fire on time: defaulted to mobile layout\", 'debug');\n          this.setPluginState({\n            areInsidesReadyToBeVisible: true\n          });\n        }\n      }, 1000);\n    };\n    this.stopListeningToResize = () => {\n      this.resizeObserver.disconnect();\n      clearTimeout(this.makeDashboardInsidesVisibleAnywayTimeout);\n    };\n    this.recordIfFocusedOnUppyRecently = event => {\n      if (this.el.contains(event.target)) {\n        this.ifFocusedOnUppyRecently = true;\n      } else {\n        this.ifFocusedOnUppyRecently = false; // ___Why run this.superFocus.cancel here when it already runs in superFocusOnEachUpdate?\n        //    Because superFocus is debounced, when we move from Uppy to some other element on the page,\n        //    previously run superFocus sometimes hits and moves focus back to Uppy.\n\n        this.superFocus.cancel();\n      }\n    };\n    this.disableAllFocusableElements = disable => {\n      const focusableNodes = toArray(this.el.querySelectorAll(FOCUSABLE_ELEMENTS));\n      if (disable) {\n        focusableNodes.forEach(node => {\n          // save previous tabindex in a data-attribute, to restore when enabling\n          const currentTabIndex = node.getAttribute('tabindex');\n          if (currentTabIndex) {\n            node.dataset.inertTabindex = currentTabIndex; // eslint-disable-line no-param-reassign\n          }\n\n          node.setAttribute('tabindex', '-1');\n        });\n      } else {\n        focusableNodes.forEach(node => {\n          if ('inertTabindex' in node.dataset) {\n            node.setAttribute('tabindex', node.dataset.inertTabindex);\n          } else {\n            node.removeAttribute('tabindex');\n          }\n        });\n      }\n      this.dashboardIsDisabled = disable;\n    };\n    this.updateBrowserHistory = () => {\n      var _history$state2;\n\n      // Ensure history state does not already contain our modal name to avoid double-pushing\n      // eslint-disable-next-line no-restricted-globals\n      if (!((_history$state2 = history.state) != null && _history$state2[this.modalName])) {\n        // Push to history so that the page is not lost on browser back button press\n        // eslint-disable-next-line no-restricted-globals\n        history.pushState({\n          // eslint-disable-next-line no-restricted-globals\n          ...history.state,\n          [this.modalName]: true\n        }, '');\n      } // Listen for back button presses\n\n      window.addEventListener('popstate', this.handlePopState, false);\n    };\n    this.handlePopState = event => {\n      var _event$state;\n\n      // Close the modal if the history state no longer contains our modal name\n      if (this.isModalOpen() && (!event.state || !event.state[this.modalName])) {\n        this.closeModal({\n          manualClose: false\n        });\n      } // When the browser back button is pressed and uppy is now the latest entry\n      // in the history but the modal is closed, fix the history by removing the\n      // uppy history entry.\n      // This occurs when another entry is added into the history state while the\n      // modal is open, and then the modal gets manually closed.\n      // Solves PR #575 (https://github.com/transloadit/uppy/pull/575)\n\n      if (!this.isModalOpen() && (_event$state = event.state) != null && _event$state[this.modalName]) {\n        // eslint-disable-next-line no-restricted-globals\n        history.back();\n      }\n    };\n    this.handleKeyDownInModal = event => {\n      // close modal on esc key press\n      if (event.keyCode === ESC_KEY) this.requestCloseModal(event); // trap focus on tab key press\n\n      if (event.keyCode === TAB_KEY) trapFocus.forModal(event, this.getPluginState().activeOverlayType, this.el);\n    };\n    this.handleClickOutside = () => {\n      if (this.opts.closeModalOnClickOutside) this.requestCloseModal();\n    };\n    this.handlePaste = event => {\n      // Let any acquirer plugin (Url/Webcam/etc.) handle pastes to the root\n      this.uppy.iteratePlugins(plugin => {\n        if (plugin.type === 'acquirer') {\n          // Every Plugin with .type acquirer can define handleRootPaste(event)\n          plugin.handleRootPaste == null ? void 0 : plugin.handleRootPaste(event);\n        }\n      }); // Add all dropped files\n\n      const files = toArray(event.clipboardData.files);\n      if (files.length > 0) {\n        this.uppy.log('[Dashboard] Files pasted');\n        this.addFiles(files);\n      }\n    };\n    this.handleInputChange = event => {\n      event.preventDefault();\n      const files = toArray(event.target.files);\n      if (files.length > 0) {\n        this.uppy.log('[Dashboard] Files selected through input');\n        this.addFiles(files);\n      }\n    };\n    this.handleDragOver = event => {\n      var _this$opts$onDragOver, _this$opts;\n      event.preventDefault();\n      event.stopPropagation(); // Check if some plugin can handle the datatransfer without files —\n      // for instance, the Url plugin can import a url\n\n      const canSomePluginHandleRootDrop = () => {\n        let somePluginCanHandleRootDrop = true;\n        this.uppy.iteratePlugins(plugin => {\n          if (plugin.canHandleRootDrop != null && plugin.canHandleRootDrop(event)) {\n            somePluginCanHandleRootDrop = true;\n          }\n        });\n        return somePluginCanHandleRootDrop;\n      }; // Check if the \"type\" of the datatransfer object includes files\n\n      const doesEventHaveFiles = () => {\n        const {\n          types\n        } = event.dataTransfer;\n        return types.some(type => type === 'Files');\n      }; // Deny drop, if no plugins can handle datatransfer, there are no files,\n      // or when opts.disabled is set, or new uploads are not allowed\n\n      const somePluginCanHandleRootDrop = canSomePluginHandleRootDrop(event);\n      const hasFiles = doesEventHaveFiles(event);\n      if (!somePluginCanHandleRootDrop && !hasFiles || this.opts.disabled // opts.disableLocalFiles should only be taken into account if no plugins\n      // can handle the datatransfer\n      || this.opts.disableLocalFiles && (hasFiles || !somePluginCanHandleRootDrop) || !this.uppy.getState().allowNewUpload) {\n        event.dataTransfer.dropEffect = 'none'; // eslint-disable-line no-param-reassign\n\n        clearTimeout(this.removeDragOverClassTimeout);\n        return;\n      } // Add a small (+) icon on drop\n      // (and prevent browsers from interpreting this as files being _moved_ into the\n      // browser, https://github.com/transloadit/uppy/issues/1978).\n\n      event.dataTransfer.dropEffect = 'copy'; // eslint-disable-line no-param-reassign\n\n      clearTimeout(this.removeDragOverClassTimeout);\n      this.setPluginState({\n        isDraggingOver: true\n      });\n      (_this$opts$onDragOver = (_this$opts = this.opts).onDragOver) == null ? void 0 : _this$opts$onDragOver.call(_this$opts, event);\n    };\n    this.handleDragLeave = event => {\n      var _this$opts$onDragLeav, _this$opts2;\n      event.preventDefault();\n      event.stopPropagation();\n      clearTimeout(this.removeDragOverClassTimeout); // Timeout against flickering, this solution is taken from drag-drop library.\n      // Solution with 'pointer-events: none' didn't work across browsers.\n\n      this.removeDragOverClassTimeout = setTimeout(() => {\n        this.setPluginState({\n          isDraggingOver: false\n        });\n      }, 50);\n      (_this$opts$onDragLeav = (_this$opts2 = this.opts).onDragLeave) == null ? void 0 : _this$opts$onDragLeav.call(_this$opts2, event);\n    };\n    this.handleDrop = async event => {\n      var _this$opts$onDrop, _this$opts3;\n      event.preventDefault();\n      event.stopPropagation();\n      clearTimeout(this.removeDragOverClassTimeout);\n      this.setPluginState({\n        isDraggingOver: false\n      }); // Let any acquirer plugin (Url/Webcam/etc.) handle drops to the root\n\n      this.uppy.iteratePlugins(plugin => {\n        if (plugin.type === 'acquirer') {\n          // Every Plugin with .type acquirer can define handleRootDrop(event)\n          plugin.handleRootDrop == null ? void 0 : plugin.handleRootDrop(event);\n        }\n      }); // Add all dropped files\n\n      let executedDropErrorOnce = false;\n      const logDropError = error => {\n        this.uppy.log(error, 'error'); // In practice all drop errors are most likely the same,\n        // so let's just show one to avoid overwhelming the user\n\n        if (!executedDropErrorOnce) {\n          this.uppy.info(error.message, 'error');\n          executedDropErrorOnce = true;\n        }\n      }; // Add all dropped files\n\n      const files = await getDroppedFiles(event.dataTransfer, {\n        logDropError\n      });\n      if (files.length > 0) {\n        this.uppy.log('[Dashboard] Files dropped');\n        this.addFiles(files);\n      }\n      (_this$opts$onDrop = (_this$opts3 = this.opts).onDrop) == null ? void 0 : _this$opts$onDrop.call(_this$opts3, event);\n    };\n    this.handleRequestThumbnail = file => {\n      if (!this.opts.waitForThumbnailsBeforeUpload) {\n        this.uppy.emit('thumbnail:request', file);\n      }\n    };\n    this.handleCancelThumbnail = file => {\n      if (!this.opts.waitForThumbnailsBeforeUpload) {\n        this.uppy.emit('thumbnail:cancel', file);\n      }\n    };\n    this.handleKeyDownInInline = event => {\n      // Trap focus on tab key press.\n      if (event.keyCode === TAB_KEY) trapFocus.forInline(event, this.getPluginState().activeOverlayType, this.el);\n    };\n    this.handlePasteOnBody = event => {\n      const isFocusInOverlay = this.el.contains(document.activeElement);\n      if (isFocusInOverlay) {\n        this.handlePaste(event);\n      }\n    };\n    this.handleComplete = _ref => {\n      let {\n        failed\n      } = _ref;\n      if (this.opts.closeAfterFinish && failed.length === 0) {\n        // All uploads are done\n        this.requestCloseModal();\n      }\n    };\n    this.handleCancelRestore = () => {\n      this.uppy.emit('restore-canceled');\n    };\n    Object.defineProperty(this, _openFileEditorWhenFilesAdded, {\n      writable: true,\n      value: files => {\n        const firstFile = files[0];\n        if (this.canEditFile(firstFile)) {\n          this.openFileEditor(firstFile);\n        }\n      }\n    });\n    this.initEvents = () => {\n      // Modal open button\n      if (this.opts.trigger && !this.opts.inline) {\n        const showModalTrigger = findAllDOMElements(this.opts.trigger);\n        if (showModalTrigger) {\n          showModalTrigger.forEach(trigger => trigger.addEventListener('click', this.openModal));\n        } else {\n          this.uppy.log('Dashboard modal trigger not found. Make sure `trigger` is set in Dashboard options, unless you are planning to call `dashboard.openModal()` method yourself', 'warning');\n        }\n      }\n      this.startListeningToResize();\n      document.addEventListener('paste', this.handlePasteOnBody);\n      this.uppy.on('plugin-remove', this.removeTarget);\n      this.uppy.on('file-added', this.hideAllPanels);\n      this.uppy.on('dashboard:modal-closed', this.hideAllPanels);\n      this.uppy.on('file-editor:complete', this.hideAllPanels);\n      this.uppy.on('complete', this.handleComplete); // ___Why fire on capture?\n      //    Because this.ifFocusedOnUppyRecently needs to change before onUpdate() fires.\n\n      document.addEventListener('focus', this.recordIfFocusedOnUppyRecently, true);\n      document.addEventListener('click', this.recordIfFocusedOnUppyRecently, true);\n      if (this.opts.inline) {\n        this.el.addEventListener('keydown', this.handleKeyDownInInline);\n      }\n      if (this.opts.autoOpenFileEditor) {\n        this.uppy.on('files-added', _classPrivateFieldLooseBase(this, _openFileEditorWhenFilesAdded)[_openFileEditorWhenFilesAdded]);\n      }\n    };\n    this.removeEvents = () => {\n      const showModalTrigger = findAllDOMElements(this.opts.trigger);\n      if (!this.opts.inline && showModalTrigger) {\n        showModalTrigger.forEach(trigger => trigger.removeEventListener('click', this.openModal));\n      }\n      this.stopListeningToResize();\n      document.removeEventListener('paste', this.handlePasteOnBody);\n      window.removeEventListener('popstate', this.handlePopState, false);\n      this.uppy.off('plugin-remove', this.removeTarget);\n      this.uppy.off('file-added', this.hideAllPanels);\n      this.uppy.off('dashboard:modal-closed', this.hideAllPanels);\n      this.uppy.off('file-editor:complete', this.hideAllPanels);\n      this.uppy.off('complete', this.handleComplete);\n      document.removeEventListener('focus', this.recordIfFocusedOnUppyRecently);\n      document.removeEventListener('click', this.recordIfFocusedOnUppyRecently);\n      if (this.opts.inline) {\n        this.el.removeEventListener('keydown', this.handleKeyDownInInline);\n      }\n      if (this.opts.autoOpenFileEditor) {\n        this.uppy.off('files-added', _classPrivateFieldLooseBase(this, _openFileEditorWhenFilesAdded)[_openFileEditorWhenFilesAdded]);\n      }\n    };\n    this.superFocusOnEachUpdate = () => {\n      const isFocusInUppy = this.el.contains(document.activeElement); // When focus is lost on the page (== focus is on body for most browsers, or focus is null for IE11)\n\n      const isFocusNowhere = document.activeElement === document.body || document.activeElement === null;\n      const isInformerHidden = this.uppy.getState().info.length === 0;\n      const isModal = !this.opts.inline;\n      if (\n      // If update is connected to showing the Informer - let the screen reader calmly read it.\n      isInformerHidden && (\n      // If we are in a modal - always superfocus without concern for other elements\n      // on the page (user is unlikely to want to interact with the rest of the page)\n      isModal // If we are already inside of Uppy, or\n      || isFocusInUppy // If we are not focused on anything BUT we have already, at least once, focused on uppy\n      //   1. We focus when isFocusNowhere, because when the element we were focused\n      //      on disappears (e.g. an overlay), - focus gets lost. If user is typing\n      //      something somewhere else on the page, - focus won't be 'nowhere'.\n      //   2. We only focus when focus is nowhere AND this.ifFocusedOnUppyRecently,\n      //      to avoid focus jumps if we do something else on the page.\n      //   [Practical check] Without '&& this.ifFocusedOnUppyRecently', in Safari, in inline mode,\n      //                     when file is uploading, - navigate via tab to the checkbox,\n      //                     try to press space multiple times. Focus will jump to Uppy.\n      || isFocusNowhere && this.ifFocusedOnUppyRecently)) {\n        this.superFocus(this.el, this.getPluginState().activeOverlayType);\n      } else {\n        this.superFocus.cancel();\n      }\n    };\n    this.afterUpdate = () => {\n      if (this.opts.disabled && !this.dashboardIsDisabled) {\n        this.disableAllFocusableElements(true);\n        return;\n      }\n      if (!this.opts.disabled && this.dashboardIsDisabled) {\n        this.disableAllFocusableElements(false);\n      }\n      this.superFocusOnEachUpdate();\n    };\n    this.saveFileCard = (meta, fileID) => {\n      this.uppy.setFileMeta(fileID, meta);\n      this.toggleFileCard(false, fileID);\n    };\n    Object.defineProperty(this, _attachRenderFunctionToTarget, {\n      writable: true,\n      value: target => {\n        const plugin = this.uppy.getPlugin(target.id);\n        return {\n          ...target,\n          icon: plugin.icon || this.opts.defaultPickerIcon,\n          render: plugin.render\n        };\n      }\n    });\n    Object.defineProperty(this, _isTargetSupported, {\n      writable: true,\n      value: target => {\n        const plugin = this.uppy.getPlugin(target.id); // If the plugin does not provide a `supported` check, assume the plugin works everywhere.\n\n        if (typeof plugin.isSupported !== 'function') {\n          return true;\n        }\n        return plugin.isSupported();\n      }\n    });\n    Object.defineProperty(this, _getAcquirers, {\n      writable: true,\n      value: memoize(targets => {\n        return targets.filter(target => target.type === 'acquirer' && _classPrivateFieldLooseBase(this, _isTargetSupported)[_isTargetSupported](target)).map(_classPrivateFieldLooseBase(this, _attachRenderFunctionToTarget)[_attachRenderFunctionToTarget]);\n      })\n    });\n    Object.defineProperty(this, _getProgressIndicators, {\n      writable: true,\n      value: memoize(targets => {\n        return targets.filter(target => target.type === 'progressindicator').map(_classPrivateFieldLooseBase(this, _attachRenderFunctionToTarget)[_attachRenderFunctionToTarget]);\n      })\n    });\n    Object.defineProperty(this, _getEditors, {\n      writable: true,\n      value: memoize(targets => {\n        return targets.filter(target => target.type === 'editor').map(_classPrivateFieldLooseBase(this, _attachRenderFunctionToTarget)[_attachRenderFunctionToTarget]);\n      })\n    });\n    this.render = state => {\n      const pluginState = this.getPluginState();\n      const {\n        files,\n        capabilities,\n        allowNewUpload\n      } = state;\n      const {\n        newFiles,\n        uploadStartedFiles,\n        completeFiles,\n        erroredFiles,\n        inProgressFiles,\n        inProgressNotPausedFiles,\n        processingFiles,\n        isUploadStarted,\n        isAllComplete,\n        isAllErrored,\n        isAllPaused\n      } = this.uppy.getObjectOfFilesPerState();\n      const acquirers = _classPrivateFieldLooseBase(this, _getAcquirers)[_getAcquirers](pluginState.targets);\n      const progressindicators = _classPrivateFieldLooseBase(this, _getProgressIndicators)[_getProgressIndicators](pluginState.targets);\n      const editors = _classPrivateFieldLooseBase(this, _getEditors)[_getEditors](pluginState.targets);\n      let theme;\n      if (this.opts.theme === 'auto') {\n        theme = capabilities.darkMode ? 'dark' : 'light';\n      } else {\n        theme = this.opts.theme;\n      }\n      if (['files', 'folders', 'both'].indexOf(this.opts.fileManagerSelectionType) < 0) {\n        this.opts.fileManagerSelectionType = 'files'; // eslint-disable-next-line no-console\n\n        console.warn(`Unsupported option for \"fileManagerSelectionType\". Using default of \"${this.opts.fileManagerSelectionType}\".`);\n      }\n      return DashboardUI({\n        state,\n        isHidden: pluginState.isHidden,\n        files,\n        newFiles,\n        uploadStartedFiles,\n        completeFiles,\n        erroredFiles,\n        inProgressFiles,\n        inProgressNotPausedFiles,\n        processingFiles,\n        isUploadStarted,\n        isAllComplete,\n        isAllErrored,\n        isAllPaused,\n        totalFileCount: Object.keys(files).length,\n        totalProgress: state.totalProgress,\n        allowNewUpload,\n        acquirers,\n        theme,\n        disabled: this.opts.disabled,\n        disableLocalFiles: this.opts.disableLocalFiles,\n        direction: this.opts.direction,\n        activePickerPanel: pluginState.activePickerPanel,\n        showFileEditor: pluginState.showFileEditor,\n        saveFileEditor: this.saveFileEditor,\n        disableAllFocusableElements: this.disableAllFocusableElements,\n        animateOpenClose: this.opts.animateOpenClose,\n        isClosing: pluginState.isClosing,\n        progressindicators,\n        editors,\n        autoProceed: this.uppy.opts.autoProceed,\n        id: this.id,\n        closeModal: this.requestCloseModal,\n        handleClickOutside: this.handleClickOutside,\n        handleInputChange: this.handleInputChange,\n        handlePaste: this.handlePaste,\n        inline: this.opts.inline,\n        showPanel: this.showPanel,\n        hideAllPanels: this.hideAllPanels,\n        i18n: this.i18n,\n        i18nArray: this.i18nArray,\n        uppy: this.uppy,\n        note: this.opts.note,\n        recoveredState: state.recoveredState,\n        metaFields: pluginState.metaFields,\n        resumableUploads: capabilities.resumableUploads || false,\n        individualCancellation: capabilities.individualCancellation,\n        isMobileDevice: capabilities.isMobileDevice,\n        fileCardFor: pluginState.fileCardFor,\n        toggleFileCard: this.toggleFileCard,\n        toggleAddFilesPanel: this.toggleAddFilesPanel,\n        showAddFilesPanel: pluginState.showAddFilesPanel,\n        saveFileCard: this.saveFileCard,\n        openFileEditor: this.openFileEditor,\n        canEditFile: this.canEditFile,\n        width: this.opts.width,\n        height: this.opts.height,\n        showLinkToFileUploadResult: this.opts.showLinkToFileUploadResult,\n        fileManagerSelectionType: this.opts.fileManagerSelectionType,\n        proudlyDisplayPoweredByUppy: this.opts.proudlyDisplayPoweredByUppy,\n        hideCancelButton: this.opts.hideCancelButton,\n        hideRetryButton: this.opts.hideRetryButton,\n        hidePauseResumeButton: this.opts.hidePauseResumeButton,\n        showRemoveButtonAfterComplete: this.opts.showRemoveButtonAfterComplete,\n        containerWidth: pluginState.containerWidth,\n        containerHeight: pluginState.containerHeight,\n        areInsidesReadyToBeVisible: pluginState.areInsidesReadyToBeVisible,\n        isTargetDOMEl: this.isTargetDOMEl,\n        parentElement: this.el,\n        allowedFileTypes: this.uppy.opts.restrictions.allowedFileTypes,\n        maxNumberOfFiles: this.uppy.opts.restrictions.maxNumberOfFiles,\n        requiredMetaFields: this.uppy.opts.restrictions.requiredMetaFields,\n        showSelectedFiles: this.opts.showSelectedFiles,\n        showNativePhotoCameraButton: this.opts.showNativePhotoCameraButton,\n        showNativeVideoCameraButton: this.opts.showNativeVideoCameraButton,\n        nativeCameraFacingMode: this.opts.nativeCameraFacingMode,\n        handleCancelRestore: this.handleCancelRestore,\n        handleRequestThumbnail: this.handleRequestThumbnail,\n        handleCancelThumbnail: this.handleCancelThumbnail,\n        // drag props\n        isDraggingOver: pluginState.isDraggingOver,\n        handleDragOver: this.handleDragOver,\n        handleDragLeave: this.handleDragLeave,\n        handleDrop: this.handleDrop\n      });\n    };\n    this.discoverProviderPlugins = () => {\n      this.uppy.iteratePlugins(plugin => {\n        if (plugin && !plugin.target && plugin.opts && plugin.opts.target === this.constructor) {\n          this.addTarget(plugin);\n        }\n      });\n    };\n    this.install = () => {\n      // Set default state for Dashboard\n      this.setPluginState({\n        isHidden: true,\n        fileCardFor: null,\n        activeOverlayType: null,\n        showAddFilesPanel: false,\n        activePickerPanel: false,\n        showFileEditor: false,\n        metaFields: this.opts.metaFields,\n        targets: [],\n        // We'll make them visible once .containerWidth is determined\n        areInsidesReadyToBeVisible: false,\n        isDraggingOver: false\n      });\n      const {\n        inline,\n        closeAfterFinish\n      } = this.opts;\n      if (inline && closeAfterFinish) {\n        throw new Error('[Dashboard] `closeAfterFinish: true` cannot be used on an inline Dashboard, because an inline Dashboard cannot be closed at all. Either set `inline: false`, or disable the `closeAfterFinish` option.');\n      }\n      const {\n        allowMultipleUploads,\n        allowMultipleUploadBatches\n      } = this.uppy.opts;\n      if ((allowMultipleUploads || allowMultipleUploadBatches) && closeAfterFinish) {\n        this.uppy.log('[Dashboard] When using `closeAfterFinish`, we recommended setting the `allowMultipleUploadBatches` option to `false` in the Uppy constructor. See https://uppy.io/docs/uppy/#allowMultipleUploads-true', 'warning');\n      }\n      const {\n        target\n      } = this.opts;\n      if (target) {\n        this.mount(target, this);\n      }\n      const plugins = this.opts.plugins || [];\n      plugins.forEach(pluginID => {\n        const plugin = this.uppy.getPlugin(pluginID);\n        if (plugin) {\n          plugin.mount(this, plugin);\n        }\n      });\n      if (!this.opts.disableStatusBar) {\n        this.uppy.use(StatusBar, {\n          id: `${this.id}:StatusBar`,\n          target: this,\n          hideUploadButton: this.opts.hideUploadButton,\n          hideRetryButton: this.opts.hideRetryButton,\n          hidePauseResumeButton: this.opts.hidePauseResumeButton,\n          hideCancelButton: this.opts.hideCancelButton,\n          showProgressDetails: this.opts.showProgressDetails,\n          hideAfterFinish: this.opts.hideProgressAfterFinish,\n          locale: this.opts.locale,\n          doneButtonHandler: this.opts.doneButtonHandler\n        });\n      }\n      if (!this.opts.disableInformer) {\n        this.uppy.use(Informer, {\n          id: `${this.id}:Informer`,\n          target: this\n        });\n      }\n      if (!this.opts.disableThumbnailGenerator) {\n        this.uppy.use(ThumbnailGenerator, {\n          id: `${this.id}:ThumbnailGenerator`,\n          thumbnailWidth: this.opts.thumbnailWidth,\n          thumbnailHeight: this.opts.thumbnailHeight,\n          thumbnailType: this.opts.thumbnailType,\n          waitForThumbnailsBeforeUpload: this.opts.waitForThumbnailsBeforeUpload,\n          // If we don't block on thumbnails, we can lazily generate them\n          lazy: !this.opts.waitForThumbnailsBeforeUpload\n        });\n      } // Dark Mode / theme\n\n      this.darkModeMediaQuery = typeof window !== 'undefined' && window.matchMedia ? window.matchMedia('(prefers-color-scheme: dark)') : null;\n      const isDarkModeOnFromTheStart = this.darkModeMediaQuery ? this.darkModeMediaQuery.matches : false;\n      this.uppy.log(`[Dashboard] Dark mode is ${isDarkModeOnFromTheStart ? 'on' : 'off'}`);\n      this.setDarkModeCapability(isDarkModeOnFromTheStart);\n      if (this.opts.theme === 'auto') {\n        this.darkModeMediaQuery.addListener(this.handleSystemDarkModeChange);\n      }\n      this.discoverProviderPlugins();\n      this.initEvents();\n    };\n    this.uninstall = () => {\n      if (!this.opts.disableInformer) {\n        const informer = this.uppy.getPlugin(`${this.id}:Informer`); // Checking if this plugin exists, in case it was removed by uppy-core\n        // before the Dashboard was.\n\n        if (informer) this.uppy.removePlugin(informer);\n      }\n      if (!this.opts.disableStatusBar) {\n        const statusBar = this.uppy.getPlugin(`${this.id}:StatusBar`);\n        if (statusBar) this.uppy.removePlugin(statusBar);\n      }\n      if (!this.opts.disableThumbnailGenerator) {\n        const thumbnail = this.uppy.getPlugin(`${this.id}:ThumbnailGenerator`);\n        if (thumbnail) this.uppy.removePlugin(thumbnail);\n      }\n      const plugins = this.opts.plugins || [];\n      plugins.forEach(pluginID => {\n        const plugin = this.uppy.getPlugin(pluginID);\n        if (plugin) plugin.unmount();\n      });\n      if (this.opts.theme === 'auto') {\n        this.darkModeMediaQuery.removeListener(this.handleSystemDarkModeChange);\n      }\n      this.unmount();\n      this.removeEvents();\n    };\n    this.id = this.opts.id || 'Dashboard';\n    this.title = 'Dashboard';\n    this.type = 'orchestrator';\n    this.modalName = `uppy-Dashboard-${nanoid()}`;\n    this.defaultLocale = locale; // set default options, must be kept in sync with packages/@uppy/react/src/DashboardModal.js\n\n    const defaultOptions = {\n      target: 'body',\n      metaFields: [],\n      trigger: null,\n      inline: false,\n      width: 750,\n      height: 550,\n      thumbnailWidth: 280,\n      thumbnailType: 'image/jpeg',\n      waitForThumbnailsBeforeUpload: false,\n      defaultPickerIcon,\n      showLinkToFileUploadResult: false,\n      showProgressDetails: false,\n      hideUploadButton: false,\n      hideCancelButton: false,\n      hideRetryButton: false,\n      hidePauseResumeButton: false,\n      hideProgressAfterFinish: false,\n      doneButtonHandler: () => {\n        this.uppy.cancelAll();\n        this.requestCloseModal();\n      },\n      note: null,\n      closeModalOnClickOutside: false,\n      closeAfterFinish: false,\n      disableStatusBar: false,\n      disableInformer: false,\n      disableThumbnailGenerator: false,\n      disablePageScrollWhenModalOpen: true,\n      animateOpenClose: true,\n      fileManagerSelectionType: 'files',\n      proudlyDisplayPoweredByUppy: true,\n      onRequestCloseModal: () => this.closeModal(),\n      showSelectedFiles: true,\n      showRemoveButtonAfterComplete: false,\n      browserBackButtonClose: false,\n      showNativePhotoCameraButton: false,\n      showNativeVideoCameraButton: false,\n      theme: 'light',\n      autoOpenFileEditor: false,\n      disabled: false,\n      disableLocalFiles: false\n    }; // merge default options with the ones set by user\n\n    this.opts = {\n      ...defaultOptions,\n      ..._opts\n    };\n    this.i18nInit();\n    this.superFocus = createSuperFocus();\n    this.ifFocusedOnUppyRecently = false; // Timeouts\n\n    this.makeDashboardInsidesVisibleAnywayTimeout = null;\n    this.removeDragOverClassTimeout = null;\n  }\n}\nDashboard.VERSION = packageJson.version;","map":{"version":3,"names":["_classPrivateFieldLooseBase","receiver","privateKey","Object","prototype","hasOwnProperty","call","TypeError","id","_classPrivateFieldLooseKey","name","h","UIPlugin","StatusBar","Informer","ThumbnailGenerator","findAllDOMElements","toArray","getDroppedFiles","nanoid","memoizeOne","FOCUSABLE_ELEMENTS","trapFocus","createSuperFocus","DashboardUI","packageJson","locale","memoize","default","TAB_KEY","ESC_KEY","createPromise","o","promise","Promise","resolve","reject","defaultPickerIcon","focusable","width","height","viewBox","d","_openFileEditorWhenFilesAdded","_attachRenderFunctionToTarget","_isTargetSupported","_getAcquirers","_getProgressIndicators","_getEditors","Dashboard","constructor","uppy","_opts","_this","removeTarget","plugin","pluginState","getPluginState","newTargets","targets","filter","target","setPluginState","addTarget","callerPluginId","callerPluginName","title","callerPluginType","type","msg","log","undefined","state","slice","push","el","hideAllPanels","update","activePickerPanel","showAddFilesPanel","activeOverlayType","fileCardFor","showFileEditor","showPanel","emit","canEditFile","file","editors","some","getPlugin","openFileEditor","forEach","editor","selectFile","saveFileEditor","save","openModal","savedScrollPosition","window","pageYOffset","savedActiveElement","document","activeElement","opts","disablePageScrollWhenModalOpen","body","classList","add","animateOpenClose","isClosing","handler","isHidden","removeEventListener","addEventListener","browserBackButtonClose","updateBrowserHistory","handleKeyDownInModal","closeModal","manualClose","remove","superFocus","cancel","focus","_history$state","history","modalName","back","isModalOpen","requestCloseModal","onRequestCloseModal","setDarkModeCapability","isDarkModeOn","capabilities","getState","setState","darkMode","handleSystemDarkModeChange","event","isDarkModeOnNow","matches","toggleFileCard","show","fileID","getFile","toggleAddFilesPanel","addFiles","files","descriptors","map","source","data","meta","relativePath","webkitRelativePath","err","startListeningToResize","resizeObserver","ResizeObserver","entries","uppyDashboardInnerEl","contentRect","containerWidth","containerHeight","areInsidesReadyToBeVisible","observe","querySelector","makeDashboardInsidesVisibleAnywayTimeout","setTimeout","isModalAndClosed","inline","stopListeningToResize","disconnect","clearTimeout","recordIfFocusedOnUppyRecently","contains","ifFocusedOnUppyRecently","disableAllFocusableElements","disable","focusableNodes","querySelectorAll","node","currentTabIndex","getAttribute","dataset","inertTabindex","setAttribute","removeAttribute","dashboardIsDisabled","_history$state2","pushState","handlePopState","_event$state","keyCode","forModal","handleClickOutside","closeModalOnClickOutside","handlePaste","iteratePlugins","handleRootPaste","clipboardData","length","handleInputChange","preventDefault","handleDragOver","_this$opts$onDragOver","_this$opts","stopPropagation","canSomePluginHandleRootDrop","somePluginCanHandleRootDrop","canHandleRootDrop","doesEventHaveFiles","types","dataTransfer","hasFiles","disabled","disableLocalFiles","allowNewUpload","dropEffect","removeDragOverClassTimeout","isDraggingOver","onDragOver","handleDragLeave","_this$opts$onDragLeav","_this$opts2","onDragLeave","handleDrop","_this$opts$onDrop","_this$opts3","handleRootDrop","executedDropErrorOnce","logDropError","error","info","message","onDrop","handleRequestThumbnail","waitForThumbnailsBeforeUpload","handleCancelThumbnail","handleKeyDownInInline","forInline","handlePasteOnBody","isFocusInOverlay","handleComplete","_ref","failed","closeAfterFinish","handleCancelRestore","defineProperty","writable","value","firstFile","initEvents","trigger","showModalTrigger","on","autoOpenFileEditor","removeEvents","off","superFocusOnEachUpdate","isFocusInUppy","isFocusNowhere","isInformerHidden","isModal","afterUpdate","saveFileCard","setFileMeta","icon","render","isSupported","newFiles","uploadStartedFiles","completeFiles","erroredFiles","inProgressFiles","inProgressNotPausedFiles","processingFiles","isUploadStarted","isAllComplete","isAllErrored","isAllPaused","getObjectOfFilesPerState","acquirers","progressindicators","theme","indexOf","fileManagerSelectionType","console","warn","totalFileCount","keys","totalProgress","direction","autoProceed","i18n","i18nArray","note","recoveredState","metaFields","resumableUploads","individualCancellation","isMobileDevice","showLinkToFileUploadResult","proudlyDisplayPoweredByUppy","hideCancelButton","hideRetryButton","hidePauseResumeButton","showRemoveButtonAfterComplete","isTargetDOMEl","parentElement","allowedFileTypes","restrictions","maxNumberOfFiles","requiredMetaFields","showSelectedFiles","showNativePhotoCameraButton","showNativeVideoCameraButton","nativeCameraFacingMode","discoverProviderPlugins","install","Error","allowMultipleUploads","allowMultipleUploadBatches","mount","plugins","pluginID","disableStatusBar","use","hideUploadButton","showProgressDetails","hideAfterFinish","hideProgressAfterFinish","doneButtonHandler","disableInformer","disableThumbnailGenerator","thumbnailWidth","thumbnailHeight","thumbnailType","lazy","darkModeMediaQuery","matchMedia","isDarkModeOnFromTheStart","addListener","uninstall","informer","removePlugin","statusBar","thumbnail","unmount","removeListener","defaultLocale","defaultOptions","cancelAll","i18nInit","VERSION","version"],"sources":["/lab/node_modules/@uppy/dashboard/lib/Dashboard.js"],"sourcesContent":["function _classPrivateFieldLooseBase(receiver, privateKey) { if (!Object.prototype.hasOwnProperty.call(receiver, privateKey)) { throw new TypeError(\"attempted to use private field on non-instance\"); } return receiver; }\n\nvar id = 0;\n\nfunction _classPrivateFieldLooseKey(name) { return \"__private_\" + id++ + \"_\" + name; }\n\nimport { h } from 'preact';\nimport { UIPlugin } from '@uppy/core';\nimport StatusBar from '@uppy/status-bar';\nimport Informer from '@uppy/informer';\nimport ThumbnailGenerator from '@uppy/thumbnail-generator';\nimport findAllDOMElements from '@uppy/utils/lib/findAllDOMElements';\nimport toArray from '@uppy/utils/lib/toArray';\nimport getDroppedFiles from '@uppy/utils/lib/getDroppedFiles';\nimport { nanoid } from 'nanoid/non-secure';\nimport memoizeOne from 'memoize-one';\nimport FOCUSABLE_ELEMENTS from '@uppy/utils/lib/FOCUSABLE_ELEMENTS';\nimport * as trapFocus from './utils/trapFocus.js';\nimport createSuperFocus from './utils/createSuperFocus.js';\nimport DashboardUI from \"./components/Dashboard.js\";\nconst packageJson = {\n  \"version\": \"3.1.0\"\n};\nimport locale from './locale.js';\nconst memoize = memoizeOne.default || memoizeOne;\nconst TAB_KEY = 9;\nconst ESC_KEY = 27;\n\nfunction createPromise() {\n  const o = {};\n  o.promise = new Promise((resolve, reject) => {\n    o.resolve = resolve;\n    o.reject = reject;\n  });\n  return o;\n}\n\nfunction defaultPickerIcon() {\n  return h(\"svg\", {\n    \"aria-hidden\": \"true\",\n    focusable: \"false\",\n    width: \"30\",\n    height: \"30\",\n    viewBox: \"0 0 30 30\"\n  }, h(\"path\", {\n    d: \"M15 30c8.284 0 15-6.716 15-15 0-8.284-6.716-15-15-15C6.716 0 0 6.716 0 15c0 8.284 6.716 15 15 15zm4.258-12.676v6.846h-8.426v-6.846H5.204l9.82-12.364 9.82 12.364H19.26z\"\n  }));\n}\n/**\n * Dashboard UI with previews, metadata editing, tabs for various services and more\n */\n\n\nvar _openFileEditorWhenFilesAdded = /*#__PURE__*/_classPrivateFieldLooseKey(\"openFileEditorWhenFilesAdded\");\n\nvar _attachRenderFunctionToTarget = /*#__PURE__*/_classPrivateFieldLooseKey(\"attachRenderFunctionToTarget\");\n\nvar _isTargetSupported = /*#__PURE__*/_classPrivateFieldLooseKey(\"isTargetSupported\");\n\nvar _getAcquirers = /*#__PURE__*/_classPrivateFieldLooseKey(\"getAcquirers\");\n\nvar _getProgressIndicators = /*#__PURE__*/_classPrivateFieldLooseKey(\"getProgressIndicators\");\n\nvar _getEditors = /*#__PURE__*/_classPrivateFieldLooseKey(\"getEditors\");\n\nexport default class Dashboard extends UIPlugin {\n  constructor(uppy, _opts) {\n    var _this;\n\n    super(uppy, _opts);\n    _this = this;\n\n    this.removeTarget = plugin => {\n      const pluginState = this.getPluginState(); // filter out the one we want to remove\n\n      const newTargets = pluginState.targets.filter(target => target.id !== plugin.id);\n      this.setPluginState({\n        targets: newTargets\n      });\n    };\n\n    this.addTarget = plugin => {\n      const callerPluginId = plugin.id || plugin.constructor.name;\n      const callerPluginName = plugin.title || callerPluginId;\n      const callerPluginType = plugin.type;\n\n      if (callerPluginType !== 'acquirer' && callerPluginType !== 'progressindicator' && callerPluginType !== 'editor') {\n        const msg = 'Dashboard: can only be targeted by plugins of types: acquirer, progressindicator, editor';\n        this.uppy.log(msg, 'error');\n        return undefined;\n      }\n\n      const target = {\n        id: callerPluginId,\n        name: callerPluginName,\n        type: callerPluginType\n      };\n      const state = this.getPluginState();\n      const newTargets = state.targets.slice();\n      newTargets.push(target);\n      this.setPluginState({\n        targets: newTargets\n      });\n      return this.el;\n    };\n\n    this.hideAllPanels = () => {\n      const state = this.getPluginState();\n      const update = {\n        activePickerPanel: false,\n        showAddFilesPanel: false,\n        activeOverlayType: null,\n        fileCardFor: null,\n        showFileEditor: false\n      };\n\n      if (state.activePickerPanel === update.activePickerPanel && state.showAddFilesPanel === update.showAddFilesPanel && state.showFileEditor === update.showFileEditor && state.activeOverlayType === update.activeOverlayType) {\n        // avoid doing a state update if nothing changed\n        return;\n      }\n\n      this.setPluginState(update);\n    };\n\n    this.showPanel = id => {\n      const {\n        targets\n      } = this.getPluginState();\n      const activePickerPanel = targets.filter(target => {\n        return target.type === 'acquirer' && target.id === id;\n      })[0];\n      this.setPluginState({\n        activePickerPanel,\n        activeOverlayType: 'PickerPanel'\n      });\n      this.uppy.emit('dashboard:show-panel', id);\n    };\n\n    this.canEditFile = file => {\n      const {\n        targets\n      } = this.getPluginState();\n\n      const editors = _classPrivateFieldLooseBase(this, _getEditors)[_getEditors](targets);\n\n      return editors.some(target => this.uppy.getPlugin(target.id).canEditFile(file));\n    };\n\n    this.openFileEditor = file => {\n      const {\n        targets\n      } = this.getPluginState();\n\n      const editors = _classPrivateFieldLooseBase(this, _getEditors)[_getEditors](targets);\n\n      this.setPluginState({\n        showFileEditor: true,\n        fileCardFor: file.id || null,\n        activeOverlayType: 'FileEditor'\n      });\n      editors.forEach(editor => {\n        this.uppy.getPlugin(editor.id).selectFile(file);\n      });\n    };\n\n    this.saveFileEditor = () => {\n      const {\n        targets\n      } = this.getPluginState();\n\n      const editors = _classPrivateFieldLooseBase(this, _getEditors)[_getEditors](targets);\n\n      editors.forEach(editor => {\n        this.uppy.getPlugin(editor.id).save();\n      });\n      this.hideAllPanels();\n    };\n\n    this.openModal = () => {\n      const {\n        promise,\n        resolve\n      } = createPromise(); // save scroll position\n\n      this.savedScrollPosition = window.pageYOffset; // save active element, so we can restore focus when modal is closed\n\n      this.savedActiveElement = document.activeElement;\n\n      if (this.opts.disablePageScrollWhenModalOpen) {\n        document.body.classList.add('uppy-Dashboard-isFixed');\n      }\n\n      if (this.opts.animateOpenClose && this.getPluginState().isClosing) {\n        const handler = () => {\n          this.setPluginState({\n            isHidden: false\n          });\n          this.el.removeEventListener('animationend', handler, false);\n          resolve();\n        };\n\n        this.el.addEventListener('animationend', handler, false);\n      } else {\n        this.setPluginState({\n          isHidden: false\n        });\n        resolve();\n      }\n\n      if (this.opts.browserBackButtonClose) {\n        this.updateBrowserHistory();\n      } // handle ESC and TAB keys in modal dialog\n\n\n      document.addEventListener('keydown', this.handleKeyDownInModal);\n      this.uppy.emit('dashboard:modal-open');\n      return promise;\n    };\n\n    this.closeModal = function (opts) {\n      if (opts === void 0) {\n        opts = {};\n      }\n\n      const {\n        // Whether the modal is being closed by the user (`true`) or by other means (e.g. browser back button)\n        manualClose = true\n      } = opts;\n\n      const {\n        isHidden,\n        isClosing\n      } = _this.getPluginState();\n\n      if (isHidden || isClosing) {\n        // short-circuit if animation is ongoing\n        return undefined;\n      }\n\n      const {\n        promise,\n        resolve\n      } = createPromise();\n\n      if (_this.opts.disablePageScrollWhenModalOpen) {\n        document.body.classList.remove('uppy-Dashboard-isFixed');\n      }\n\n      if (_this.opts.animateOpenClose) {\n        _this.setPluginState({\n          isClosing: true\n        });\n\n        const handler = () => {\n          _this.setPluginState({\n            isHidden: true,\n            isClosing: false\n          });\n\n          _this.superFocus.cancel();\n\n          _this.savedActiveElement.focus();\n\n          _this.el.removeEventListener('animationend', handler, false);\n\n          resolve();\n        };\n\n        _this.el.addEventListener('animationend', handler, false);\n      } else {\n        _this.setPluginState({\n          isHidden: true\n        });\n\n        _this.superFocus.cancel();\n\n        _this.savedActiveElement.focus();\n\n        resolve();\n      } // handle ESC and TAB keys in modal dialog\n\n\n      document.removeEventListener('keydown', _this.handleKeyDownInModal);\n\n      if (manualClose) {\n        if (_this.opts.browserBackButtonClose) {\n          var _history$state;\n\n          // Make sure that the latest entry in the history state is our modal name\n          // eslint-disable-next-line no-restricted-globals\n          if ((_history$state = history.state) != null && _history$state[_this.modalName]) {\n            // Go back in history to clear out the entry we created (ultimately closing the modal)\n            // eslint-disable-next-line no-restricted-globals\n            history.back();\n          }\n        }\n      }\n\n      _this.uppy.emit('dashboard:modal-closed');\n\n      return promise;\n    };\n\n    this.isModalOpen = () => {\n      return !this.getPluginState().isHidden || false;\n    };\n\n    this.requestCloseModal = () => {\n      if (this.opts.onRequestCloseModal) {\n        return this.opts.onRequestCloseModal();\n      }\n\n      return this.closeModal();\n    };\n\n    this.setDarkModeCapability = isDarkModeOn => {\n      const {\n        capabilities\n      } = this.uppy.getState();\n      this.uppy.setState({\n        capabilities: { ...capabilities,\n          darkMode: isDarkModeOn\n        }\n      });\n    };\n\n    this.handleSystemDarkModeChange = event => {\n      const isDarkModeOnNow = event.matches;\n      this.uppy.log(`[Dashboard] Dark mode is ${isDarkModeOnNow ? 'on' : 'off'}`);\n      this.setDarkModeCapability(isDarkModeOnNow);\n    };\n\n    this.toggleFileCard = (show, fileID) => {\n      const file = this.uppy.getFile(fileID);\n\n      if (show) {\n        this.uppy.emit('dashboard:file-edit-start', file);\n      } else {\n        this.uppy.emit('dashboard:file-edit-complete', file);\n      }\n\n      this.setPluginState({\n        fileCardFor: show ? fileID : null,\n        activeOverlayType: show ? 'FileCard' : null\n      });\n    };\n\n    this.toggleAddFilesPanel = show => {\n      this.setPluginState({\n        showAddFilesPanel: show,\n        activeOverlayType: show ? 'AddFiles' : null\n      });\n    };\n\n    this.addFiles = files => {\n      const descriptors = files.map(file => ({\n        source: this.id,\n        name: file.name,\n        type: file.type,\n        data: file,\n        meta: {\n          // path of the file relative to the ancestor directory the user selected.\n          // e.g. 'docs/Old Prague/airbnb.pdf'\n          relativePath: file.relativePath || file.webkitRelativePath || null\n        }\n      }));\n\n      try {\n        this.uppy.addFiles(descriptors);\n      } catch (err) {\n        this.uppy.log(err);\n      }\n    };\n\n    this.startListeningToResize = () => {\n      // Watch for Dashboard container (`.uppy-Dashboard-inner`) resize\n      // and update containerWidth/containerHeight in plugin state accordingly.\n      // Emits first event on initialization.\n      this.resizeObserver = new ResizeObserver(entries => {\n        const uppyDashboardInnerEl = entries[0];\n        const {\n          width,\n          height\n        } = uppyDashboardInnerEl.contentRect;\n        this.uppy.log(`[Dashboard] resized: ${width} / ${height}`, 'debug');\n        this.setPluginState({\n          containerWidth: width,\n          containerHeight: height,\n          areInsidesReadyToBeVisible: true\n        });\n      });\n      this.resizeObserver.observe(this.el.querySelector('.uppy-Dashboard-inner')); // If ResizeObserver fails to emit an event telling us what size to use - default to the mobile view\n\n      this.makeDashboardInsidesVisibleAnywayTimeout = setTimeout(() => {\n        const pluginState = this.getPluginState();\n        const isModalAndClosed = !this.opts.inline && pluginState.isHidden;\n\n        if ( // if ResizeObserver hasn't yet fired,\n        !pluginState.areInsidesReadyToBeVisible // and it's not due to the modal being closed\n        && !isModalAndClosed) {\n          this.uppy.log(\"[Dashboard] resize event didn't fire on time: defaulted to mobile layout\", 'debug');\n          this.setPluginState({\n            areInsidesReadyToBeVisible: true\n          });\n        }\n      }, 1000);\n    };\n\n    this.stopListeningToResize = () => {\n      this.resizeObserver.disconnect();\n      clearTimeout(this.makeDashboardInsidesVisibleAnywayTimeout);\n    };\n\n    this.recordIfFocusedOnUppyRecently = event => {\n      if (this.el.contains(event.target)) {\n        this.ifFocusedOnUppyRecently = true;\n      } else {\n        this.ifFocusedOnUppyRecently = false; // ___Why run this.superFocus.cancel here when it already runs in superFocusOnEachUpdate?\n        //    Because superFocus is debounced, when we move from Uppy to some other element on the page,\n        //    previously run superFocus sometimes hits and moves focus back to Uppy.\n\n        this.superFocus.cancel();\n      }\n    };\n\n    this.disableAllFocusableElements = disable => {\n      const focusableNodes = toArray(this.el.querySelectorAll(FOCUSABLE_ELEMENTS));\n\n      if (disable) {\n        focusableNodes.forEach(node => {\n          // save previous tabindex in a data-attribute, to restore when enabling\n          const currentTabIndex = node.getAttribute('tabindex');\n\n          if (currentTabIndex) {\n            node.dataset.inertTabindex = currentTabIndex; // eslint-disable-line no-param-reassign\n          }\n\n          node.setAttribute('tabindex', '-1');\n        });\n      } else {\n        focusableNodes.forEach(node => {\n          if ('inertTabindex' in node.dataset) {\n            node.setAttribute('tabindex', node.dataset.inertTabindex);\n          } else {\n            node.removeAttribute('tabindex');\n          }\n        });\n      }\n\n      this.dashboardIsDisabled = disable;\n    };\n\n    this.updateBrowserHistory = () => {\n      var _history$state2;\n\n      // Ensure history state does not already contain our modal name to avoid double-pushing\n      // eslint-disable-next-line no-restricted-globals\n      if (!((_history$state2 = history.state) != null && _history$state2[this.modalName])) {\n        // Push to history so that the page is not lost on browser back button press\n        // eslint-disable-next-line no-restricted-globals\n        history.pushState({ // eslint-disable-next-line no-restricted-globals\n          ...history.state,\n          [this.modalName]: true\n        }, '');\n      } // Listen for back button presses\n\n\n      window.addEventListener('popstate', this.handlePopState, false);\n    };\n\n    this.handlePopState = event => {\n      var _event$state;\n\n      // Close the modal if the history state no longer contains our modal name\n      if (this.isModalOpen() && (!event.state || !event.state[this.modalName])) {\n        this.closeModal({\n          manualClose: false\n        });\n      } // When the browser back button is pressed and uppy is now the latest entry\n      // in the history but the modal is closed, fix the history by removing the\n      // uppy history entry.\n      // This occurs when another entry is added into the history state while the\n      // modal is open, and then the modal gets manually closed.\n      // Solves PR #575 (https://github.com/transloadit/uppy/pull/575)\n\n\n      if (!this.isModalOpen() && (_event$state = event.state) != null && _event$state[this.modalName]) {\n        // eslint-disable-next-line no-restricted-globals\n        history.back();\n      }\n    };\n\n    this.handleKeyDownInModal = event => {\n      // close modal on esc key press\n      if (event.keyCode === ESC_KEY) this.requestCloseModal(event); // trap focus on tab key press\n\n      if (event.keyCode === TAB_KEY) trapFocus.forModal(event, this.getPluginState().activeOverlayType, this.el);\n    };\n\n    this.handleClickOutside = () => {\n      if (this.opts.closeModalOnClickOutside) this.requestCloseModal();\n    };\n\n    this.handlePaste = event => {\n      // Let any acquirer plugin (Url/Webcam/etc.) handle pastes to the root\n      this.uppy.iteratePlugins(plugin => {\n        if (plugin.type === 'acquirer') {\n          // Every Plugin with .type acquirer can define handleRootPaste(event)\n          plugin.handleRootPaste == null ? void 0 : plugin.handleRootPaste(event);\n        }\n      }); // Add all dropped files\n\n      const files = toArray(event.clipboardData.files);\n\n      if (files.length > 0) {\n        this.uppy.log('[Dashboard] Files pasted');\n        this.addFiles(files);\n      }\n    };\n\n    this.handleInputChange = event => {\n      event.preventDefault();\n      const files = toArray(event.target.files);\n\n      if (files.length > 0) {\n        this.uppy.log('[Dashboard] Files selected through input');\n        this.addFiles(files);\n      }\n    };\n\n    this.handleDragOver = event => {\n      var _this$opts$onDragOver, _this$opts;\n\n      event.preventDefault();\n      event.stopPropagation(); // Check if some plugin can handle the datatransfer without files —\n      // for instance, the Url plugin can import a url\n\n      const canSomePluginHandleRootDrop = () => {\n        let somePluginCanHandleRootDrop = true;\n        this.uppy.iteratePlugins(plugin => {\n          if (plugin.canHandleRootDrop != null && plugin.canHandleRootDrop(event)) {\n            somePluginCanHandleRootDrop = true;\n          }\n        });\n        return somePluginCanHandleRootDrop;\n      }; // Check if the \"type\" of the datatransfer object includes files\n\n\n      const doesEventHaveFiles = () => {\n        const {\n          types\n        } = event.dataTransfer;\n        return types.some(type => type === 'Files');\n      }; // Deny drop, if no plugins can handle datatransfer, there are no files,\n      // or when opts.disabled is set, or new uploads are not allowed\n\n\n      const somePluginCanHandleRootDrop = canSomePluginHandleRootDrop(event);\n      const hasFiles = doesEventHaveFiles(event);\n\n      if (!somePluginCanHandleRootDrop && !hasFiles || this.opts.disabled // opts.disableLocalFiles should only be taken into account if no plugins\n      // can handle the datatransfer\n      || this.opts.disableLocalFiles && (hasFiles || !somePluginCanHandleRootDrop) || !this.uppy.getState().allowNewUpload) {\n        event.dataTransfer.dropEffect = 'none'; // eslint-disable-line no-param-reassign\n\n        clearTimeout(this.removeDragOverClassTimeout);\n        return;\n      } // Add a small (+) icon on drop\n      // (and prevent browsers from interpreting this as files being _moved_ into the\n      // browser, https://github.com/transloadit/uppy/issues/1978).\n\n\n      event.dataTransfer.dropEffect = 'copy'; // eslint-disable-line no-param-reassign\n\n      clearTimeout(this.removeDragOverClassTimeout);\n      this.setPluginState({\n        isDraggingOver: true\n      });\n      (_this$opts$onDragOver = (_this$opts = this.opts).onDragOver) == null ? void 0 : _this$opts$onDragOver.call(_this$opts, event);\n    };\n\n    this.handleDragLeave = event => {\n      var _this$opts$onDragLeav, _this$opts2;\n\n      event.preventDefault();\n      event.stopPropagation();\n      clearTimeout(this.removeDragOverClassTimeout); // Timeout against flickering, this solution is taken from drag-drop library.\n      // Solution with 'pointer-events: none' didn't work across browsers.\n\n      this.removeDragOverClassTimeout = setTimeout(() => {\n        this.setPluginState({\n          isDraggingOver: false\n        });\n      }, 50);\n      (_this$opts$onDragLeav = (_this$opts2 = this.opts).onDragLeave) == null ? void 0 : _this$opts$onDragLeav.call(_this$opts2, event);\n    };\n\n    this.handleDrop = async event => {\n      var _this$opts$onDrop, _this$opts3;\n\n      event.preventDefault();\n      event.stopPropagation();\n      clearTimeout(this.removeDragOverClassTimeout);\n      this.setPluginState({\n        isDraggingOver: false\n      }); // Let any acquirer plugin (Url/Webcam/etc.) handle drops to the root\n\n      this.uppy.iteratePlugins(plugin => {\n        if (plugin.type === 'acquirer') {\n          // Every Plugin with .type acquirer can define handleRootDrop(event)\n          plugin.handleRootDrop == null ? void 0 : plugin.handleRootDrop(event);\n        }\n      }); // Add all dropped files\n\n      let executedDropErrorOnce = false;\n\n      const logDropError = error => {\n        this.uppy.log(error, 'error'); // In practice all drop errors are most likely the same,\n        // so let's just show one to avoid overwhelming the user\n\n        if (!executedDropErrorOnce) {\n          this.uppy.info(error.message, 'error');\n          executedDropErrorOnce = true;\n        }\n      }; // Add all dropped files\n\n\n      const files = await getDroppedFiles(event.dataTransfer, {\n        logDropError\n      });\n\n      if (files.length > 0) {\n        this.uppy.log('[Dashboard] Files dropped');\n        this.addFiles(files);\n      }\n\n      (_this$opts$onDrop = (_this$opts3 = this.opts).onDrop) == null ? void 0 : _this$opts$onDrop.call(_this$opts3, event);\n    };\n\n    this.handleRequestThumbnail = file => {\n      if (!this.opts.waitForThumbnailsBeforeUpload) {\n        this.uppy.emit('thumbnail:request', file);\n      }\n    };\n\n    this.handleCancelThumbnail = file => {\n      if (!this.opts.waitForThumbnailsBeforeUpload) {\n        this.uppy.emit('thumbnail:cancel', file);\n      }\n    };\n\n    this.handleKeyDownInInline = event => {\n      // Trap focus on tab key press.\n      if (event.keyCode === TAB_KEY) trapFocus.forInline(event, this.getPluginState().activeOverlayType, this.el);\n    };\n\n    this.handlePasteOnBody = event => {\n      const isFocusInOverlay = this.el.contains(document.activeElement);\n\n      if (isFocusInOverlay) {\n        this.handlePaste(event);\n      }\n    };\n\n    this.handleComplete = _ref => {\n      let {\n        failed\n      } = _ref;\n\n      if (this.opts.closeAfterFinish && failed.length === 0) {\n        // All uploads are done\n        this.requestCloseModal();\n      }\n    };\n\n    this.handleCancelRestore = () => {\n      this.uppy.emit('restore-canceled');\n    };\n\n    Object.defineProperty(this, _openFileEditorWhenFilesAdded, {\n      writable: true,\n      value: files => {\n        const firstFile = files[0];\n\n        if (this.canEditFile(firstFile)) {\n          this.openFileEditor(firstFile);\n        }\n      }\n    });\n\n    this.initEvents = () => {\n      // Modal open button\n      if (this.opts.trigger && !this.opts.inline) {\n        const showModalTrigger = findAllDOMElements(this.opts.trigger);\n\n        if (showModalTrigger) {\n          showModalTrigger.forEach(trigger => trigger.addEventListener('click', this.openModal));\n        } else {\n          this.uppy.log('Dashboard modal trigger not found. Make sure `trigger` is set in Dashboard options, unless you are planning to call `dashboard.openModal()` method yourself', 'warning');\n        }\n      }\n\n      this.startListeningToResize();\n      document.addEventListener('paste', this.handlePasteOnBody);\n      this.uppy.on('plugin-remove', this.removeTarget);\n      this.uppy.on('file-added', this.hideAllPanels);\n      this.uppy.on('dashboard:modal-closed', this.hideAllPanels);\n      this.uppy.on('file-editor:complete', this.hideAllPanels);\n      this.uppy.on('complete', this.handleComplete); // ___Why fire on capture?\n      //    Because this.ifFocusedOnUppyRecently needs to change before onUpdate() fires.\n\n      document.addEventListener('focus', this.recordIfFocusedOnUppyRecently, true);\n      document.addEventListener('click', this.recordIfFocusedOnUppyRecently, true);\n\n      if (this.opts.inline) {\n        this.el.addEventListener('keydown', this.handleKeyDownInInline);\n      }\n\n      if (this.opts.autoOpenFileEditor) {\n        this.uppy.on('files-added', _classPrivateFieldLooseBase(this, _openFileEditorWhenFilesAdded)[_openFileEditorWhenFilesAdded]);\n      }\n    };\n\n    this.removeEvents = () => {\n      const showModalTrigger = findAllDOMElements(this.opts.trigger);\n\n      if (!this.opts.inline && showModalTrigger) {\n        showModalTrigger.forEach(trigger => trigger.removeEventListener('click', this.openModal));\n      }\n\n      this.stopListeningToResize();\n      document.removeEventListener('paste', this.handlePasteOnBody);\n      window.removeEventListener('popstate', this.handlePopState, false);\n      this.uppy.off('plugin-remove', this.removeTarget);\n      this.uppy.off('file-added', this.hideAllPanels);\n      this.uppy.off('dashboard:modal-closed', this.hideAllPanels);\n      this.uppy.off('file-editor:complete', this.hideAllPanels);\n      this.uppy.off('complete', this.handleComplete);\n      document.removeEventListener('focus', this.recordIfFocusedOnUppyRecently);\n      document.removeEventListener('click', this.recordIfFocusedOnUppyRecently);\n\n      if (this.opts.inline) {\n        this.el.removeEventListener('keydown', this.handleKeyDownInInline);\n      }\n\n      if (this.opts.autoOpenFileEditor) {\n        this.uppy.off('files-added', _classPrivateFieldLooseBase(this, _openFileEditorWhenFilesAdded)[_openFileEditorWhenFilesAdded]);\n      }\n    };\n\n    this.superFocusOnEachUpdate = () => {\n      const isFocusInUppy = this.el.contains(document.activeElement); // When focus is lost on the page (== focus is on body for most browsers, or focus is null for IE11)\n\n      const isFocusNowhere = document.activeElement === document.body || document.activeElement === null;\n      const isInformerHidden = this.uppy.getState().info.length === 0;\n      const isModal = !this.opts.inline;\n\n      if ( // If update is connected to showing the Informer - let the screen reader calmly read it.\n      isInformerHidden && ( // If we are in a modal - always superfocus without concern for other elements\n      // on the page (user is unlikely to want to interact with the rest of the page)\n      isModal // If we are already inside of Uppy, or\n      || isFocusInUppy // If we are not focused on anything BUT we have already, at least once, focused on uppy\n      //   1. We focus when isFocusNowhere, because when the element we were focused\n      //      on disappears (e.g. an overlay), - focus gets lost. If user is typing\n      //      something somewhere else on the page, - focus won't be 'nowhere'.\n      //   2. We only focus when focus is nowhere AND this.ifFocusedOnUppyRecently,\n      //      to avoid focus jumps if we do something else on the page.\n      //   [Practical check] Without '&& this.ifFocusedOnUppyRecently', in Safari, in inline mode,\n      //                     when file is uploading, - navigate via tab to the checkbox,\n      //                     try to press space multiple times. Focus will jump to Uppy.\n      || isFocusNowhere && this.ifFocusedOnUppyRecently)) {\n        this.superFocus(this.el, this.getPluginState().activeOverlayType);\n      } else {\n        this.superFocus.cancel();\n      }\n    };\n\n    this.afterUpdate = () => {\n      if (this.opts.disabled && !this.dashboardIsDisabled) {\n        this.disableAllFocusableElements(true);\n        return;\n      }\n\n      if (!this.opts.disabled && this.dashboardIsDisabled) {\n        this.disableAllFocusableElements(false);\n      }\n\n      this.superFocusOnEachUpdate();\n    };\n\n    this.saveFileCard = (meta, fileID) => {\n      this.uppy.setFileMeta(fileID, meta);\n      this.toggleFileCard(false, fileID);\n    };\n\n    Object.defineProperty(this, _attachRenderFunctionToTarget, {\n      writable: true,\n      value: target => {\n        const plugin = this.uppy.getPlugin(target.id);\n        return { ...target,\n          icon: plugin.icon || this.opts.defaultPickerIcon,\n          render: plugin.render\n        };\n      }\n    });\n    Object.defineProperty(this, _isTargetSupported, {\n      writable: true,\n      value: target => {\n        const plugin = this.uppy.getPlugin(target.id); // If the plugin does not provide a `supported` check, assume the plugin works everywhere.\n\n        if (typeof plugin.isSupported !== 'function') {\n          return true;\n        }\n\n        return plugin.isSupported();\n      }\n    });\n    Object.defineProperty(this, _getAcquirers, {\n      writable: true,\n      value: memoize(targets => {\n        return targets.filter(target => target.type === 'acquirer' && _classPrivateFieldLooseBase(this, _isTargetSupported)[_isTargetSupported](target)).map(_classPrivateFieldLooseBase(this, _attachRenderFunctionToTarget)[_attachRenderFunctionToTarget]);\n      })\n    });\n    Object.defineProperty(this, _getProgressIndicators, {\n      writable: true,\n      value: memoize(targets => {\n        return targets.filter(target => target.type === 'progressindicator').map(_classPrivateFieldLooseBase(this, _attachRenderFunctionToTarget)[_attachRenderFunctionToTarget]);\n      })\n    });\n    Object.defineProperty(this, _getEditors, {\n      writable: true,\n      value: memoize(targets => {\n        return targets.filter(target => target.type === 'editor').map(_classPrivateFieldLooseBase(this, _attachRenderFunctionToTarget)[_attachRenderFunctionToTarget]);\n      })\n    });\n\n    this.render = state => {\n      const pluginState = this.getPluginState();\n      const {\n        files,\n        capabilities,\n        allowNewUpload\n      } = state;\n      const {\n        newFiles,\n        uploadStartedFiles,\n        completeFiles,\n        erroredFiles,\n        inProgressFiles,\n        inProgressNotPausedFiles,\n        processingFiles,\n        isUploadStarted,\n        isAllComplete,\n        isAllErrored,\n        isAllPaused\n      } = this.uppy.getObjectOfFilesPerState();\n\n      const acquirers = _classPrivateFieldLooseBase(this, _getAcquirers)[_getAcquirers](pluginState.targets);\n\n      const progressindicators = _classPrivateFieldLooseBase(this, _getProgressIndicators)[_getProgressIndicators](pluginState.targets);\n\n      const editors = _classPrivateFieldLooseBase(this, _getEditors)[_getEditors](pluginState.targets);\n\n      let theme;\n\n      if (this.opts.theme === 'auto') {\n        theme = capabilities.darkMode ? 'dark' : 'light';\n      } else {\n        theme = this.opts.theme;\n      }\n\n      if (['files', 'folders', 'both'].indexOf(this.opts.fileManagerSelectionType) < 0) {\n        this.opts.fileManagerSelectionType = 'files'; // eslint-disable-next-line no-console\n\n        console.warn(`Unsupported option for \"fileManagerSelectionType\". Using default of \"${this.opts.fileManagerSelectionType}\".`);\n      }\n\n      return DashboardUI({\n        state,\n        isHidden: pluginState.isHidden,\n        files,\n        newFiles,\n        uploadStartedFiles,\n        completeFiles,\n        erroredFiles,\n        inProgressFiles,\n        inProgressNotPausedFiles,\n        processingFiles,\n        isUploadStarted,\n        isAllComplete,\n        isAllErrored,\n        isAllPaused,\n        totalFileCount: Object.keys(files).length,\n        totalProgress: state.totalProgress,\n        allowNewUpload,\n        acquirers,\n        theme,\n        disabled: this.opts.disabled,\n        disableLocalFiles: this.opts.disableLocalFiles,\n        direction: this.opts.direction,\n        activePickerPanel: pluginState.activePickerPanel,\n        showFileEditor: pluginState.showFileEditor,\n        saveFileEditor: this.saveFileEditor,\n        disableAllFocusableElements: this.disableAllFocusableElements,\n        animateOpenClose: this.opts.animateOpenClose,\n        isClosing: pluginState.isClosing,\n        progressindicators,\n        editors,\n        autoProceed: this.uppy.opts.autoProceed,\n        id: this.id,\n        closeModal: this.requestCloseModal,\n        handleClickOutside: this.handleClickOutside,\n        handleInputChange: this.handleInputChange,\n        handlePaste: this.handlePaste,\n        inline: this.opts.inline,\n        showPanel: this.showPanel,\n        hideAllPanels: this.hideAllPanels,\n        i18n: this.i18n,\n        i18nArray: this.i18nArray,\n        uppy: this.uppy,\n        note: this.opts.note,\n        recoveredState: state.recoveredState,\n        metaFields: pluginState.metaFields,\n        resumableUploads: capabilities.resumableUploads || false,\n        individualCancellation: capabilities.individualCancellation,\n        isMobileDevice: capabilities.isMobileDevice,\n        fileCardFor: pluginState.fileCardFor,\n        toggleFileCard: this.toggleFileCard,\n        toggleAddFilesPanel: this.toggleAddFilesPanel,\n        showAddFilesPanel: pluginState.showAddFilesPanel,\n        saveFileCard: this.saveFileCard,\n        openFileEditor: this.openFileEditor,\n        canEditFile: this.canEditFile,\n        width: this.opts.width,\n        height: this.opts.height,\n        showLinkToFileUploadResult: this.opts.showLinkToFileUploadResult,\n        fileManagerSelectionType: this.opts.fileManagerSelectionType,\n        proudlyDisplayPoweredByUppy: this.opts.proudlyDisplayPoweredByUppy,\n        hideCancelButton: this.opts.hideCancelButton,\n        hideRetryButton: this.opts.hideRetryButton,\n        hidePauseResumeButton: this.opts.hidePauseResumeButton,\n        showRemoveButtonAfterComplete: this.opts.showRemoveButtonAfterComplete,\n        containerWidth: pluginState.containerWidth,\n        containerHeight: pluginState.containerHeight,\n        areInsidesReadyToBeVisible: pluginState.areInsidesReadyToBeVisible,\n        isTargetDOMEl: this.isTargetDOMEl,\n        parentElement: this.el,\n        allowedFileTypes: this.uppy.opts.restrictions.allowedFileTypes,\n        maxNumberOfFiles: this.uppy.opts.restrictions.maxNumberOfFiles,\n        requiredMetaFields: this.uppy.opts.restrictions.requiredMetaFields,\n        showSelectedFiles: this.opts.showSelectedFiles,\n        showNativePhotoCameraButton: this.opts.showNativePhotoCameraButton,\n        showNativeVideoCameraButton: this.opts.showNativeVideoCameraButton,\n        nativeCameraFacingMode: this.opts.nativeCameraFacingMode,\n        handleCancelRestore: this.handleCancelRestore,\n        handleRequestThumbnail: this.handleRequestThumbnail,\n        handleCancelThumbnail: this.handleCancelThumbnail,\n        // drag props\n        isDraggingOver: pluginState.isDraggingOver,\n        handleDragOver: this.handleDragOver,\n        handleDragLeave: this.handleDragLeave,\n        handleDrop: this.handleDrop\n      });\n    };\n\n    this.discoverProviderPlugins = () => {\n      this.uppy.iteratePlugins(plugin => {\n        if (plugin && !plugin.target && plugin.opts && plugin.opts.target === this.constructor) {\n          this.addTarget(plugin);\n        }\n      });\n    };\n\n    this.install = () => {\n      // Set default state for Dashboard\n      this.setPluginState({\n        isHidden: true,\n        fileCardFor: null,\n        activeOverlayType: null,\n        showAddFilesPanel: false,\n        activePickerPanel: false,\n        showFileEditor: false,\n        metaFields: this.opts.metaFields,\n        targets: [],\n        // We'll make them visible once .containerWidth is determined\n        areInsidesReadyToBeVisible: false,\n        isDraggingOver: false\n      });\n      const {\n        inline,\n        closeAfterFinish\n      } = this.opts;\n\n      if (inline && closeAfterFinish) {\n        throw new Error('[Dashboard] `closeAfterFinish: true` cannot be used on an inline Dashboard, because an inline Dashboard cannot be closed at all. Either set `inline: false`, or disable the `closeAfterFinish` option.');\n      }\n\n      const {\n        allowMultipleUploads,\n        allowMultipleUploadBatches\n      } = this.uppy.opts;\n\n      if ((allowMultipleUploads || allowMultipleUploadBatches) && closeAfterFinish) {\n        this.uppy.log('[Dashboard] When using `closeAfterFinish`, we recommended setting the `allowMultipleUploadBatches` option to `false` in the Uppy constructor. See https://uppy.io/docs/uppy/#allowMultipleUploads-true', 'warning');\n      }\n\n      const {\n        target\n      } = this.opts;\n\n      if (target) {\n        this.mount(target, this);\n      }\n\n      const plugins = this.opts.plugins || [];\n      plugins.forEach(pluginID => {\n        const plugin = this.uppy.getPlugin(pluginID);\n\n        if (plugin) {\n          plugin.mount(this, plugin);\n        }\n      });\n\n      if (!this.opts.disableStatusBar) {\n        this.uppy.use(StatusBar, {\n          id: `${this.id}:StatusBar`,\n          target: this,\n          hideUploadButton: this.opts.hideUploadButton,\n          hideRetryButton: this.opts.hideRetryButton,\n          hidePauseResumeButton: this.opts.hidePauseResumeButton,\n          hideCancelButton: this.opts.hideCancelButton,\n          showProgressDetails: this.opts.showProgressDetails,\n          hideAfterFinish: this.opts.hideProgressAfterFinish,\n          locale: this.opts.locale,\n          doneButtonHandler: this.opts.doneButtonHandler\n        });\n      }\n\n      if (!this.opts.disableInformer) {\n        this.uppy.use(Informer, {\n          id: `${this.id}:Informer`,\n          target: this\n        });\n      }\n\n      if (!this.opts.disableThumbnailGenerator) {\n        this.uppy.use(ThumbnailGenerator, {\n          id: `${this.id}:ThumbnailGenerator`,\n          thumbnailWidth: this.opts.thumbnailWidth,\n          thumbnailHeight: this.opts.thumbnailHeight,\n          thumbnailType: this.opts.thumbnailType,\n          waitForThumbnailsBeforeUpload: this.opts.waitForThumbnailsBeforeUpload,\n          // If we don't block on thumbnails, we can lazily generate them\n          lazy: !this.opts.waitForThumbnailsBeforeUpload\n        });\n      } // Dark Mode / theme\n\n\n      this.darkModeMediaQuery = typeof window !== 'undefined' && window.matchMedia ? window.matchMedia('(prefers-color-scheme: dark)') : null;\n      const isDarkModeOnFromTheStart = this.darkModeMediaQuery ? this.darkModeMediaQuery.matches : false;\n      this.uppy.log(`[Dashboard] Dark mode is ${isDarkModeOnFromTheStart ? 'on' : 'off'}`);\n      this.setDarkModeCapability(isDarkModeOnFromTheStart);\n\n      if (this.opts.theme === 'auto') {\n        this.darkModeMediaQuery.addListener(this.handleSystemDarkModeChange);\n      }\n\n      this.discoverProviderPlugins();\n      this.initEvents();\n    };\n\n    this.uninstall = () => {\n      if (!this.opts.disableInformer) {\n        const informer = this.uppy.getPlugin(`${this.id}:Informer`); // Checking if this plugin exists, in case it was removed by uppy-core\n        // before the Dashboard was.\n\n        if (informer) this.uppy.removePlugin(informer);\n      }\n\n      if (!this.opts.disableStatusBar) {\n        const statusBar = this.uppy.getPlugin(`${this.id}:StatusBar`);\n        if (statusBar) this.uppy.removePlugin(statusBar);\n      }\n\n      if (!this.opts.disableThumbnailGenerator) {\n        const thumbnail = this.uppy.getPlugin(`${this.id}:ThumbnailGenerator`);\n        if (thumbnail) this.uppy.removePlugin(thumbnail);\n      }\n\n      const plugins = this.opts.plugins || [];\n      plugins.forEach(pluginID => {\n        const plugin = this.uppy.getPlugin(pluginID);\n        if (plugin) plugin.unmount();\n      });\n\n      if (this.opts.theme === 'auto') {\n        this.darkModeMediaQuery.removeListener(this.handleSystemDarkModeChange);\n      }\n\n      this.unmount();\n      this.removeEvents();\n    };\n\n    this.id = this.opts.id || 'Dashboard';\n    this.title = 'Dashboard';\n    this.type = 'orchestrator';\n    this.modalName = `uppy-Dashboard-${nanoid()}`;\n    this.defaultLocale = locale; // set default options, must be kept in sync with packages/@uppy/react/src/DashboardModal.js\n\n    const defaultOptions = {\n      target: 'body',\n      metaFields: [],\n      trigger: null,\n      inline: false,\n      width: 750,\n      height: 550,\n      thumbnailWidth: 280,\n      thumbnailType: 'image/jpeg',\n      waitForThumbnailsBeforeUpload: false,\n      defaultPickerIcon,\n      showLinkToFileUploadResult: false,\n      showProgressDetails: false,\n      hideUploadButton: false,\n      hideCancelButton: false,\n      hideRetryButton: false,\n      hidePauseResumeButton: false,\n      hideProgressAfterFinish: false,\n      doneButtonHandler: () => {\n        this.uppy.cancelAll();\n        this.requestCloseModal();\n      },\n      note: null,\n      closeModalOnClickOutside: false,\n      closeAfterFinish: false,\n      disableStatusBar: false,\n      disableInformer: false,\n      disableThumbnailGenerator: false,\n      disablePageScrollWhenModalOpen: true,\n      animateOpenClose: true,\n      fileManagerSelectionType: 'files',\n      proudlyDisplayPoweredByUppy: true,\n      onRequestCloseModal: () => this.closeModal(),\n      showSelectedFiles: true,\n      showRemoveButtonAfterComplete: false,\n      browserBackButtonClose: false,\n      showNativePhotoCameraButton: false,\n      showNativeVideoCameraButton: false,\n      theme: 'light',\n      autoOpenFileEditor: false,\n      disabled: false,\n      disableLocalFiles: false\n    }; // merge default options with the ones set by user\n\n    this.opts = { ...defaultOptions,\n      ..._opts\n    };\n    this.i18nInit();\n    this.superFocus = createSuperFocus();\n    this.ifFocusedOnUppyRecently = false; // Timeouts\n\n    this.makeDashboardInsidesVisibleAnywayTimeout = null;\n    this.removeDragOverClassTimeout = null;\n  }\n\n}\nDashboard.VERSION = packageJson.version;"],"mappings":"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"},"metadata":{},"sourceType":"module"}