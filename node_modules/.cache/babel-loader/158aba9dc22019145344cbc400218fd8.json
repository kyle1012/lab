{"ast":null,"code":"import { UIPlugin } from '@uppy/core';\nimport getSpeed from '@uppy/utils/lib/getSpeed';\nimport getBytesRemaining from '@uppy/utils/lib/getBytesRemaining';\nimport getTextDirection from '@uppy/utils/lib/getTextDirection';\nimport statusBarStates from './StatusBarStates.js';\nimport StatusBarUI from \"./StatusBarUI.js\";\nconst packageJson = {\n  \"version\": \"3.0.1\"\n};\nimport locale from './locale.js';\nfunction getTotalSpeed(files) {\n  let totalSpeed = 0;\n  files.forEach(file => {\n    totalSpeed += getSpeed(file.progress);\n  });\n  return totalSpeed;\n}\nfunction getTotalETA(files) {\n  const totalSpeed = getTotalSpeed(files);\n  if (totalSpeed === 0) {\n    return 0;\n  }\n  const totalBytesRemaining = files.reduce((total, file) => {\n    return total + getBytesRemaining(file.progress);\n  }, 0);\n  return Math.round(totalBytesRemaining / totalSpeed * 10) / 10;\n}\nfunction getUploadingState(error, isAllComplete, recoveredState, files) {\n  if (error && !isAllComplete) {\n    return statusBarStates.STATE_ERROR;\n  }\n  if (isAllComplete) {\n    return statusBarStates.STATE_COMPLETE;\n  }\n  if (recoveredState) {\n    return statusBarStates.STATE_WAITING;\n  }\n  let state = statusBarStates.STATE_WAITING;\n  const fileIDs = Object.keys(files);\n  for (let i = 0; i < fileIDs.length; i++) {\n    const {\n      progress\n    } = files[fileIDs[i]]; // If ANY files are being uploaded right now, show the uploading state.\n\n    if (progress.uploadStarted && !progress.uploadComplete) {\n      return statusBarStates.STATE_UPLOADING;\n    } // If files are being preprocessed AND postprocessed at this time, we show the\n    // preprocess state. If any files are being uploaded we show uploading.\n\n    if (progress.preprocess && state !== statusBarStates.STATE_UPLOADING) {\n      state = statusBarStates.STATE_PREPROCESSING;\n    } // If NO files are being preprocessed or uploaded right now, but some files are\n    // being postprocessed, show the postprocess state.\n\n    if (progress.postprocess && state !== statusBarStates.STATE_UPLOADING && state !== statusBarStates.STATE_PREPROCESSING) {\n      state = statusBarStates.STATE_POSTPROCESSING;\n    }\n  }\n  return state;\n}\n/**\n * StatusBar: renders a status bar with upload/pause/resume/cancel/retry buttons,\n * progress percentage and time remaining.\n */\n\nexport default class StatusBar extends UIPlugin {\n  constructor(uppy, opts) {\n    super(uppy, opts);\n    this.startUpload = () => {\n      const {\n        recoveredState\n      } = this.uppy.getState();\n      if (recoveredState) {\n        this.uppy.emit('restore-confirmed');\n        return undefined;\n      }\n      return this.uppy.upload().catch(() => {// Error logged in Core\n      });\n    };\n    this.id = this.opts.id || 'StatusBar';\n    this.title = 'StatusBar';\n    this.type = 'progressindicator';\n    this.defaultLocale = locale; // set default options, must be kept in sync with @uppy/react/src/StatusBar.js\n\n    const defaultOptions = {\n      target: 'body',\n      hideUploadButton: false,\n      hideRetryButton: false,\n      hidePauseResumeButton: false,\n      hideCancelButton: false,\n      showProgressDetails: false,\n      hideAfterFinish: true,\n      doneButtonHandler: null\n    };\n    this.opts = {\n      ...defaultOptions,\n      ...opts\n    };\n    this.i18nInit();\n    this.render = this.render.bind(this);\n    this.install = this.install.bind(this);\n  }\n  render(state) {\n    const {\n      capabilities,\n      files,\n      allowNewUpload,\n      totalProgress,\n      error,\n      recoveredState\n    } = state;\n    const {\n      newFiles,\n      startedFiles,\n      completeFiles,\n      inProgressNotPausedFiles,\n      isUploadStarted,\n      isAllComplete,\n      isAllErrored,\n      isAllPaused,\n      isUploadInProgress,\n      isSomeGhost\n    } = this.uppy.getObjectOfFilesPerState(); // If some state was recovered, we want to show Upload button/counter\n    // for all the files, because in this case it’s not an Upload button,\n    // but “Confirm Restore Button”\n\n    const newFilesOrRecovered = recoveredState ? Object.values(files) : newFiles;\n    const totalETA = getTotalETA(inProgressNotPausedFiles);\n    const resumableUploads = !!capabilities.resumableUploads;\n    const supportsUploadProgress = capabilities.uploadProgress !== false;\n    let totalSize = 0;\n    let totalUploadedSize = 0;\n    startedFiles.forEach(file => {\n      totalSize += file.progress.bytesTotal || 0;\n      totalUploadedSize += file.progress.bytesUploaded || 0;\n    });\n    return StatusBarUI({\n      error,\n      uploadState: getUploadingState(error, isAllComplete, recoveredState, state.files || {}),\n      allowNewUpload,\n      totalProgress,\n      totalSize,\n      totalUploadedSize,\n      isAllComplete: false,\n      isAllPaused,\n      isAllErrored,\n      isUploadStarted,\n      isUploadInProgress,\n      isSomeGhost,\n      recoveredState,\n      complete: completeFiles.length,\n      newFiles: newFilesOrRecovered.length,\n      numUploads: startedFiles.length,\n      totalETA,\n      files,\n      i18n: this.i18n,\n      uppy: this.uppy,\n      startUpload: this.startUpload,\n      doneButtonHandler: this.opts.doneButtonHandler,\n      resumableUploads,\n      supportsUploadProgress,\n      showProgressDetails: this.opts.showProgressDetails,\n      hideUploadButton: this.opts.hideUploadButton,\n      hideRetryButton: this.opts.hideRetryButton,\n      hidePauseResumeButton: this.opts.hidePauseResumeButton,\n      hideCancelButton: this.opts.hideCancelButton,\n      hideAfterFinish: this.opts.hideAfterFinish,\n      isTargetDOMEl: this.isTargetDOMEl\n    });\n  }\n  onMount() {\n    // Set the text direction if the page has not defined one.\n    const element = this.el;\n    const direction = getTextDirection(element);\n    if (!direction) {\n      element.dir = 'ltr';\n    }\n  }\n  install() {\n    const {\n      target\n    } = this.opts;\n    if (target) {\n      this.mount(target, this);\n    }\n  }\n  uninstall() {\n    this.unmount();\n  }\n}\nStatusBar.VERSION = packageJson.version;","map":{"version":3,"names":["UIPlugin","getSpeed","getBytesRemaining","getTextDirection","statusBarStates","StatusBarUI","packageJson","locale","getTotalSpeed","files","totalSpeed","forEach","file","progress","getTotalETA","totalBytesRemaining","reduce","total","Math","round","getUploadingState","error","isAllComplete","recoveredState","STATE_ERROR","STATE_COMPLETE","STATE_WAITING","state","fileIDs","Object","keys","i","length","uploadStarted","uploadComplete","STATE_UPLOADING","preprocess","STATE_PREPROCESSING","postprocess","STATE_POSTPROCESSING","StatusBar","constructor","uppy","opts","startUpload","getState","emit","undefined","upload","catch","id","title","type","defaultLocale","defaultOptions","target","hideUploadButton","hideRetryButton","hidePauseResumeButton","hideCancelButton","showProgressDetails","hideAfterFinish","doneButtonHandler","i18nInit","render","bind","install","capabilities","allowNewUpload","totalProgress","newFiles","startedFiles","completeFiles","inProgressNotPausedFiles","isUploadStarted","isAllErrored","isAllPaused","isUploadInProgress","isSomeGhost","getObjectOfFilesPerState","newFilesOrRecovered","values","totalETA","resumableUploads","supportsUploadProgress","uploadProgress","totalSize","totalUploadedSize","bytesTotal","bytesUploaded","uploadState","complete","numUploads","i18n","isTargetDOMEl","onMount","element","el","direction","dir","mount","uninstall","unmount","VERSION","version"],"sources":["/lab/node_modules/@uppy/status-bar/lib/StatusBar.js"],"sourcesContent":["import { UIPlugin } from '@uppy/core';\nimport getSpeed from '@uppy/utils/lib/getSpeed';\nimport getBytesRemaining from '@uppy/utils/lib/getBytesRemaining';\nimport getTextDirection from '@uppy/utils/lib/getTextDirection';\nimport statusBarStates from './StatusBarStates.js';\nimport StatusBarUI from \"./StatusBarUI.js\";\nconst packageJson = {\n  \"version\": \"3.0.1\"\n};\nimport locale from './locale.js';\n\nfunction getTotalSpeed(files) {\n  let totalSpeed = 0;\n  files.forEach(file => {\n    totalSpeed += getSpeed(file.progress);\n  });\n  return totalSpeed;\n}\n\nfunction getTotalETA(files) {\n  const totalSpeed = getTotalSpeed(files);\n\n  if (totalSpeed === 0) {\n    return 0;\n  }\n\n  const totalBytesRemaining = files.reduce((total, file) => {\n    return total + getBytesRemaining(file.progress);\n  }, 0);\n  return Math.round(totalBytesRemaining / totalSpeed * 10) / 10;\n}\n\nfunction getUploadingState(error, isAllComplete, recoveredState, files) {\n  if (error && !isAllComplete) {\n    return statusBarStates.STATE_ERROR;\n  }\n\n  if (isAllComplete) {\n    return statusBarStates.STATE_COMPLETE;\n  }\n\n  if (recoveredState) {\n    return statusBarStates.STATE_WAITING;\n  }\n\n  let state = statusBarStates.STATE_WAITING;\n  const fileIDs = Object.keys(files);\n\n  for (let i = 0; i < fileIDs.length; i++) {\n    const {\n      progress\n    } = files[fileIDs[i]]; // If ANY files are being uploaded right now, show the uploading state.\n\n    if (progress.uploadStarted && !progress.uploadComplete) {\n      return statusBarStates.STATE_UPLOADING;\n    } // If files are being preprocessed AND postprocessed at this time, we show the\n    // preprocess state. If any files are being uploaded we show uploading.\n\n\n    if (progress.preprocess && state !== statusBarStates.STATE_UPLOADING) {\n      state = statusBarStates.STATE_PREPROCESSING;\n    } // If NO files are being preprocessed or uploaded right now, but some files are\n    // being postprocessed, show the postprocess state.\n\n\n    if (progress.postprocess && state !== statusBarStates.STATE_UPLOADING && state !== statusBarStates.STATE_PREPROCESSING) {\n      state = statusBarStates.STATE_POSTPROCESSING;\n    }\n  }\n\n  return state;\n}\n/**\n * StatusBar: renders a status bar with upload/pause/resume/cancel/retry buttons,\n * progress percentage and time remaining.\n */\n\n\nexport default class StatusBar extends UIPlugin {\n  constructor(uppy, opts) {\n    super(uppy, opts);\n\n    this.startUpload = () => {\n      const {\n        recoveredState\n      } = this.uppy.getState();\n\n      if (recoveredState) {\n        this.uppy.emit('restore-confirmed');\n        return undefined;\n      }\n\n      return this.uppy.upload().catch(() => {// Error logged in Core\n      });\n    };\n\n    this.id = this.opts.id || 'StatusBar';\n    this.title = 'StatusBar';\n    this.type = 'progressindicator';\n    this.defaultLocale = locale; // set default options, must be kept in sync with @uppy/react/src/StatusBar.js\n\n    const defaultOptions = {\n      target: 'body',\n      hideUploadButton: false,\n      hideRetryButton: false,\n      hidePauseResumeButton: false,\n      hideCancelButton: false,\n      showProgressDetails: false,\n      hideAfterFinish: true,\n      doneButtonHandler: null\n    };\n    this.opts = { ...defaultOptions,\n      ...opts\n    };\n    this.i18nInit();\n    this.render = this.render.bind(this);\n    this.install = this.install.bind(this);\n  }\n\n  render(state) {\n    const {\n      capabilities,\n      files,\n      allowNewUpload,\n      totalProgress,\n      error,\n      recoveredState\n    } = state;\n    const {\n      newFiles,\n      startedFiles,\n      completeFiles,\n      inProgressNotPausedFiles,\n      isUploadStarted,\n      isAllComplete,\n      isAllErrored,\n      isAllPaused,\n      isUploadInProgress,\n      isSomeGhost\n    } = this.uppy.getObjectOfFilesPerState(); // If some state was recovered, we want to show Upload button/counter\n    // for all the files, because in this case it’s not an Upload button,\n    // but “Confirm Restore Button”\n\n    const newFilesOrRecovered = recoveredState ? Object.values(files) : newFiles;\n    const totalETA = getTotalETA(inProgressNotPausedFiles);\n    const resumableUploads = !!capabilities.resumableUploads;\n    const supportsUploadProgress = capabilities.uploadProgress !== false;\n    let totalSize = 0;\n    let totalUploadedSize = 0;\n    startedFiles.forEach(file => {\n      totalSize += file.progress.bytesTotal || 0;\n      totalUploadedSize += file.progress.bytesUploaded || 0;\n    });\n    return StatusBarUI({\n      error,\n      uploadState: getUploadingState(error, isAllComplete, recoveredState, state.files || {}),\n      allowNewUpload,\n      totalProgress,\n      totalSize,\n      totalUploadedSize,\n      isAllComplete: false,\n      isAllPaused,\n      isAllErrored,\n      isUploadStarted,\n      isUploadInProgress,\n      isSomeGhost,\n      recoveredState,\n      complete: completeFiles.length,\n      newFiles: newFilesOrRecovered.length,\n      numUploads: startedFiles.length,\n      totalETA,\n      files,\n      i18n: this.i18n,\n      uppy: this.uppy,\n      startUpload: this.startUpload,\n      doneButtonHandler: this.opts.doneButtonHandler,\n      resumableUploads,\n      supportsUploadProgress,\n      showProgressDetails: this.opts.showProgressDetails,\n      hideUploadButton: this.opts.hideUploadButton,\n      hideRetryButton: this.opts.hideRetryButton,\n      hidePauseResumeButton: this.opts.hidePauseResumeButton,\n      hideCancelButton: this.opts.hideCancelButton,\n      hideAfterFinish: this.opts.hideAfterFinish,\n      isTargetDOMEl: this.isTargetDOMEl\n    });\n  }\n\n  onMount() {\n    // Set the text direction if the page has not defined one.\n    const element = this.el;\n    const direction = getTextDirection(element);\n\n    if (!direction) {\n      element.dir = 'ltr';\n    }\n  }\n\n  install() {\n    const {\n      target\n    } = this.opts;\n\n    if (target) {\n      this.mount(target, this);\n    }\n  }\n\n  uninstall() {\n    this.unmount();\n  }\n\n}\nStatusBar.VERSION = packageJson.version;"],"mappings":"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"},"metadata":{},"sourceType":"module"}