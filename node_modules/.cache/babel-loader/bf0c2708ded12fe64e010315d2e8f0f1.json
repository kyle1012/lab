{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nlet _Symbol$for, _Symbol$for2;\nfunction _classPrivateFieldLooseBase(receiver, privateKey) {\n  if (!Object.prototype.hasOwnProperty.call(receiver, privateKey)) {\n    throw new TypeError(\"attempted to use private field on non-instance\");\n  }\n  return receiver;\n}\nvar id = 0;\nfunction _classPrivateFieldLooseKey(name) {\n  return \"__private_\" + id++ + \"_\" + name;\n}\n\n/* eslint-disable max-classes-per-file */\n\n/* global AggregateError */\nimport Translator from '@uppy/utils/lib/Translator';\nimport ee from 'namespace-emitter';\nimport { nanoid } from 'nanoid/non-secure';\nimport throttle from 'lodash.throttle';\nimport DefaultStore from '@uppy/store-default';\nimport getFileType from '@uppy/utils/lib/getFileType';\nimport getFileNameAndExtension from '@uppy/utils/lib/getFileNameAndExtension';\nimport generateFileID from '@uppy/utils/lib/generateFileID';\nimport supportsUploadProgress from './supportsUploadProgress.js';\nimport getFileName from './getFileName.js';\nimport { justErrorsLogger, debugLogger } from './loggers.js';\nimport { Restricter, defaultOptions as defaultRestrictionOptions, RestrictionError } from './Restricter.js';\nconst packageJson = {\n  \"version\": \"3.0.4\"\n};\nimport locale from './locale.js';\n/**\n * Uppy Core module.\n * Manages plugins, state updates, acts as an event bus,\n * adds/removes files and metadata.\n */\n\nvar _plugins = /*#__PURE__*/_classPrivateFieldLooseKey(\"plugins\");\nvar _restricter = /*#__PURE__*/_classPrivateFieldLooseKey(\"restricter\");\nvar _storeUnsubscribe = /*#__PURE__*/_classPrivateFieldLooseKey(\"storeUnsubscribe\");\nvar _emitter = /*#__PURE__*/_classPrivateFieldLooseKey(\"emitter\");\nvar _preProcessors = /*#__PURE__*/_classPrivateFieldLooseKey(\"preProcessors\");\nvar _uploaders = /*#__PURE__*/_classPrivateFieldLooseKey(\"uploaders\");\nvar _postProcessors = /*#__PURE__*/_classPrivateFieldLooseKey(\"postProcessors\");\nvar _informAndEmit = /*#__PURE__*/_classPrivateFieldLooseKey(\"informAndEmit\");\nvar _checkRequiredMetaFieldsOnFile = /*#__PURE__*/_classPrivateFieldLooseKey(\"checkRequiredMetaFieldsOnFile\");\nvar _checkRequiredMetaFields = /*#__PURE__*/_classPrivateFieldLooseKey(\"checkRequiredMetaFields\");\nvar _assertNewUploadAllowed = /*#__PURE__*/_classPrivateFieldLooseKey(\"assertNewUploadAllowed\");\nvar _checkAndCreateFileStateObject = /*#__PURE__*/_classPrivateFieldLooseKey(\"checkAndCreateFileStateObject\");\nvar _startIfAutoProceed = /*#__PURE__*/_classPrivateFieldLooseKey(\"startIfAutoProceed\");\nvar _addListeners = /*#__PURE__*/_classPrivateFieldLooseKey(\"addListeners\");\nvar _updateOnlineStatus = /*#__PURE__*/_classPrivateFieldLooseKey(\"updateOnlineStatus\");\nvar _createUpload = /*#__PURE__*/_classPrivateFieldLooseKey(\"createUpload\");\nvar _getUpload = /*#__PURE__*/_classPrivateFieldLooseKey(\"getUpload\");\nvar _removeUpload = /*#__PURE__*/_classPrivateFieldLooseKey(\"removeUpload\");\nvar _runUpload = /*#__PURE__*/_classPrivateFieldLooseKey(\"runUpload\");\n_Symbol$for = Symbol.for('uppy test: getPlugins');\n_Symbol$for2 = Symbol.for('uppy test: createUpload');\nclass Uppy {\n  /** @type {Record<string, BasePlugin[]>} */\n\n  /**\n   * Instantiate Uppy\n   *\n   * @param {object} opts — Uppy options\n   */\n  constructor(_opts) {\n    Object.defineProperty(this, _runUpload, {\n      value: _runUpload2\n    });\n    Object.defineProperty(this, _removeUpload, {\n      value: _removeUpload2\n    });\n    Object.defineProperty(this, _getUpload, {\n      value: _getUpload2\n    });\n    Object.defineProperty(this, _createUpload, {\n      value: _createUpload2\n    });\n    Object.defineProperty(this, _addListeners, {\n      value: _addListeners2\n    });\n    Object.defineProperty(this, _startIfAutoProceed, {\n      value: _startIfAutoProceed2\n    });\n    Object.defineProperty(this, _checkAndCreateFileStateObject, {\n      value: _checkAndCreateFileStateObject2\n    });\n    Object.defineProperty(this, _assertNewUploadAllowed, {\n      value: _assertNewUploadAllowed2\n    });\n    Object.defineProperty(this, _checkRequiredMetaFields, {\n      value: _checkRequiredMetaFields2\n    });\n    Object.defineProperty(this, _checkRequiredMetaFieldsOnFile, {\n      value: _checkRequiredMetaFieldsOnFile2\n    });\n    Object.defineProperty(this, _informAndEmit, {\n      value: _informAndEmit2\n    });\n    Object.defineProperty(this, _plugins, {\n      writable: true,\n      value: Object.create(null)\n    });\n    Object.defineProperty(this, _restricter, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _storeUnsubscribe, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _emitter, {\n      writable: true,\n      value: ee()\n    });\n    Object.defineProperty(this, _preProcessors, {\n      writable: true,\n      value: new Set()\n    });\n    Object.defineProperty(this, _uploaders, {\n      writable: true,\n      value: new Set()\n    });\n    Object.defineProperty(this, _postProcessors, {\n      writable: true,\n      value: new Set()\n    });\n    Object.defineProperty(this, _updateOnlineStatus, {\n      writable: true,\n      value: this.updateOnlineStatus.bind(this)\n    });\n    this.defaultLocale = locale;\n    const defaultOptions = {\n      id: 'uppy',\n      autoProceed: false,\n      allowMultipleUploadBatches: true,\n      debug: false,\n      restrictions: defaultRestrictionOptions,\n      meta: {},\n      onBeforeFileAdded: currentFile => currentFile,\n      onBeforeUpload: files => files,\n      store: new DefaultStore(),\n      logger: justErrorsLogger,\n      infoTimeout: 5000\n    }; // Merge default options with the ones set by user,\n    // making sure to merge restrictions too\n\n    this.opts = {\n      ...defaultOptions,\n      ..._opts,\n      restrictions: {\n        ...defaultOptions.restrictions,\n        ...(_opts && _opts.restrictions)\n      }\n    }; // Support debug: true for backwards-compatability, unless logger is set in opts\n    // opts instead of this.opts to avoid comparing objects — we set logger: justErrorsLogger in defaultOptions\n\n    if (_opts && _opts.logger && _opts.debug) {\n      this.log('You are using a custom `logger`, but also set `debug: true`, which uses built-in logger to output logs to console. Ignoring `debug: true` and using your custom `logger`.', 'warning');\n    } else if (_opts && _opts.debug) {\n      this.opts.logger = debugLogger;\n    }\n    this.log(`Using Core v${this.constructor.VERSION}`);\n    this.i18nInit(); // ___Why throttle at 500ms?\n    //    - We must throttle at >250ms for superfocus in Dashboard to work well\n    //    (because animation takes 0.25s, and we want to wait for all animations to be over before refocusing).\n    //    [Practical Check]: if thottle is at 100ms, then if you are uploading a file,\n    //    and click 'ADD MORE FILES', - focus won't activate in Firefox.\n    //    - We must throttle at around >500ms to avoid performance lags.\n    //    [Practical Check] Firefox, try to upload a big file for a prolonged period of time. Laptop will start to heat up.\n\n    this.calculateProgress = throttle(this.calculateProgress.bind(this), 500, {\n      leading: true,\n      trailing: true\n    });\n    this.store = this.opts.store;\n    this.setState({\n      plugins: {},\n      files: {},\n      currentUploads: {},\n      allowNewUpload: true,\n      capabilities: {\n        uploadProgress: supportsUploadProgress(),\n        individualCancellation: true,\n        resumableUploads: false\n      },\n      totalProgress: 0,\n      meta: {\n        ...this.opts.meta\n      },\n      info: [],\n      recoveredState: null\n    });\n    _classPrivateFieldLooseBase(this, _restricter)[_restricter] = new Restricter(() => this.opts, this.i18n);\n    _classPrivateFieldLooseBase(this, _storeUnsubscribe)[_storeUnsubscribe] = this.store.subscribe((prevState, nextState, patch) => {\n      this.emit('state-update', prevState, nextState, patch);\n      this.updateAll(nextState);\n    }); // Exposing uppy object on window for debugging and testing\n\n    if (this.opts.debug && typeof window !== 'undefined') {\n      window[this.opts.id] = this;\n    }\n    _classPrivateFieldLooseBase(this, _addListeners)[_addListeners]();\n  }\n  emit(event) {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n    _classPrivateFieldLooseBase(this, _emitter)[_emitter].emit(event, ...args);\n  }\n  on(event, callback) {\n    _classPrivateFieldLooseBase(this, _emitter)[_emitter].on(event, callback);\n    return this;\n  }\n  once(event, callback) {\n    _classPrivateFieldLooseBase(this, _emitter)[_emitter].once(event, callback);\n    return this;\n  }\n  off(event, callback) {\n    _classPrivateFieldLooseBase(this, _emitter)[_emitter].off(event, callback);\n    return this;\n  }\n  /**\n   * Iterate on all plugins and run `update` on them.\n   * Called each time state changes.\n   *\n   */\n\n  updateAll(state) {\n    this.iteratePlugins(plugin => {\n      plugin.update(state);\n    });\n  }\n  /**\n   * Updates state with a patch\n   *\n   * @param {object} patch {foo: 'bar'}\n   */\n\n  setState(patch) {\n    this.store.setState(patch);\n  }\n  /**\n   * Returns current state.\n   *\n   * @returns {object}\n   */\n\n  getState() {\n    return this.store.getState();\n  }\n  /**\n   * Shorthand to set state for a specific file.\n   */\n\n  setFileState(fileID, state) {\n    if (!this.getState().files[fileID]) {\n      throw new Error(`Can’t set state for ${fileID} (the file could have been removed)`);\n    }\n    this.setState({\n      files: {\n        ...this.getState().files,\n        [fileID]: {\n          ...this.getState().files[fileID],\n          ...state\n        }\n      }\n    });\n  }\n  i18nInit() {\n    const translator = new Translator([this.defaultLocale, this.opts.locale]);\n    this.i18n = translator.translate.bind(translator);\n    this.i18nArray = translator.translateArray.bind(translator);\n    this.locale = translator.locale;\n  }\n  setOptions(newOpts) {\n    this.opts = {\n      ...this.opts,\n      ...newOpts,\n      restrictions: {\n        ...this.opts.restrictions,\n        ...(newOpts && newOpts.restrictions)\n      }\n    };\n    if (newOpts.meta) {\n      this.setMeta(newOpts.meta);\n    }\n    this.i18nInit();\n    if (newOpts.locale) {\n      this.iteratePlugins(plugin => {\n        plugin.setOptions();\n      });\n    } // Note: this is not the preact `setState`, it's an internal function that has the same name.\n\n    this.setState(); // so that UI re-renders with new options\n  }\n\n  resetProgress() {\n    const defaultProgress = {\n      percentage: 0,\n      bytesUploaded: 0,\n      uploadComplete: false,\n      uploadStarted: null\n    };\n    const files = {\n      ...this.getState().files\n    };\n    const updatedFiles = {};\n    Object.keys(files).forEach(fileID => {\n      const updatedFile = {\n        ...files[fileID]\n      };\n      updatedFile.progress = {\n        ...updatedFile.progress,\n        ...defaultProgress\n      };\n      updatedFiles[fileID] = updatedFile;\n    });\n    this.setState({\n      files: updatedFiles,\n      totalProgress: 0\n    });\n    this.emit('reset-progress');\n  }\n  addPreProcessor(fn) {\n    _classPrivateFieldLooseBase(this, _preProcessors)[_preProcessors].add(fn);\n  }\n  removePreProcessor(fn) {\n    return _classPrivateFieldLooseBase(this, _preProcessors)[_preProcessors].delete(fn);\n  }\n  addPostProcessor(fn) {\n    _classPrivateFieldLooseBase(this, _postProcessors)[_postProcessors].add(fn);\n  }\n  removePostProcessor(fn) {\n    return _classPrivateFieldLooseBase(this, _postProcessors)[_postProcessors].delete(fn);\n  }\n  addUploader(fn) {\n    _classPrivateFieldLooseBase(this, _uploaders)[_uploaders].add(fn);\n  }\n  removeUploader(fn) {\n    return _classPrivateFieldLooseBase(this, _uploaders)[_uploaders].delete(fn);\n  }\n  setMeta(data) {\n    const updatedMeta = {\n      ...this.getState().meta,\n      ...data\n    };\n    const updatedFiles = {\n      ...this.getState().files\n    };\n    Object.keys(updatedFiles).forEach(fileID => {\n      updatedFiles[fileID] = {\n        ...updatedFiles[fileID],\n        meta: {\n          ...updatedFiles[fileID].meta,\n          ...data\n        }\n      };\n    });\n    this.log('Adding metadata:');\n    this.log(data);\n    this.setState({\n      meta: updatedMeta,\n      files: updatedFiles\n    });\n  }\n  setFileMeta(fileID, data) {\n    const updatedFiles = {\n      ...this.getState().files\n    };\n    if (!updatedFiles[fileID]) {\n      this.log('Was trying to set metadata for a file that has been removed: ', fileID);\n      return;\n    }\n    const newMeta = {\n      ...updatedFiles[fileID].meta,\n      ...data\n    };\n    updatedFiles[fileID] = {\n      ...updatedFiles[fileID],\n      meta: newMeta\n    };\n    this.setState({\n      files: updatedFiles\n    });\n  }\n  /**\n   * Get a file object.\n   *\n   * @param {string} fileID The ID of the file object to return.\n   */\n\n  getFile(fileID) {\n    return this.getState().files[fileID];\n  }\n  /**\n   * Get all files in an array.\n   */\n\n  getFiles() {\n    const {\n      files\n    } = this.getState();\n    return Object.values(files);\n  }\n  getObjectOfFilesPerState() {\n    const {\n      files: filesObject,\n      totalProgress,\n      error\n    } = this.getState();\n    const files = Object.values(filesObject);\n    const inProgressFiles = files.filter(_ref => {\n      let {\n        progress\n      } = _ref;\n      return !progress.uploadComplete && progress.uploadStarted;\n    });\n    const newFiles = files.filter(file => !file.progress.uploadStarted);\n    const startedFiles = files.filter(file => file.progress.uploadStarted || file.progress.preprocess || file.progress.postprocess);\n    const uploadStartedFiles = files.filter(file => file.progress.uploadStarted);\n    const pausedFiles = files.filter(file => file.isPaused);\n    const completeFiles = files.filter(file => file.progress.uploadComplete);\n    const erroredFiles = files.filter(file => file.error);\n    const inProgressNotPausedFiles = inProgressFiles.filter(file => !file.isPaused);\n    const processingFiles = files.filter(file => file.progress.preprocess || file.progress.postprocess);\n    return {\n      newFiles,\n      startedFiles,\n      uploadStartedFiles,\n      pausedFiles,\n      completeFiles,\n      erroredFiles,\n      inProgressFiles,\n      inProgressNotPausedFiles,\n      processingFiles,\n      isUploadStarted: uploadStartedFiles.length > 0,\n      isAllComplete: totalProgress === 100 && completeFiles.length === files.length && processingFiles.length === 0,\n      isAllErrored: !!error && erroredFiles.length === files.length,\n      isAllPaused: inProgressFiles.length !== 0 && pausedFiles.length === inProgressFiles.length,\n      isUploadInProgress: inProgressFiles.length > 0,\n      isSomeGhost: files.some(file => file.isGhost)\n    };\n  }\n  /*\n  * @constructs\n  * @param { Error } error\n  * @param { undefined } file\n  */\n\n  /*\n  * @constructs\n  * @param { RestrictionError } error\n  * @param { UppyFile | undefined } file\n  */\n\n  validateRestrictions(file, files) {\n    if (files === void 0) {\n      files = this.getFiles();\n    }\n    try {\n      _classPrivateFieldLooseBase(this, _restricter)[_restricter].validate(file, files);\n    } catch (err) {\n      return err;\n    }\n    return null;\n  }\n  checkIfFileAlreadyExists(fileID) {\n    const {\n      files\n    } = this.getState();\n    if (files[fileID] && !files[fileID].isGhost) {\n      return true;\n    }\n    return false;\n  }\n  /**\n   * Create a file state object based on user-provided `addFile()` options.\n   *\n   * Note this is extremely side-effectful and should only be done when a file state object\n   * will be added to state immediately afterward!\n   *\n   * The `files` value is passed in because it may be updated by the caller without updating the store.\n   */\n\n  /**\n   * Add a new file to `state.files`. This will run `onBeforeFileAdded`,\n   * try to guess file type in a clever way, check file against restrictions,\n   * and start an upload if `autoProceed === true`.\n   *\n   * @param {object} file object to add\n   * @returns {string} id for the added file\n   */\n  addFile(file) {\n    _classPrivateFieldLooseBase(this, _assertNewUploadAllowed)[_assertNewUploadAllowed](file);\n    const {\n      files\n    } = this.getState();\n    let newFile = _classPrivateFieldLooseBase(this, _checkAndCreateFileStateObject)[_checkAndCreateFileStateObject](files, file); // Users are asked to re-select recovered files without data,\n    // and to keep the progress, meta and everthing else, we only replace said data\n\n    if (files[newFile.id] && files[newFile.id].isGhost) {\n      newFile = {\n        ...files[newFile.id],\n        data: file.data,\n        isGhost: false\n      };\n      this.log(`Replaced the blob in the restored ghost file: ${newFile.name}, ${newFile.id}`);\n    }\n    this.setState({\n      files: {\n        ...files,\n        [newFile.id]: newFile\n      }\n    });\n    this.emit('file-added', newFile);\n    this.emit('files-added', [newFile]);\n    this.log(`Added file: ${newFile.name}, ${newFile.id}, mime type: ${newFile.type}`);\n    _classPrivateFieldLooseBase(this, _startIfAutoProceed)[_startIfAutoProceed]();\n    return newFile.id;\n  }\n  /**\n   * Add multiple files to `state.files`. See the `addFile()` documentation.\n   *\n   * If an error occurs while adding a file, it is logged and the user is notified.\n   * This is good for UI plugins, but not for programmatic use.\n   * Programmatic users should usually still use `addFile()` on individual files.\n   */\n\n  addFiles(fileDescriptors) {\n    _classPrivateFieldLooseBase(this, _assertNewUploadAllowed)[_assertNewUploadAllowed](); // create a copy of the files object only once\n\n    const files = {\n      ...this.getState().files\n    };\n    const newFiles = [];\n    const errors = [];\n    for (let i = 0; i < fileDescriptors.length; i++) {\n      try {\n        let newFile = _classPrivateFieldLooseBase(this, _checkAndCreateFileStateObject)[_checkAndCreateFileStateObject](files, fileDescriptors[i]); // Users are asked to re-select recovered files without data,\n        // and to keep the progress, meta and everthing else, we only replace said data\n\n        if (files[newFile.id] && files[newFile.id].isGhost) {\n          newFile = {\n            ...files[newFile.id],\n            data: fileDescriptors[i].data,\n            isGhost: false\n          };\n          this.log(`Replaced blob in a ghost file: ${newFile.name}, ${newFile.id}`);\n        }\n        files[newFile.id] = newFile;\n        newFiles.push(newFile);\n      } catch (err) {\n        if (!err.isRestriction) {\n          errors.push(err);\n        }\n      }\n    }\n    this.setState({\n      files\n    });\n    newFiles.forEach(newFile => {\n      this.emit('file-added', newFile);\n    });\n    this.emit('files-added', newFiles);\n    if (newFiles.length > 5) {\n      this.log(`Added batch of ${newFiles.length} files`);\n    } else {\n      Object.keys(newFiles).forEach(fileID => {\n        this.log(`Added file: ${newFiles[fileID].name}\\n id: ${newFiles[fileID].id}\\n type: ${newFiles[fileID].type}`);\n      });\n    }\n    if (newFiles.length > 0) {\n      _classPrivateFieldLooseBase(this, _startIfAutoProceed)[_startIfAutoProceed]();\n    }\n    if (errors.length > 0) {\n      let message = 'Multiple errors occurred while adding files:\\n';\n      errors.forEach(subError => {\n        message += `\\n * ${subError.message}`;\n      });\n      this.info({\n        message: this.i18n('addBulkFilesFailed', {\n          smart_count: errors.length\n        }),\n        details: message\n      }, 'error', this.opts.infoTimeout);\n      if (typeof AggregateError === 'function') {\n        throw new AggregateError(errors, message);\n      } else {\n        const err = new Error(message);\n        err.errors = errors;\n        throw err;\n      }\n    }\n  }\n  removeFiles(fileIDs, reason) {\n    const {\n      files,\n      currentUploads\n    } = this.getState();\n    const updatedFiles = {\n      ...files\n    };\n    const updatedUploads = {\n      ...currentUploads\n    };\n    const removedFiles = Object.create(null);\n    fileIDs.forEach(fileID => {\n      if (files[fileID]) {\n        removedFiles[fileID] = files[fileID];\n        delete updatedFiles[fileID];\n      }\n    }); // Remove files from the `fileIDs` list in each upload.\n\n    function fileIsNotRemoved(uploadFileID) {\n      return removedFiles[uploadFileID] === undefined;\n    }\n    Object.keys(updatedUploads).forEach(uploadID => {\n      const newFileIDs = currentUploads[uploadID].fileIDs.filter(fileIsNotRemoved); // Remove the upload if no files are associated with it anymore.\n\n      if (newFileIDs.length === 0) {\n        delete updatedUploads[uploadID];\n        return;\n      }\n      const {\n        capabilities\n      } = this.getState();\n      if (newFileIDs.length !== currentUploads[uploadID].fileIDs.length && !capabilities.individualCancellation) {\n        throw new Error('individualCancellation is disabled');\n      }\n      updatedUploads[uploadID] = {\n        ...currentUploads[uploadID],\n        fileIDs: newFileIDs\n      };\n    });\n    const stateUpdate = {\n      currentUploads: updatedUploads,\n      files: updatedFiles\n    }; // If all files were removed - allow new uploads,\n    // and clear recoveredState\n\n    if (Object.keys(updatedFiles).length === 0) {\n      stateUpdate.allowNewUpload = true;\n      stateUpdate.error = null;\n      stateUpdate.recoveredState = null;\n    }\n    this.setState(stateUpdate);\n    this.calculateTotalProgress();\n    const removedFileIDs = Object.keys(removedFiles);\n    removedFileIDs.forEach(fileID => {\n      this.emit('file-removed', removedFiles[fileID], reason);\n    });\n    if (removedFileIDs.length > 5) {\n      this.log(`Removed ${removedFileIDs.length} files`);\n    } else {\n      this.log(`Removed files: ${removedFileIDs.join(', ')}`);\n    }\n  }\n  removeFile(fileID, reason) {\n    if (reason === void 0) {\n      reason = null;\n    }\n    this.removeFiles([fileID], reason);\n  }\n  pauseResume(fileID) {\n    if (!this.getState().capabilities.resumableUploads || this.getFile(fileID).uploadComplete) {\n      return undefined;\n    }\n    const wasPaused = this.getFile(fileID).isPaused || false;\n    const isPaused = !wasPaused;\n    this.setFileState(fileID, {\n      isPaused\n    });\n    this.emit('upload-pause', fileID, isPaused);\n    return isPaused;\n  }\n  pauseAll() {\n    const updatedFiles = {\n      ...this.getState().files\n    };\n    const inProgressUpdatedFiles = Object.keys(updatedFiles).filter(file => {\n      return !updatedFiles[file].progress.uploadComplete && updatedFiles[file].progress.uploadStarted;\n    });\n    inProgressUpdatedFiles.forEach(file => {\n      const updatedFile = {\n        ...updatedFiles[file],\n        isPaused: true\n      };\n      updatedFiles[file] = updatedFile;\n    });\n    this.setState({\n      files: updatedFiles\n    });\n    this.emit('pause-all');\n  }\n  resumeAll() {\n    const updatedFiles = {\n      ...this.getState().files\n    };\n    const inProgressUpdatedFiles = Object.keys(updatedFiles).filter(file => {\n      return !updatedFiles[file].progress.uploadComplete && updatedFiles[file].progress.uploadStarted;\n    });\n    inProgressUpdatedFiles.forEach(file => {\n      const updatedFile = {\n        ...updatedFiles[file],\n        isPaused: false,\n        error: null\n      };\n      updatedFiles[file] = updatedFile;\n    });\n    this.setState({\n      files: updatedFiles\n    });\n    this.emit('resume-all');\n  }\n  retryAll() {\n    const updatedFiles = {\n      ...this.getState().files\n    };\n    const filesToRetry = Object.keys(updatedFiles).filter(file => {\n      return updatedFiles[file].error;\n    });\n    filesToRetry.forEach(file => {\n      const updatedFile = {\n        ...updatedFiles[file],\n        isPaused: false,\n        error: null\n      };\n      updatedFiles[file] = updatedFile;\n    });\n    this.setState({\n      files: updatedFiles,\n      error: null\n    });\n    this.emit('retry-all', filesToRetry);\n    if (filesToRetry.length === 0) {\n      return Promise.resolve({\n        successful: [],\n        failed: []\n      });\n    }\n    const uploadID = _classPrivateFieldLooseBase(this, _createUpload)[_createUpload](filesToRetry, {\n      forceAllowNewUpload: true // create new upload even if allowNewUpload: false\n    });\n\n    return _classPrivateFieldLooseBase(this, _runUpload)[_runUpload](uploadID);\n  }\n  cancelAll(_temp) {\n    let {\n      reason = 'user'\n    } = _temp === void 0 ? {} : _temp;\n    this.emit('cancel-all', {\n      reason\n    }); // Only remove existing uploads if user is canceling\n\n    if (reason === 'user') {\n      const {\n        files\n      } = this.getState();\n      const fileIDs = Object.keys(files);\n      if (fileIDs.length) {\n        this.removeFiles(fileIDs, 'cancel-all');\n      }\n      this.setState({\n        totalProgress: 0,\n        error: null,\n        recoveredState: null\n      });\n    }\n  }\n  retryUpload(fileID) {\n    this.setFileState(fileID, {\n      error: null,\n      isPaused: false\n    });\n    this.emit('upload-retry', fileID);\n    const uploadID = _classPrivateFieldLooseBase(this, _createUpload)[_createUpload]([fileID], {\n      forceAllowNewUpload: true // create new upload even if allowNewUpload: false\n    });\n\n    return _classPrivateFieldLooseBase(this, _runUpload)[_runUpload](uploadID);\n  }\n  logout() {\n    this.iteratePlugins(plugin => {\n      if (plugin.provider && plugin.provider.logout) {\n        plugin.provider.logout();\n      }\n    });\n  }\n  calculateProgress(file, data) {\n    if (file == null || !this.getFile(file.id)) {\n      this.log(`Not setting progress for a file that has been removed: ${file == null ? void 0 : file.id}`);\n      return;\n    } // bytesTotal may be null or zero; in that case we can't divide by it\n\n    const canHavePercentage = Number.isFinite(data.bytesTotal) && data.bytesTotal > 0;\n    this.setFileState(file.id, {\n      progress: {\n        ...this.getFile(file.id).progress,\n        bytesUploaded: data.bytesUploaded,\n        bytesTotal: data.bytesTotal,\n        percentage: canHavePercentage ? Math.round(data.bytesUploaded / data.bytesTotal * 100) : 0\n      }\n    });\n    this.calculateTotalProgress();\n  }\n  calculateTotalProgress() {\n    // calculate total progress, using the number of files currently uploading,\n    // multiplied by 100 and the summ of individual progress of each file\n    const files = this.getFiles();\n    const inProgress = files.filter(file => {\n      return file.progress.uploadStarted || file.progress.preprocess || file.progress.postprocess;\n    });\n    if (inProgress.length === 0) {\n      this.emit('progress', 0);\n      this.setState({\n        totalProgress: 0\n      });\n      return;\n    }\n    const sizedFiles = inProgress.filter(file => file.progress.bytesTotal != null);\n    const unsizedFiles = inProgress.filter(file => file.progress.bytesTotal == null);\n    if (sizedFiles.length === 0) {\n      const progressMax = inProgress.length * 100;\n      const currentProgress = unsizedFiles.reduce((acc, file) => {\n        return acc + file.progress.percentage;\n      }, 0);\n      const totalProgress = Math.round(currentProgress / progressMax * 100);\n      this.setState({\n        totalProgress\n      });\n      return;\n    }\n    let totalSize = sizedFiles.reduce((acc, file) => {\n      return acc + file.progress.bytesTotal;\n    }, 0);\n    const averageSize = totalSize / sizedFiles.length;\n    totalSize += averageSize * unsizedFiles.length;\n    let uploadedSize = 0;\n    sizedFiles.forEach(file => {\n      uploadedSize += file.progress.bytesUploaded;\n    });\n    unsizedFiles.forEach(file => {\n      uploadedSize += averageSize * (file.progress.percentage || 0) / 100;\n    });\n    let totalProgress = totalSize === 0 ? 0 : Math.round(uploadedSize / totalSize * 100); // hot fix, because:\n    // uploadedSize ended up larger than totalSize, resulting in 1325% total\n\n    if (totalProgress > 100) {\n      totalProgress = 100;\n    }\n    this.setState({\n      totalProgress\n    });\n    this.emit('progress', totalProgress);\n  }\n  /**\n   * Registers listeners for all global actions, like:\n   * `error`, `file-removed`, `upload-progress`\n   */\n\n  updateOnlineStatus() {\n    const online = typeof window.navigator.onLine !== 'undefined' ? window.navigator.onLine : true;\n    if (!online) {\n      this.emit('is-offline');\n      this.info(this.i18n('noInternetConnection'), 'error', 0);\n      this.wasOffline = true;\n    } else {\n      this.emit('is-online');\n      if (this.wasOffline) {\n        this.emit('back-online');\n        this.info(this.i18n('connectedToInternet'), 'success', 3000);\n        this.wasOffline = false;\n      }\n    }\n  }\n  getID() {\n    return this.opts.id;\n  }\n  /**\n   * Registers a plugin with Core.\n   *\n   * @param {object} Plugin object\n   * @param {object} [opts] object with options to be passed to Plugin\n   * @returns {object} self for chaining\n   */\n  // eslint-disable-next-line no-shadow\n\n  use(Plugin, opts) {\n    if (typeof Plugin !== 'function') {\n      const msg = `Expected a plugin class, but got ${Plugin === null ? 'null' : typeof Plugin}.` + ' Please verify that the plugin was imported and spelled correctly.';\n      throw new TypeError(msg);\n    } // Instantiate\n\n    const plugin = new Plugin(this, opts);\n    const pluginId = plugin.id;\n    if (!pluginId) {\n      throw new Error('Your plugin must have an id');\n    }\n    if (!plugin.type) {\n      throw new Error('Your plugin must have a type');\n    }\n    const existsPluginAlready = this.getPlugin(pluginId);\n    if (existsPluginAlready) {\n      const msg = `Already found a plugin named '${existsPluginAlready.id}'. ` + `Tried to use: '${pluginId}'.\\n` + 'Uppy plugins must have unique `id` options. See https://uppy.io/docs/plugins/#id.';\n      throw new Error(msg);\n    }\n    if (Plugin.VERSION) {\n      this.log(`Using ${pluginId} v${Plugin.VERSION}`);\n    }\n    if (plugin.type in _classPrivateFieldLooseBase(this, _plugins)[_plugins]) {\n      _classPrivateFieldLooseBase(this, _plugins)[_plugins][plugin.type].push(plugin);\n    } else {\n      _classPrivateFieldLooseBase(this, _plugins)[_plugins][plugin.type] = [plugin];\n    }\n    plugin.install();\n    return this;\n  }\n  /**\n   * Find one Plugin by name.\n   *\n   * @param {string} id plugin id\n   * @returns {BasePlugin|undefined}\n   */\n\n  getPlugin(id) {\n    for (const plugins of Object.values(_classPrivateFieldLooseBase(this, _plugins)[_plugins])) {\n      const foundPlugin = plugins.find(plugin => plugin.id === id);\n      if (foundPlugin != null) return foundPlugin;\n    }\n    return undefined;\n  }\n  [_Symbol$for](type) {\n    return _classPrivateFieldLooseBase(this, _plugins)[_plugins][type];\n  }\n  /**\n   * Iterate through all `use`d plugins.\n   *\n   * @param {Function} method that will be run on each plugin\n   */\n\n  iteratePlugins(method) {\n    Object.values(_classPrivateFieldLooseBase(this, _plugins)[_plugins]).flat(1).forEach(method);\n  }\n  /**\n   * Uninstall and remove a plugin.\n   *\n   * @param {object} instance The plugin instance to remove.\n   */\n\n  removePlugin(instance) {\n    this.log(`Removing plugin ${instance.id}`);\n    this.emit('plugin-remove', instance);\n    if (instance.uninstall) {\n      instance.uninstall();\n    }\n    const list = _classPrivateFieldLooseBase(this, _plugins)[_plugins][instance.type]; // list.indexOf failed here, because Vue3 converted the plugin instance\n    // to a Proxy object, which failed the strict comparison test:\n    // obj !== objProxy\n\n    const index = list.findIndex(item => item.id === instance.id);\n    if (index !== -1) {\n      list.splice(index, 1);\n    }\n    const state = this.getState();\n    const updatedState = {\n      plugins: {\n        ...state.plugins,\n        [instance.id]: undefined\n      }\n    };\n    this.setState(updatedState);\n  }\n  /**\n   * Uninstall all plugins and close down this Uppy instance.\n   */\n\n  close(_temp2) {\n    let {\n      reason\n    } = _temp2 === void 0 ? {} : _temp2;\n    this.log(`Closing Uppy instance ${this.opts.id}: removing all files and uninstalling plugins`);\n    this.cancelAll({\n      reason\n    });\n    _classPrivateFieldLooseBase(this, _storeUnsubscribe)[_storeUnsubscribe]();\n    this.iteratePlugins(plugin => {\n      this.removePlugin(plugin);\n    });\n    if (typeof window !== 'undefined' && window.removeEventListener) {\n      window.removeEventListener('online', _classPrivateFieldLooseBase(this, _updateOnlineStatus)[_updateOnlineStatus]);\n      window.removeEventListener('offline', _classPrivateFieldLooseBase(this, _updateOnlineStatus)[_updateOnlineStatus]);\n    }\n  }\n  hideInfo() {\n    const {\n      info\n    } = this.getState();\n    this.setState({\n      info: info.slice(1)\n    });\n    this.emit('info-hidden');\n  }\n  /**\n   * Set info message in `state.info`, so that UI plugins like `Informer`\n   * can display the message.\n   *\n   * @param {string | object} message Message to be displayed by the informer\n   * @param {string} [type]\n   * @param {number} [duration]\n   */\n\n  info(message, type, duration) {\n    if (type === void 0) {\n      type = 'info';\n    }\n    if (duration === void 0) {\n      duration = 3000;\n    }\n    const isComplexMessage = typeof message === 'object';\n    this.setState({\n      info: [...this.getState().info, {\n        type,\n        message: isComplexMessage ? message.message : message,\n        details: isComplexMessage ? message.details : null\n      }]\n    });\n    setTimeout(() => this.hideInfo(), duration);\n    this.emit('info-visible');\n  }\n  /**\n   * Passes messages to a function, provided in `opts.logger`.\n   * If `opts.logger: Uppy.debugLogger` or `opts.debug: true`, logs to the browser console.\n   *\n   * @param {string|object} message to log\n   * @param {string} [type] optional `error` or `warning`\n   */\n\n  log(message, type) {\n    const {\n      logger\n    } = this.opts;\n    switch (type) {\n      case 'error':\n        logger.error(message);\n        break;\n      case 'warning':\n        logger.warn(message);\n        break;\n      default:\n        logger.debug(message);\n        break;\n    }\n  }\n  /**\n   * Restore an upload by its ID.\n   */\n\n  restore(uploadID) {\n    this.log(`Core: attempting to restore upload \"${uploadID}\"`);\n    if (!this.getState().currentUploads[uploadID]) {\n      _classPrivateFieldLooseBase(this, _removeUpload)[_removeUpload](uploadID);\n      return Promise.reject(new Error('Nonexistent upload'));\n    }\n    return _classPrivateFieldLooseBase(this, _runUpload)[_runUpload](uploadID);\n  }\n  /**\n   * Create an upload for a bunch of files.\n   *\n   * @param {Array<string>} fileIDs File IDs to include in this upload.\n   * @returns {string} ID of this upload.\n   */\n\n  [_Symbol$for2]() {\n    return _classPrivateFieldLooseBase(this, _createUpload)[_createUpload](...arguments);\n  }\n\n  /**\n   * Add data to an upload's result object.\n   *\n   * @param {string} uploadID The ID of the upload.\n   * @param {object} data Data properties to add to the result object.\n   */\n  addResultData(uploadID, data) {\n    if (!_classPrivateFieldLooseBase(this, _getUpload)[_getUpload](uploadID)) {\n      this.log(`Not setting result for an upload that has been removed: ${uploadID}`);\n      return;\n    }\n    const {\n      currentUploads\n    } = this.getState();\n    const currentUpload = {\n      ...currentUploads[uploadID],\n      result: {\n        ...currentUploads[uploadID].result,\n        ...data\n      }\n    };\n    this.setState({\n      currentUploads: {\n        ...currentUploads,\n        [uploadID]: currentUpload\n      }\n    });\n  }\n  /**\n   * Remove an upload, eg. if it has been canceled or completed.\n   *\n   * @param {string} uploadID The ID of the upload.\n   */\n\n  /**\n   * Start an upload for all the files that are not currently being uploaded.\n   *\n   * @returns {Promise}\n   */\n  upload() {\n    var _classPrivateFieldLoo;\n    if (!((_classPrivateFieldLoo = _classPrivateFieldLooseBase(this, _plugins)[_plugins].uploader) != null && _classPrivateFieldLoo.length)) {\n      this.log('No uploader type plugins are used', 'warning');\n    }\n    let {\n      files\n    } = this.getState();\n    const onBeforeUploadResult = this.opts.onBeforeUpload(files);\n    if (onBeforeUploadResult === false) {\n      return Promise.reject(new Error('Not starting the upload because onBeforeUpload returned false'));\n    }\n    if (onBeforeUploadResult && typeof onBeforeUploadResult === 'object') {\n      files = onBeforeUploadResult; // Updating files in state, because uploader plugins receive file IDs,\n      // and then fetch the actual file object from state\n\n      this.setState({\n        files\n      });\n    }\n    return Promise.resolve().then(() => _classPrivateFieldLooseBase(this, _restricter)[_restricter].validateMinNumberOfFiles(files)).catch(err => {\n      _classPrivateFieldLooseBase(this, _informAndEmit)[_informAndEmit](err);\n      throw err;\n    }).then(() => {\n      if (!_classPrivateFieldLooseBase(this, _checkRequiredMetaFields)[_checkRequiredMetaFields](files)) {\n        throw new RestrictionError(this.i18n('missingRequiredMetaField'));\n      }\n    }).catch(err => {\n      // Doing this in a separate catch because we already emited and logged\n      // all the errors in `checkRequiredMetaFields` so we only throw a generic\n      // missing fields error here.\n      throw err;\n    }).then(() => {\n      const {\n        currentUploads\n      } = this.getState(); // get a list of files that are currently assigned to uploads\n\n      const currentlyUploadingFiles = Object.values(currentUploads).flatMap(curr => curr.fileIDs);\n      const waitingFileIDs = [];\n      Object.keys(files).forEach(fileID => {\n        const file = this.getFile(fileID); // if the file hasn't started uploading and hasn't already been assigned to an upload..\n\n        if (!file.progress.uploadStarted && currentlyUploadingFiles.indexOf(fileID) === -1) {\n          waitingFileIDs.push(file.id);\n        }\n      });\n      const uploadID = _classPrivateFieldLooseBase(this, _createUpload)[_createUpload](waitingFileIDs);\n      return _classPrivateFieldLooseBase(this, _runUpload)[_runUpload](uploadID);\n    }).catch(err => {\n      this.emit('error', err);\n      this.log(err, 'error');\n      throw err;\n    });\n  }\n}\nfunction _informAndEmit2(error, file) {\n  const {\n    message,\n    details = ''\n  } = error;\n  if (error.isRestriction) {\n    this.emit('restriction-failed', file, error);\n  } else {\n    this.emit('error', error);\n  }\n  this.info({\n    message,\n    details\n  }, 'error', this.opts.infoTimeout);\n  this.log(`${message} ${details}`.trim(), 'error');\n}\nfunction _checkRequiredMetaFieldsOnFile2(file) {\n  const {\n    missingFields,\n    error\n  } = _classPrivateFieldLooseBase(this, _restricter)[_restricter].getMissingRequiredMetaFields(file);\n  if (missingFields.length > 0) {\n    this.setFileState(file.id, {\n      missingRequiredMetaFields: missingFields\n    });\n    this.log(error.message);\n    this.emit('restriction-failed', file, error);\n    return false;\n  }\n  return true;\n}\nfunction _checkRequiredMetaFields2(files) {\n  let success = true;\n  for (const file of Object.values(files)) {\n    if (!_classPrivateFieldLooseBase(this, _checkRequiredMetaFieldsOnFile)[_checkRequiredMetaFieldsOnFile](file)) {\n      success = false;\n    }\n  }\n  return success;\n}\nfunction _assertNewUploadAllowed2(file) {\n  const {\n    allowNewUpload\n  } = this.getState();\n  if (allowNewUpload === false) {\n    const error = new RestrictionError(this.i18n('noMoreFilesAllowed'));\n    _classPrivateFieldLooseBase(this, _informAndEmit)[_informAndEmit](error, file);\n    throw error;\n  }\n}\nfunction _checkAndCreateFileStateObject2(files, fileDescriptor) {\n  // Uppy expects files in { name, type, size, data } format.\n  // If the actual File object is passed from input[type=file] or drag-drop,\n  // we normalize it to match Uppy file object\n  if (fileDescriptor instanceof File) {\n    // eslint-disable-next-line no-param-reassign\n    fileDescriptor = {\n      name: fileDescriptor.name,\n      type: fileDescriptor.type,\n      size: fileDescriptor.size,\n      data: fileDescriptor\n    };\n  }\n  const fileType = getFileType(fileDescriptor);\n  const fileName = getFileName(fileType, fileDescriptor);\n  const fileExtension = getFileNameAndExtension(fileName).extension;\n  const isRemote = Boolean(fileDescriptor.isRemote);\n  const fileID = generateFileID({\n    ...fileDescriptor,\n    type: fileType\n  });\n  if (this.checkIfFileAlreadyExists(fileID)) {\n    const error = new RestrictionError(this.i18n('noDuplicates', {\n      fileName\n    }));\n    _classPrivateFieldLooseBase(this, _informAndEmit)[_informAndEmit](error, fileDescriptor);\n    throw error;\n  }\n  const meta = fileDescriptor.meta || {};\n  meta.name = fileName;\n  meta.type = fileType; // `null` means the size is unknown.\n\n  const size = Number.isFinite(fileDescriptor.data.size) ? fileDescriptor.data.size : null;\n  let newFile = {\n    source: fileDescriptor.source || '',\n    id: fileID,\n    name: fileName,\n    extension: fileExtension || '',\n    meta: {\n      ...this.getState().meta,\n      ...meta\n    },\n    type: fileType,\n    data: fileDescriptor.data,\n    progress: {\n      percentage: 0,\n      bytesUploaded: 0,\n      bytesTotal: size,\n      uploadComplete: false,\n      uploadStarted: null\n    },\n    size,\n    isRemote,\n    remote: fileDescriptor.remote || '',\n    preview: fileDescriptor.preview\n  };\n  const onBeforeFileAddedResult = this.opts.onBeforeFileAdded(newFile, files);\n  if (onBeforeFileAddedResult === false) {\n    // Don’t show UI info for this error, as it should be done by the developer\n    const error = new RestrictionError('Cannot add the file because onBeforeFileAdded returned false.');\n    this.emit('restriction-failed', fileDescriptor, error);\n    throw error;\n  } else if (typeof onBeforeFileAddedResult === 'object' && onBeforeFileAddedResult !== null) {\n    newFile = onBeforeFileAddedResult;\n  }\n  try {\n    const filesArray = Object.keys(files).map(i => files[i]);\n    _classPrivateFieldLooseBase(this, _restricter)[_restricter].validate(newFile, filesArray);\n  } catch (err) {\n    _classPrivateFieldLooseBase(this, _informAndEmit)[_informAndEmit](err, newFile);\n    throw err;\n  }\n  return newFile;\n}\nfunction _startIfAutoProceed2() {\n  if (this.opts.autoProceed && !this.scheduledAutoProceed) {\n    this.scheduledAutoProceed = setTimeout(() => {\n      this.scheduledAutoProceed = null;\n      this.upload().catch(err => {\n        if (!err.isRestriction) {\n          this.log(err.stack || err.message || err);\n        }\n      });\n    }, 4);\n  }\n}\nfunction _addListeners2() {\n  /**\n   * @param {Error} error\n   * @param {object} [file]\n   * @param {object} [response]\n   */\n  const errorHandler = (error, file, response) => {\n    let errorMsg = error.message || 'Unknown error';\n    if (error.details) {\n      errorMsg += ` ${error.details}`;\n    }\n    this.setState({\n      error: errorMsg\n    });\n    if (file != null && file.id in this.getState().files) {\n      this.setFileState(file.id, {\n        error: errorMsg,\n        response\n      });\n    }\n  };\n  this.on('error', errorHandler);\n  this.on('upload-error', (file, error, response) => {\n    errorHandler(error, file, response);\n    if (typeof error === 'object' && error.message) {\n      const newError = new Error(error.message);\n      newError.details = error.message;\n      if (error.details) {\n        newError.details += ` ${error.details}`;\n      }\n      newError.message = this.i18n('failedToUpload', {\n        file: file == null ? void 0 : file.name\n      });\n      _classPrivateFieldLooseBase(this, _informAndEmit)[_informAndEmit](newError);\n    } else {\n      _classPrivateFieldLooseBase(this, _informAndEmit)[_informAndEmit](error);\n    }\n  });\n  this.on('upload', () => {\n    this.setState({\n      error: null\n    });\n  });\n  this.on('upload-started', file => {\n    if (file == null || !this.getFile(file.id)) {\n      this.log(`Not setting progress for a file that has been removed: ${file == null ? void 0 : file.id}`);\n      return;\n    }\n    this.setFileState(file.id, {\n      progress: {\n        uploadStarted: Date.now(),\n        uploadComplete: false,\n        percentage: 0,\n        bytesUploaded: 0,\n        bytesTotal: file.size\n      }\n    });\n  });\n  this.on('upload-progress', this.calculateProgress);\n  this.on('upload-success', (file, uploadResp) => {\n    if (file == null || !this.getFile(file.id)) {\n      this.log(`Not setting progress for a file that has been removed: ${file == null ? void 0 : file.id}`);\n      return;\n    }\n    const currentProgress = this.getFile(file.id).progress;\n    this.setFileState(file.id, {\n      progress: {\n        ...currentProgress,\n        postprocess: _classPrivateFieldLooseBase(this, _postProcessors)[_postProcessors].size > 0 ? {\n          mode: 'indeterminate'\n        } : null,\n        uploadComplete: true,\n        percentage: 100,\n        bytesUploaded: currentProgress.bytesTotal\n      },\n      response: uploadResp,\n      uploadURL: uploadResp.uploadURL,\n      isPaused: false\n    }); // Remote providers sometimes don't tell us the file size,\n    // but we can know how many bytes we uploaded once the upload is complete.\n\n    if (file.size == null) {\n      this.setFileState(file.id, {\n        size: uploadResp.bytesUploaded || currentProgress.bytesTotal\n      });\n    }\n    this.calculateTotalProgress();\n  });\n  this.on('preprocess-progress', (file, progress) => {\n    if (file == null || !this.getFile(file.id)) {\n      this.log(`Not setting progress for a file that has been removed: ${file == null ? void 0 : file.id}`);\n      return;\n    }\n    this.setFileState(file.id, {\n      progress: {\n        ...this.getFile(file.id).progress,\n        preprocess: progress\n      }\n    });\n  });\n  this.on('preprocess-complete', file => {\n    if (file == null || !this.getFile(file.id)) {\n      this.log(`Not setting progress for a file that has been removed: ${file == null ? void 0 : file.id}`);\n      return;\n    }\n    const files = {\n      ...this.getState().files\n    };\n    files[file.id] = {\n      ...files[file.id],\n      progress: {\n        ...files[file.id].progress\n      }\n    };\n    delete files[file.id].progress.preprocess;\n    this.setState({\n      files\n    });\n  });\n  this.on('postprocess-progress', (file, progress) => {\n    if (file == null || !this.getFile(file.id)) {\n      this.log(`Not setting progress for a file that has been removed: ${file == null ? void 0 : file.id}`);\n      return;\n    }\n    this.setFileState(file.id, {\n      progress: {\n        ...this.getState().files[file.id].progress,\n        postprocess: progress\n      }\n    });\n  });\n  this.on('postprocess-complete', file => {\n    if (file == null || !this.getFile(file.id)) {\n      this.log(`Not setting progress for a file that has been removed: ${file == null ? void 0 : file.id}`);\n      return;\n    }\n    const files = {\n      ...this.getState().files\n    };\n    files[file.id] = {\n      ...files[file.id],\n      progress: {\n        ...files[file.id].progress\n      }\n    };\n    delete files[file.id].progress.postprocess;\n    this.setState({\n      files\n    });\n  });\n  this.on('restored', () => {\n    // Files may have changed--ensure progress is still accurate.\n    this.calculateTotalProgress();\n  });\n  this.on('dashboard:file-edit-complete', file => {\n    if (file) {\n      _classPrivateFieldLooseBase(this, _checkRequiredMetaFieldsOnFile)[_checkRequiredMetaFieldsOnFile](file);\n    }\n  }); // show informer if offline\n\n  if (typeof window !== 'undefined' && window.addEventListener) {\n    window.addEventListener('online', _classPrivateFieldLooseBase(this, _updateOnlineStatus)[_updateOnlineStatus]);\n    window.addEventListener('offline', _classPrivateFieldLooseBase(this, _updateOnlineStatus)[_updateOnlineStatus]);\n    setTimeout(_classPrivateFieldLooseBase(this, _updateOnlineStatus)[_updateOnlineStatus], 3000);\n  }\n}\nfunction _createUpload2(fileIDs, opts) {\n  if (opts === void 0) {\n    opts = {};\n  }\n\n  // uppy.retryAll sets this to true — when retrying we want to ignore `allowNewUpload: false`\n  const {\n    forceAllowNewUpload = false\n  } = opts;\n  const {\n    allowNewUpload,\n    currentUploads\n  } = this.getState();\n  if (!allowNewUpload && !forceAllowNewUpload) {\n    throw new Error('Cannot create a new upload: already uploading.');\n  }\n  const uploadID = nanoid();\n  this.emit('upload', {\n    id: uploadID,\n    fileIDs\n  });\n  this.setState({\n    allowNewUpload: this.opts.allowMultipleUploadBatches !== false && this.opts.allowMultipleUploads !== false,\n    currentUploads: {\n      ...currentUploads,\n      [uploadID]: {\n        fileIDs,\n        step: 0,\n        result: {}\n      }\n    }\n  });\n  return uploadID;\n}\nfunction _getUpload2(uploadID) {\n  const {\n    currentUploads\n  } = this.getState();\n  return currentUploads[uploadID];\n}\nfunction _removeUpload2(uploadID) {\n  const currentUploads = {\n    ...this.getState().currentUploads\n  };\n  delete currentUploads[uploadID];\n  this.setState({\n    currentUploads\n  });\n}\nasync function _runUpload2(uploadID) {\n  let {\n    currentUploads\n  } = this.getState();\n  let currentUpload = currentUploads[uploadID];\n  const restoreStep = currentUpload.step || 0;\n  const steps = [..._classPrivateFieldLooseBase(this, _preProcessors)[_preProcessors], ..._classPrivateFieldLooseBase(this, _uploaders)[_uploaders], ..._classPrivateFieldLooseBase(this, _postProcessors)[_postProcessors]];\n  try {\n    for (let step = restoreStep; step < steps.length; step++) {\n      if (!currentUpload) {\n        break;\n      }\n      const fn = steps[step];\n      const updatedUpload = {\n        ...currentUpload,\n        step\n      };\n      this.setState({\n        currentUploads: {\n          ...currentUploads,\n          [uploadID]: updatedUpload\n        }\n      }); // TODO give this the `updatedUpload` object as its only parameter maybe?\n      // Otherwise when more metadata may be added to the upload this would keep getting more parameters\n\n      await fn(updatedUpload.fileIDs, uploadID); // Update currentUpload value in case it was modified asynchronously.\n\n      currentUploads = this.getState().currentUploads;\n      currentUpload = currentUploads[uploadID];\n    }\n  } catch (err) {\n    _classPrivateFieldLooseBase(this, _removeUpload)[_removeUpload](uploadID);\n    throw err;\n  } // Set result data.\n\n  if (currentUpload) {\n    // Mark postprocessing step as complete if necessary; this addresses a case where we might get\n    // stuck in the postprocessing UI while the upload is fully complete.\n    // If the postprocessing steps do not do any work, they may not emit postprocessing events at\n    // all, and never mark the postprocessing as complete. This is fine on its own but we\n    // introduced code in the @uppy/core upload-success handler to prepare postprocessing progress\n    // state if any postprocessors are registered. That is to avoid a \"flash of completed state\"\n    // before the postprocessing plugins can emit events.\n    //\n    // So, just in case an upload with postprocessing plugins *has* completed *without* emitting\n    // postprocessing completion, we do it instead.\n    currentUpload.fileIDs.forEach(fileID => {\n      const file = this.getFile(fileID);\n      if (file && file.progress.postprocess) {\n        this.emit('postprocess-complete', file);\n      }\n    });\n    const files = currentUpload.fileIDs.map(fileID => this.getFile(fileID));\n    const successful = files.filter(file => !file.error);\n    const failed = files.filter(file => file.error);\n    await this.addResultData(uploadID, {\n      successful,\n      failed,\n      uploadID\n    }); // Update currentUpload value in case it was modified asynchronously.\n\n    currentUploads = this.getState().currentUploads;\n    currentUpload = currentUploads[uploadID];\n  } // Emit completion events.\n  // This is in a separate function so that the `currentUploads` variable\n  // always refers to the latest state. In the handler right above it refers\n  // to an outdated object without the `.result` property.\n\n  let result;\n  if (currentUpload) {\n    result = currentUpload.result;\n    this.emit('complete', result);\n    _classPrivateFieldLooseBase(this, _removeUpload)[_removeUpload](uploadID);\n  }\n  if (result == null) {\n    this.log(`Not setting result for an upload that has been removed: ${uploadID}`);\n  }\n  return result;\n}\nUppy.VERSION = packageJson.version;\nexport default Uppy;","map":{"version":3,"names":["_Symbol$for","_Symbol$for2","_classPrivateFieldLooseBase","receiver","privateKey","Object","prototype","hasOwnProperty","call","TypeError","id","_classPrivateFieldLooseKey","name","Translator","ee","nanoid","throttle","DefaultStore","getFileType","getFileNameAndExtension","generateFileID","supportsUploadProgress","getFileName","justErrorsLogger","debugLogger","Restricter","defaultOptions","defaultRestrictionOptions","RestrictionError","packageJson","locale","_plugins","_restricter","_storeUnsubscribe","_emitter","_preProcessors","_uploaders","_postProcessors","_informAndEmit","_checkRequiredMetaFieldsOnFile","_checkRequiredMetaFields","_assertNewUploadAllowed","_checkAndCreateFileStateObject","_startIfAutoProceed","_addListeners","_updateOnlineStatus","_createUpload","_getUpload","_removeUpload","_runUpload","Symbol","for","Uppy","constructor","_opts","defineProperty","value","_runUpload2","_removeUpload2","_getUpload2","_createUpload2","_addListeners2","_startIfAutoProceed2","_checkAndCreateFileStateObject2","_assertNewUploadAllowed2","_checkRequiredMetaFields2","_checkRequiredMetaFieldsOnFile2","_informAndEmit2","writable","create","Set","updateOnlineStatus","bind","defaultLocale","autoProceed","allowMultipleUploadBatches","debug","restrictions","meta","onBeforeFileAdded","currentFile","onBeforeUpload","files","store","logger","infoTimeout","opts","log","VERSION","i18nInit","calculateProgress","leading","trailing","setState","plugins","currentUploads","allowNewUpload","capabilities","uploadProgress","individualCancellation","resumableUploads","totalProgress","info","recoveredState","i18n","subscribe","prevState","nextState","patch","emit","updateAll","window","event","_len","arguments","length","args","Array","_key","on","callback","once","off","state","iteratePlugins","plugin","update","getState","setFileState","fileID","Error","translator","translate","i18nArray","translateArray","setOptions","newOpts","setMeta","resetProgress","defaultProgress","percentage","bytesUploaded","uploadComplete","uploadStarted","updatedFiles","keys","forEach","updatedFile","progress","addPreProcessor","fn","add","removePreProcessor","delete","addPostProcessor","removePostProcessor","addUploader","removeUploader","data","updatedMeta","setFileMeta","newMeta","getFile","getFiles","values","getObjectOfFilesPerState","filesObject","error","inProgressFiles","filter","_ref","newFiles","file","startedFiles","preprocess","postprocess","uploadStartedFiles","pausedFiles","isPaused","completeFiles","erroredFiles","inProgressNotPausedFiles","processingFiles","isUploadStarted","isAllComplete","isAllErrored","isAllPaused","isUploadInProgress","isSomeGhost","some","isGhost","validateRestrictions","validate","err","checkIfFileAlreadyExists","addFile","newFile","type","addFiles","fileDescriptors","errors","i","push","isRestriction","message","subError","smart_count","details","AggregateError","removeFiles","fileIDs","reason","updatedUploads","removedFiles","fileIsNotRemoved","uploadFileID","undefined","uploadID","newFileIDs","stateUpdate","calculateTotalProgress","removedFileIDs","join","removeFile","pauseResume","wasPaused","pauseAll","inProgressUpdatedFiles","resumeAll","retryAll","filesToRetry","Promise","resolve","successful","failed","forceAllowNewUpload","cancelAll","_temp","retryUpload","logout","provider","canHavePercentage","Number","isFinite","bytesTotal","Math","round","inProgress","sizedFiles","unsizedFiles","progressMax","currentProgress","reduce","acc","totalSize","averageSize","uploadedSize","online","navigator","onLine","wasOffline","getID","use","Plugin","msg","pluginId","existsPluginAlready","getPlugin","install","foundPlugin","find","method","flat","removePlugin","instance","uninstall","list","index","findIndex","item","splice","updatedState","close","_temp2","removeEventListener","hideInfo","slice","duration","isComplexMessage","setTimeout","warn","restore","reject","addResultData","currentUpload","result","upload","_classPrivateFieldLoo","uploader","onBeforeUploadResult","then","validateMinNumberOfFiles","catch","currentlyUploadingFiles","flatMap","curr","waitingFileIDs","indexOf","trim","missingFields","getMissingRequiredMetaFields","missingRequiredMetaFields","success","fileDescriptor","File","size","fileType","fileName","fileExtension","extension","isRemote","Boolean","source","remote","preview","onBeforeFileAddedResult","filesArray","map","scheduledAutoProceed","stack","errorHandler","response","errorMsg","newError","Date","now","uploadResp","mode","uploadURL","addEventListener","allowMultipleUploads","step","restoreStep","steps","updatedUpload","version"],"sources":["/lab/node_modules/@uppy/core/lib/Uppy.js"],"sourcesContent":["let _Symbol$for, _Symbol$for2;\n\nfunction _classPrivateFieldLooseBase(receiver, privateKey) { if (!Object.prototype.hasOwnProperty.call(receiver, privateKey)) { throw new TypeError(\"attempted to use private field on non-instance\"); } return receiver; }\n\nvar id = 0;\n\nfunction _classPrivateFieldLooseKey(name) { return \"__private_\" + id++ + \"_\" + name; }\n\n/* eslint-disable max-classes-per-file */\n\n/* global AggregateError */\nimport Translator from '@uppy/utils/lib/Translator';\nimport ee from 'namespace-emitter';\nimport { nanoid } from 'nanoid/non-secure';\nimport throttle from 'lodash.throttle';\nimport DefaultStore from '@uppy/store-default';\nimport getFileType from '@uppy/utils/lib/getFileType';\nimport getFileNameAndExtension from '@uppy/utils/lib/getFileNameAndExtension';\nimport generateFileID from '@uppy/utils/lib/generateFileID';\nimport supportsUploadProgress from './supportsUploadProgress.js';\nimport getFileName from './getFileName.js';\nimport { justErrorsLogger, debugLogger } from './loggers.js';\nimport { Restricter, defaultOptions as defaultRestrictionOptions, RestrictionError } from './Restricter.js';\nconst packageJson = {\n  \"version\": \"3.0.4\"\n};\nimport locale from './locale.js';\n/**\n * Uppy Core module.\n * Manages plugins, state updates, acts as an event bus,\n * adds/removes files and metadata.\n */\n\nvar _plugins = /*#__PURE__*/_classPrivateFieldLooseKey(\"plugins\");\n\nvar _restricter = /*#__PURE__*/_classPrivateFieldLooseKey(\"restricter\");\n\nvar _storeUnsubscribe = /*#__PURE__*/_classPrivateFieldLooseKey(\"storeUnsubscribe\");\n\nvar _emitter = /*#__PURE__*/_classPrivateFieldLooseKey(\"emitter\");\n\nvar _preProcessors = /*#__PURE__*/_classPrivateFieldLooseKey(\"preProcessors\");\n\nvar _uploaders = /*#__PURE__*/_classPrivateFieldLooseKey(\"uploaders\");\n\nvar _postProcessors = /*#__PURE__*/_classPrivateFieldLooseKey(\"postProcessors\");\n\nvar _informAndEmit = /*#__PURE__*/_classPrivateFieldLooseKey(\"informAndEmit\");\n\nvar _checkRequiredMetaFieldsOnFile = /*#__PURE__*/_classPrivateFieldLooseKey(\"checkRequiredMetaFieldsOnFile\");\n\nvar _checkRequiredMetaFields = /*#__PURE__*/_classPrivateFieldLooseKey(\"checkRequiredMetaFields\");\n\nvar _assertNewUploadAllowed = /*#__PURE__*/_classPrivateFieldLooseKey(\"assertNewUploadAllowed\");\n\nvar _checkAndCreateFileStateObject = /*#__PURE__*/_classPrivateFieldLooseKey(\"checkAndCreateFileStateObject\");\n\nvar _startIfAutoProceed = /*#__PURE__*/_classPrivateFieldLooseKey(\"startIfAutoProceed\");\n\nvar _addListeners = /*#__PURE__*/_classPrivateFieldLooseKey(\"addListeners\");\n\nvar _updateOnlineStatus = /*#__PURE__*/_classPrivateFieldLooseKey(\"updateOnlineStatus\");\n\nvar _createUpload = /*#__PURE__*/_classPrivateFieldLooseKey(\"createUpload\");\n\nvar _getUpload = /*#__PURE__*/_classPrivateFieldLooseKey(\"getUpload\");\n\nvar _removeUpload = /*#__PURE__*/_classPrivateFieldLooseKey(\"removeUpload\");\n\nvar _runUpload = /*#__PURE__*/_classPrivateFieldLooseKey(\"runUpload\");\n\n_Symbol$for = Symbol.for('uppy test: getPlugins');\n_Symbol$for2 = Symbol.for('uppy test: createUpload');\n\nclass Uppy {\n  /** @type {Record<string, BasePlugin[]>} */\n\n  /**\n   * Instantiate Uppy\n   *\n   * @param {object} opts — Uppy options\n   */\n  constructor(_opts) {\n    Object.defineProperty(this, _runUpload, {\n      value: _runUpload2\n    });\n    Object.defineProperty(this, _removeUpload, {\n      value: _removeUpload2\n    });\n    Object.defineProperty(this, _getUpload, {\n      value: _getUpload2\n    });\n    Object.defineProperty(this, _createUpload, {\n      value: _createUpload2\n    });\n    Object.defineProperty(this, _addListeners, {\n      value: _addListeners2\n    });\n    Object.defineProperty(this, _startIfAutoProceed, {\n      value: _startIfAutoProceed2\n    });\n    Object.defineProperty(this, _checkAndCreateFileStateObject, {\n      value: _checkAndCreateFileStateObject2\n    });\n    Object.defineProperty(this, _assertNewUploadAllowed, {\n      value: _assertNewUploadAllowed2\n    });\n    Object.defineProperty(this, _checkRequiredMetaFields, {\n      value: _checkRequiredMetaFields2\n    });\n    Object.defineProperty(this, _checkRequiredMetaFieldsOnFile, {\n      value: _checkRequiredMetaFieldsOnFile2\n    });\n    Object.defineProperty(this, _informAndEmit, {\n      value: _informAndEmit2\n    });\n    Object.defineProperty(this, _plugins, {\n      writable: true,\n      value: Object.create(null)\n    });\n    Object.defineProperty(this, _restricter, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _storeUnsubscribe, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _emitter, {\n      writable: true,\n      value: ee()\n    });\n    Object.defineProperty(this, _preProcessors, {\n      writable: true,\n      value: new Set()\n    });\n    Object.defineProperty(this, _uploaders, {\n      writable: true,\n      value: new Set()\n    });\n    Object.defineProperty(this, _postProcessors, {\n      writable: true,\n      value: new Set()\n    });\n    Object.defineProperty(this, _updateOnlineStatus, {\n      writable: true,\n      value: this.updateOnlineStatus.bind(this)\n    });\n    this.defaultLocale = locale;\n    const defaultOptions = {\n      id: 'uppy',\n      autoProceed: false,\n      allowMultipleUploadBatches: true,\n      debug: false,\n      restrictions: defaultRestrictionOptions,\n      meta: {},\n      onBeforeFileAdded: currentFile => currentFile,\n      onBeforeUpload: files => files,\n      store: new DefaultStore(),\n      logger: justErrorsLogger,\n      infoTimeout: 5000\n    }; // Merge default options with the ones set by user,\n    // making sure to merge restrictions too\n\n    this.opts = { ...defaultOptions,\n      ..._opts,\n      restrictions: { ...defaultOptions.restrictions,\n        ...(_opts && _opts.restrictions)\n      }\n    }; // Support debug: true for backwards-compatability, unless logger is set in opts\n    // opts instead of this.opts to avoid comparing objects — we set logger: justErrorsLogger in defaultOptions\n\n    if (_opts && _opts.logger && _opts.debug) {\n      this.log('You are using a custom `logger`, but also set `debug: true`, which uses built-in logger to output logs to console. Ignoring `debug: true` and using your custom `logger`.', 'warning');\n    } else if (_opts && _opts.debug) {\n      this.opts.logger = debugLogger;\n    }\n\n    this.log(`Using Core v${this.constructor.VERSION}`);\n    this.i18nInit(); // ___Why throttle at 500ms?\n    //    - We must throttle at >250ms for superfocus in Dashboard to work well\n    //    (because animation takes 0.25s, and we want to wait for all animations to be over before refocusing).\n    //    [Practical Check]: if thottle is at 100ms, then if you are uploading a file,\n    //    and click 'ADD MORE FILES', - focus won't activate in Firefox.\n    //    - We must throttle at around >500ms to avoid performance lags.\n    //    [Practical Check] Firefox, try to upload a big file for a prolonged period of time. Laptop will start to heat up.\n\n    this.calculateProgress = throttle(this.calculateProgress.bind(this), 500, {\n      leading: true,\n      trailing: true\n    });\n    this.store = this.opts.store;\n    this.setState({\n      plugins: {},\n      files: {},\n      currentUploads: {},\n      allowNewUpload: true,\n      capabilities: {\n        uploadProgress: supportsUploadProgress(),\n        individualCancellation: true,\n        resumableUploads: false\n      },\n      totalProgress: 0,\n      meta: { ...this.opts.meta\n      },\n      info: [],\n      recoveredState: null\n    });\n    _classPrivateFieldLooseBase(this, _restricter)[_restricter] = new Restricter(() => this.opts, this.i18n);\n    _classPrivateFieldLooseBase(this, _storeUnsubscribe)[_storeUnsubscribe] = this.store.subscribe((prevState, nextState, patch) => {\n      this.emit('state-update', prevState, nextState, patch);\n      this.updateAll(nextState);\n    }); // Exposing uppy object on window for debugging and testing\n\n    if (this.opts.debug && typeof window !== 'undefined') {\n      window[this.opts.id] = this;\n    }\n\n    _classPrivateFieldLooseBase(this, _addListeners)[_addListeners]();\n  }\n\n  emit(event) {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    _classPrivateFieldLooseBase(this, _emitter)[_emitter].emit(event, ...args);\n  }\n\n  on(event, callback) {\n    _classPrivateFieldLooseBase(this, _emitter)[_emitter].on(event, callback);\n\n    return this;\n  }\n\n  once(event, callback) {\n    _classPrivateFieldLooseBase(this, _emitter)[_emitter].once(event, callback);\n\n    return this;\n  }\n\n  off(event, callback) {\n    _classPrivateFieldLooseBase(this, _emitter)[_emitter].off(event, callback);\n\n    return this;\n  }\n  /**\n   * Iterate on all plugins and run `update` on them.\n   * Called each time state changes.\n   *\n   */\n\n\n  updateAll(state) {\n    this.iteratePlugins(plugin => {\n      plugin.update(state);\n    });\n  }\n  /**\n   * Updates state with a patch\n   *\n   * @param {object} patch {foo: 'bar'}\n   */\n\n\n  setState(patch) {\n    this.store.setState(patch);\n  }\n  /**\n   * Returns current state.\n   *\n   * @returns {object}\n   */\n\n\n  getState() {\n    return this.store.getState();\n  }\n  /**\n   * Shorthand to set state for a specific file.\n   */\n\n\n  setFileState(fileID, state) {\n    if (!this.getState().files[fileID]) {\n      throw new Error(`Can’t set state for ${fileID} (the file could have been removed)`);\n    }\n\n    this.setState({\n      files: { ...this.getState().files,\n        [fileID]: { ...this.getState().files[fileID],\n          ...state\n        }\n      }\n    });\n  }\n\n  i18nInit() {\n    const translator = new Translator([this.defaultLocale, this.opts.locale]);\n    this.i18n = translator.translate.bind(translator);\n    this.i18nArray = translator.translateArray.bind(translator);\n    this.locale = translator.locale;\n  }\n\n  setOptions(newOpts) {\n    this.opts = { ...this.opts,\n      ...newOpts,\n      restrictions: { ...this.opts.restrictions,\n        ...(newOpts && newOpts.restrictions)\n      }\n    };\n\n    if (newOpts.meta) {\n      this.setMeta(newOpts.meta);\n    }\n\n    this.i18nInit();\n\n    if (newOpts.locale) {\n      this.iteratePlugins(plugin => {\n        plugin.setOptions();\n      });\n    } // Note: this is not the preact `setState`, it's an internal function that has the same name.\n\n\n    this.setState(); // so that UI re-renders with new options\n  }\n\n  resetProgress() {\n    const defaultProgress = {\n      percentage: 0,\n      bytesUploaded: 0,\n      uploadComplete: false,\n      uploadStarted: null\n    };\n    const files = { ...this.getState().files\n    };\n    const updatedFiles = {};\n    Object.keys(files).forEach(fileID => {\n      const updatedFile = { ...files[fileID]\n      };\n      updatedFile.progress = { ...updatedFile.progress,\n        ...defaultProgress\n      };\n      updatedFiles[fileID] = updatedFile;\n    });\n    this.setState({\n      files: updatedFiles,\n      totalProgress: 0\n    });\n    this.emit('reset-progress');\n  }\n\n  addPreProcessor(fn) {\n    _classPrivateFieldLooseBase(this, _preProcessors)[_preProcessors].add(fn);\n  }\n\n  removePreProcessor(fn) {\n    return _classPrivateFieldLooseBase(this, _preProcessors)[_preProcessors].delete(fn);\n  }\n\n  addPostProcessor(fn) {\n    _classPrivateFieldLooseBase(this, _postProcessors)[_postProcessors].add(fn);\n  }\n\n  removePostProcessor(fn) {\n    return _classPrivateFieldLooseBase(this, _postProcessors)[_postProcessors].delete(fn);\n  }\n\n  addUploader(fn) {\n    _classPrivateFieldLooseBase(this, _uploaders)[_uploaders].add(fn);\n  }\n\n  removeUploader(fn) {\n    return _classPrivateFieldLooseBase(this, _uploaders)[_uploaders].delete(fn);\n  }\n\n  setMeta(data) {\n    const updatedMeta = { ...this.getState().meta,\n      ...data\n    };\n    const updatedFiles = { ...this.getState().files\n    };\n    Object.keys(updatedFiles).forEach(fileID => {\n      updatedFiles[fileID] = { ...updatedFiles[fileID],\n        meta: { ...updatedFiles[fileID].meta,\n          ...data\n        }\n      };\n    });\n    this.log('Adding metadata:');\n    this.log(data);\n    this.setState({\n      meta: updatedMeta,\n      files: updatedFiles\n    });\n  }\n\n  setFileMeta(fileID, data) {\n    const updatedFiles = { ...this.getState().files\n    };\n\n    if (!updatedFiles[fileID]) {\n      this.log('Was trying to set metadata for a file that has been removed: ', fileID);\n      return;\n    }\n\n    const newMeta = { ...updatedFiles[fileID].meta,\n      ...data\n    };\n    updatedFiles[fileID] = { ...updatedFiles[fileID],\n      meta: newMeta\n    };\n    this.setState({\n      files: updatedFiles\n    });\n  }\n  /**\n   * Get a file object.\n   *\n   * @param {string} fileID The ID of the file object to return.\n   */\n\n\n  getFile(fileID) {\n    return this.getState().files[fileID];\n  }\n  /**\n   * Get all files in an array.\n   */\n\n\n  getFiles() {\n    const {\n      files\n    } = this.getState();\n    return Object.values(files);\n  }\n\n  getObjectOfFilesPerState() {\n    const {\n      files: filesObject,\n      totalProgress,\n      error\n    } = this.getState();\n    const files = Object.values(filesObject);\n    const inProgressFiles = files.filter(_ref => {\n      let {\n        progress\n      } = _ref;\n      return !progress.uploadComplete && progress.uploadStarted;\n    });\n    const newFiles = files.filter(file => !file.progress.uploadStarted);\n    const startedFiles = files.filter(file => file.progress.uploadStarted || file.progress.preprocess || file.progress.postprocess);\n    const uploadStartedFiles = files.filter(file => file.progress.uploadStarted);\n    const pausedFiles = files.filter(file => file.isPaused);\n    const completeFiles = files.filter(file => file.progress.uploadComplete);\n    const erroredFiles = files.filter(file => file.error);\n    const inProgressNotPausedFiles = inProgressFiles.filter(file => !file.isPaused);\n    const processingFiles = files.filter(file => file.progress.preprocess || file.progress.postprocess);\n    return {\n      newFiles,\n      startedFiles,\n      uploadStartedFiles,\n      pausedFiles,\n      completeFiles,\n      erroredFiles,\n      inProgressFiles,\n      inProgressNotPausedFiles,\n      processingFiles,\n      isUploadStarted: uploadStartedFiles.length > 0,\n      isAllComplete: totalProgress === 100 && completeFiles.length === files.length && processingFiles.length === 0,\n      isAllErrored: !!error && erroredFiles.length === files.length,\n      isAllPaused: inProgressFiles.length !== 0 && pausedFiles.length === inProgressFiles.length,\n      isUploadInProgress: inProgressFiles.length > 0,\n      isSomeGhost: files.some(file => file.isGhost)\n    };\n  }\n  /*\n  * @constructs\n  * @param { Error } error\n  * @param { undefined } file\n  */\n\n  /*\n  * @constructs\n  * @param { RestrictionError } error\n  * @param { UppyFile | undefined } file\n  */\n\n\n  validateRestrictions(file, files) {\n    if (files === void 0) {\n      files = this.getFiles();\n    }\n\n    try {\n      _classPrivateFieldLooseBase(this, _restricter)[_restricter].validate(file, files);\n    } catch (err) {\n      return err;\n    }\n\n    return null;\n  }\n\n  checkIfFileAlreadyExists(fileID) {\n    const {\n      files\n    } = this.getState();\n\n    if (files[fileID] && !files[fileID].isGhost) {\n      return true;\n    }\n\n    return false;\n  }\n  /**\n   * Create a file state object based on user-provided `addFile()` options.\n   *\n   * Note this is extremely side-effectful and should only be done when a file state object\n   * will be added to state immediately afterward!\n   *\n   * The `files` value is passed in because it may be updated by the caller without updating the store.\n   */\n\n\n  /**\n   * Add a new file to `state.files`. This will run `onBeforeFileAdded`,\n   * try to guess file type in a clever way, check file against restrictions,\n   * and start an upload if `autoProceed === true`.\n   *\n   * @param {object} file object to add\n   * @returns {string} id for the added file\n   */\n  addFile(file) {\n    _classPrivateFieldLooseBase(this, _assertNewUploadAllowed)[_assertNewUploadAllowed](file);\n\n    const {\n      files\n    } = this.getState();\n\n    let newFile = _classPrivateFieldLooseBase(this, _checkAndCreateFileStateObject)[_checkAndCreateFileStateObject](files, file); // Users are asked to re-select recovered files without data,\n    // and to keep the progress, meta and everthing else, we only replace said data\n\n\n    if (files[newFile.id] && files[newFile.id].isGhost) {\n      newFile = { ...files[newFile.id],\n        data: file.data,\n        isGhost: false\n      };\n      this.log(`Replaced the blob in the restored ghost file: ${newFile.name}, ${newFile.id}`);\n    }\n\n    this.setState({\n      files: { ...files,\n        [newFile.id]: newFile\n      }\n    });\n    this.emit('file-added', newFile);\n    this.emit('files-added', [newFile]);\n    this.log(`Added file: ${newFile.name}, ${newFile.id}, mime type: ${newFile.type}`);\n\n    _classPrivateFieldLooseBase(this, _startIfAutoProceed)[_startIfAutoProceed]();\n\n    return newFile.id;\n  }\n  /**\n   * Add multiple files to `state.files`. See the `addFile()` documentation.\n   *\n   * If an error occurs while adding a file, it is logged and the user is notified.\n   * This is good for UI plugins, but not for programmatic use.\n   * Programmatic users should usually still use `addFile()` on individual files.\n   */\n\n\n  addFiles(fileDescriptors) {\n    _classPrivateFieldLooseBase(this, _assertNewUploadAllowed)[_assertNewUploadAllowed](); // create a copy of the files object only once\n\n\n    const files = { ...this.getState().files\n    };\n    const newFiles = [];\n    const errors = [];\n\n    for (let i = 0; i < fileDescriptors.length; i++) {\n      try {\n        let newFile = _classPrivateFieldLooseBase(this, _checkAndCreateFileStateObject)[_checkAndCreateFileStateObject](files, fileDescriptors[i]); // Users are asked to re-select recovered files without data,\n        // and to keep the progress, meta and everthing else, we only replace said data\n\n\n        if (files[newFile.id] && files[newFile.id].isGhost) {\n          newFile = { ...files[newFile.id],\n            data: fileDescriptors[i].data,\n            isGhost: false\n          };\n          this.log(`Replaced blob in a ghost file: ${newFile.name}, ${newFile.id}`);\n        }\n\n        files[newFile.id] = newFile;\n        newFiles.push(newFile);\n      } catch (err) {\n        if (!err.isRestriction) {\n          errors.push(err);\n        }\n      }\n    }\n\n    this.setState({\n      files\n    });\n    newFiles.forEach(newFile => {\n      this.emit('file-added', newFile);\n    });\n    this.emit('files-added', newFiles);\n\n    if (newFiles.length > 5) {\n      this.log(`Added batch of ${newFiles.length} files`);\n    } else {\n      Object.keys(newFiles).forEach(fileID => {\n        this.log(`Added file: ${newFiles[fileID].name}\\n id: ${newFiles[fileID].id}\\n type: ${newFiles[fileID].type}`);\n      });\n    }\n\n    if (newFiles.length > 0) {\n      _classPrivateFieldLooseBase(this, _startIfAutoProceed)[_startIfAutoProceed]();\n    }\n\n    if (errors.length > 0) {\n      let message = 'Multiple errors occurred while adding files:\\n';\n      errors.forEach(subError => {\n        message += `\\n * ${subError.message}`;\n      });\n      this.info({\n        message: this.i18n('addBulkFilesFailed', {\n          smart_count: errors.length\n        }),\n        details: message\n      }, 'error', this.opts.infoTimeout);\n\n      if (typeof AggregateError === 'function') {\n        throw new AggregateError(errors, message);\n      } else {\n        const err = new Error(message);\n        err.errors = errors;\n        throw err;\n      }\n    }\n  }\n\n  removeFiles(fileIDs, reason) {\n    const {\n      files,\n      currentUploads\n    } = this.getState();\n    const updatedFiles = { ...files\n    };\n    const updatedUploads = { ...currentUploads\n    };\n    const removedFiles = Object.create(null);\n    fileIDs.forEach(fileID => {\n      if (files[fileID]) {\n        removedFiles[fileID] = files[fileID];\n        delete updatedFiles[fileID];\n      }\n    }); // Remove files from the `fileIDs` list in each upload.\n\n    function fileIsNotRemoved(uploadFileID) {\n      return removedFiles[uploadFileID] === undefined;\n    }\n\n    Object.keys(updatedUploads).forEach(uploadID => {\n      const newFileIDs = currentUploads[uploadID].fileIDs.filter(fileIsNotRemoved); // Remove the upload if no files are associated with it anymore.\n\n      if (newFileIDs.length === 0) {\n        delete updatedUploads[uploadID];\n        return;\n      }\n\n      const {\n        capabilities\n      } = this.getState();\n\n      if (newFileIDs.length !== currentUploads[uploadID].fileIDs.length && !capabilities.individualCancellation) {\n        throw new Error('individualCancellation is disabled');\n      }\n\n      updatedUploads[uploadID] = { ...currentUploads[uploadID],\n        fileIDs: newFileIDs\n      };\n    });\n    const stateUpdate = {\n      currentUploads: updatedUploads,\n      files: updatedFiles\n    }; // If all files were removed - allow new uploads,\n    // and clear recoveredState\n\n    if (Object.keys(updatedFiles).length === 0) {\n      stateUpdate.allowNewUpload = true;\n      stateUpdate.error = null;\n      stateUpdate.recoveredState = null;\n    }\n\n    this.setState(stateUpdate);\n    this.calculateTotalProgress();\n    const removedFileIDs = Object.keys(removedFiles);\n    removedFileIDs.forEach(fileID => {\n      this.emit('file-removed', removedFiles[fileID], reason);\n    });\n\n    if (removedFileIDs.length > 5) {\n      this.log(`Removed ${removedFileIDs.length} files`);\n    } else {\n      this.log(`Removed files: ${removedFileIDs.join(', ')}`);\n    }\n  }\n\n  removeFile(fileID, reason) {\n    if (reason === void 0) {\n      reason = null;\n    }\n\n    this.removeFiles([fileID], reason);\n  }\n\n  pauseResume(fileID) {\n    if (!this.getState().capabilities.resumableUploads || this.getFile(fileID).uploadComplete) {\n      return undefined;\n    }\n\n    const wasPaused = this.getFile(fileID).isPaused || false;\n    const isPaused = !wasPaused;\n    this.setFileState(fileID, {\n      isPaused\n    });\n    this.emit('upload-pause', fileID, isPaused);\n    return isPaused;\n  }\n\n  pauseAll() {\n    const updatedFiles = { ...this.getState().files\n    };\n    const inProgressUpdatedFiles = Object.keys(updatedFiles).filter(file => {\n      return !updatedFiles[file].progress.uploadComplete && updatedFiles[file].progress.uploadStarted;\n    });\n    inProgressUpdatedFiles.forEach(file => {\n      const updatedFile = { ...updatedFiles[file],\n        isPaused: true\n      };\n      updatedFiles[file] = updatedFile;\n    });\n    this.setState({\n      files: updatedFiles\n    });\n    this.emit('pause-all');\n  }\n\n  resumeAll() {\n    const updatedFiles = { ...this.getState().files\n    };\n    const inProgressUpdatedFiles = Object.keys(updatedFiles).filter(file => {\n      return !updatedFiles[file].progress.uploadComplete && updatedFiles[file].progress.uploadStarted;\n    });\n    inProgressUpdatedFiles.forEach(file => {\n      const updatedFile = { ...updatedFiles[file],\n        isPaused: false,\n        error: null\n      };\n      updatedFiles[file] = updatedFile;\n    });\n    this.setState({\n      files: updatedFiles\n    });\n    this.emit('resume-all');\n  }\n\n  retryAll() {\n    const updatedFiles = { ...this.getState().files\n    };\n    const filesToRetry = Object.keys(updatedFiles).filter(file => {\n      return updatedFiles[file].error;\n    });\n    filesToRetry.forEach(file => {\n      const updatedFile = { ...updatedFiles[file],\n        isPaused: false,\n        error: null\n      };\n      updatedFiles[file] = updatedFile;\n    });\n    this.setState({\n      files: updatedFiles,\n      error: null\n    });\n    this.emit('retry-all', filesToRetry);\n\n    if (filesToRetry.length === 0) {\n      return Promise.resolve({\n        successful: [],\n        failed: []\n      });\n    }\n\n    const uploadID = _classPrivateFieldLooseBase(this, _createUpload)[_createUpload](filesToRetry, {\n      forceAllowNewUpload: true // create new upload even if allowNewUpload: false\n\n    });\n\n    return _classPrivateFieldLooseBase(this, _runUpload)[_runUpload](uploadID);\n  }\n\n  cancelAll(_temp) {\n    let {\n      reason = 'user'\n    } = _temp === void 0 ? {} : _temp;\n    this.emit('cancel-all', {\n      reason\n    }); // Only remove existing uploads if user is canceling\n\n    if (reason === 'user') {\n      const {\n        files\n      } = this.getState();\n      const fileIDs = Object.keys(files);\n\n      if (fileIDs.length) {\n        this.removeFiles(fileIDs, 'cancel-all');\n      }\n\n      this.setState({\n        totalProgress: 0,\n        error: null,\n        recoveredState: null\n      });\n    }\n  }\n\n  retryUpload(fileID) {\n    this.setFileState(fileID, {\n      error: null,\n      isPaused: false\n    });\n    this.emit('upload-retry', fileID);\n\n    const uploadID = _classPrivateFieldLooseBase(this, _createUpload)[_createUpload]([fileID], {\n      forceAllowNewUpload: true // create new upload even if allowNewUpload: false\n\n    });\n\n    return _classPrivateFieldLooseBase(this, _runUpload)[_runUpload](uploadID);\n  }\n\n  logout() {\n    this.iteratePlugins(plugin => {\n      if (plugin.provider && plugin.provider.logout) {\n        plugin.provider.logout();\n      }\n    });\n  }\n\n  calculateProgress(file, data) {\n    if (file == null || !this.getFile(file.id)) {\n      this.log(`Not setting progress for a file that has been removed: ${file == null ? void 0 : file.id}`);\n      return;\n    } // bytesTotal may be null or zero; in that case we can't divide by it\n\n\n    const canHavePercentage = Number.isFinite(data.bytesTotal) && data.bytesTotal > 0;\n    this.setFileState(file.id, {\n      progress: { ...this.getFile(file.id).progress,\n        bytesUploaded: data.bytesUploaded,\n        bytesTotal: data.bytesTotal,\n        percentage: canHavePercentage ? Math.round(data.bytesUploaded / data.bytesTotal * 100) : 0\n      }\n    });\n    this.calculateTotalProgress();\n  }\n\n  calculateTotalProgress() {\n    // calculate total progress, using the number of files currently uploading,\n    // multiplied by 100 and the summ of individual progress of each file\n    const files = this.getFiles();\n    const inProgress = files.filter(file => {\n      return file.progress.uploadStarted || file.progress.preprocess || file.progress.postprocess;\n    });\n\n    if (inProgress.length === 0) {\n      this.emit('progress', 0);\n      this.setState({\n        totalProgress: 0\n      });\n      return;\n    }\n\n    const sizedFiles = inProgress.filter(file => file.progress.bytesTotal != null);\n    const unsizedFiles = inProgress.filter(file => file.progress.bytesTotal == null);\n\n    if (sizedFiles.length === 0) {\n      const progressMax = inProgress.length * 100;\n      const currentProgress = unsizedFiles.reduce((acc, file) => {\n        return acc + file.progress.percentage;\n      }, 0);\n      const totalProgress = Math.round(currentProgress / progressMax * 100);\n      this.setState({\n        totalProgress\n      });\n      return;\n    }\n\n    let totalSize = sizedFiles.reduce((acc, file) => {\n      return acc + file.progress.bytesTotal;\n    }, 0);\n    const averageSize = totalSize / sizedFiles.length;\n    totalSize += averageSize * unsizedFiles.length;\n    let uploadedSize = 0;\n    sizedFiles.forEach(file => {\n      uploadedSize += file.progress.bytesUploaded;\n    });\n    unsizedFiles.forEach(file => {\n      uploadedSize += averageSize * (file.progress.percentage || 0) / 100;\n    });\n    let totalProgress = totalSize === 0 ? 0 : Math.round(uploadedSize / totalSize * 100); // hot fix, because:\n    // uploadedSize ended up larger than totalSize, resulting in 1325% total\n\n    if (totalProgress > 100) {\n      totalProgress = 100;\n    }\n\n    this.setState({\n      totalProgress\n    });\n    this.emit('progress', totalProgress);\n  }\n  /**\n   * Registers listeners for all global actions, like:\n   * `error`, `file-removed`, `upload-progress`\n   */\n\n\n  updateOnlineStatus() {\n    const online = typeof window.navigator.onLine !== 'undefined' ? window.navigator.onLine : true;\n\n    if (!online) {\n      this.emit('is-offline');\n      this.info(this.i18n('noInternetConnection'), 'error', 0);\n      this.wasOffline = true;\n    } else {\n      this.emit('is-online');\n\n      if (this.wasOffline) {\n        this.emit('back-online');\n        this.info(this.i18n('connectedToInternet'), 'success', 3000);\n        this.wasOffline = false;\n      }\n    }\n  }\n\n  getID() {\n    return this.opts.id;\n  }\n  /**\n   * Registers a plugin with Core.\n   *\n   * @param {object} Plugin object\n   * @param {object} [opts] object with options to be passed to Plugin\n   * @returns {object} self for chaining\n   */\n  // eslint-disable-next-line no-shadow\n\n\n  use(Plugin, opts) {\n    if (typeof Plugin !== 'function') {\n      const msg = `Expected a plugin class, but got ${Plugin === null ? 'null' : typeof Plugin}.` + ' Please verify that the plugin was imported and spelled correctly.';\n      throw new TypeError(msg);\n    } // Instantiate\n\n\n    const plugin = new Plugin(this, opts);\n    const pluginId = plugin.id;\n\n    if (!pluginId) {\n      throw new Error('Your plugin must have an id');\n    }\n\n    if (!plugin.type) {\n      throw new Error('Your plugin must have a type');\n    }\n\n    const existsPluginAlready = this.getPlugin(pluginId);\n\n    if (existsPluginAlready) {\n      const msg = `Already found a plugin named '${existsPluginAlready.id}'. ` + `Tried to use: '${pluginId}'.\\n` + 'Uppy plugins must have unique `id` options. See https://uppy.io/docs/plugins/#id.';\n      throw new Error(msg);\n    }\n\n    if (Plugin.VERSION) {\n      this.log(`Using ${pluginId} v${Plugin.VERSION}`);\n    }\n\n    if (plugin.type in _classPrivateFieldLooseBase(this, _plugins)[_plugins]) {\n      _classPrivateFieldLooseBase(this, _plugins)[_plugins][plugin.type].push(plugin);\n    } else {\n      _classPrivateFieldLooseBase(this, _plugins)[_plugins][plugin.type] = [plugin];\n    }\n\n    plugin.install();\n    return this;\n  }\n  /**\n   * Find one Plugin by name.\n   *\n   * @param {string} id plugin id\n   * @returns {BasePlugin|undefined}\n   */\n\n\n  getPlugin(id) {\n    for (const plugins of Object.values(_classPrivateFieldLooseBase(this, _plugins)[_plugins])) {\n      const foundPlugin = plugins.find(plugin => plugin.id === id);\n      if (foundPlugin != null) return foundPlugin;\n    }\n\n    return undefined;\n  }\n\n  [_Symbol$for](type) {\n    return _classPrivateFieldLooseBase(this, _plugins)[_plugins][type];\n  }\n  /**\n   * Iterate through all `use`d plugins.\n   *\n   * @param {Function} method that will be run on each plugin\n   */\n\n\n  iteratePlugins(method) {\n    Object.values(_classPrivateFieldLooseBase(this, _plugins)[_plugins]).flat(1).forEach(method);\n  }\n  /**\n   * Uninstall and remove a plugin.\n   *\n   * @param {object} instance The plugin instance to remove.\n   */\n\n\n  removePlugin(instance) {\n    this.log(`Removing plugin ${instance.id}`);\n    this.emit('plugin-remove', instance);\n\n    if (instance.uninstall) {\n      instance.uninstall();\n    }\n\n    const list = _classPrivateFieldLooseBase(this, _plugins)[_plugins][instance.type]; // list.indexOf failed here, because Vue3 converted the plugin instance\n    // to a Proxy object, which failed the strict comparison test:\n    // obj !== objProxy\n\n\n    const index = list.findIndex(item => item.id === instance.id);\n\n    if (index !== -1) {\n      list.splice(index, 1);\n    }\n\n    const state = this.getState();\n    const updatedState = {\n      plugins: { ...state.plugins,\n        [instance.id]: undefined\n      }\n    };\n    this.setState(updatedState);\n  }\n  /**\n   * Uninstall all plugins and close down this Uppy instance.\n   */\n\n\n  close(_temp2) {\n    let {\n      reason\n    } = _temp2 === void 0 ? {} : _temp2;\n    this.log(`Closing Uppy instance ${this.opts.id}: removing all files and uninstalling plugins`);\n    this.cancelAll({\n      reason\n    });\n\n    _classPrivateFieldLooseBase(this, _storeUnsubscribe)[_storeUnsubscribe]();\n\n    this.iteratePlugins(plugin => {\n      this.removePlugin(plugin);\n    });\n\n    if (typeof window !== 'undefined' && window.removeEventListener) {\n      window.removeEventListener('online', _classPrivateFieldLooseBase(this, _updateOnlineStatus)[_updateOnlineStatus]);\n      window.removeEventListener('offline', _classPrivateFieldLooseBase(this, _updateOnlineStatus)[_updateOnlineStatus]);\n    }\n  }\n\n  hideInfo() {\n    const {\n      info\n    } = this.getState();\n    this.setState({\n      info: info.slice(1)\n    });\n    this.emit('info-hidden');\n  }\n  /**\n   * Set info message in `state.info`, so that UI plugins like `Informer`\n   * can display the message.\n   *\n   * @param {string | object} message Message to be displayed by the informer\n   * @param {string} [type]\n   * @param {number} [duration]\n   */\n\n\n  info(message, type, duration) {\n    if (type === void 0) {\n      type = 'info';\n    }\n\n    if (duration === void 0) {\n      duration = 3000;\n    }\n\n    const isComplexMessage = typeof message === 'object';\n    this.setState({\n      info: [...this.getState().info, {\n        type,\n        message: isComplexMessage ? message.message : message,\n        details: isComplexMessage ? message.details : null\n      }]\n    });\n    setTimeout(() => this.hideInfo(), duration);\n    this.emit('info-visible');\n  }\n  /**\n   * Passes messages to a function, provided in `opts.logger`.\n   * If `opts.logger: Uppy.debugLogger` or `opts.debug: true`, logs to the browser console.\n   *\n   * @param {string|object} message to log\n   * @param {string} [type] optional `error` or `warning`\n   */\n\n\n  log(message, type) {\n    const {\n      logger\n    } = this.opts;\n\n    switch (type) {\n      case 'error':\n        logger.error(message);\n        break;\n\n      case 'warning':\n        logger.warn(message);\n        break;\n\n      default:\n        logger.debug(message);\n        break;\n    }\n  }\n  /**\n   * Restore an upload by its ID.\n   */\n\n\n  restore(uploadID) {\n    this.log(`Core: attempting to restore upload \"${uploadID}\"`);\n\n    if (!this.getState().currentUploads[uploadID]) {\n      _classPrivateFieldLooseBase(this, _removeUpload)[_removeUpload](uploadID);\n\n      return Promise.reject(new Error('Nonexistent upload'));\n    }\n\n    return _classPrivateFieldLooseBase(this, _runUpload)[_runUpload](uploadID);\n  }\n  /**\n   * Create an upload for a bunch of files.\n   *\n   * @param {Array<string>} fileIDs File IDs to include in this upload.\n   * @returns {string} ID of this upload.\n   */\n\n\n  [_Symbol$for2]() {\n    return _classPrivateFieldLooseBase(this, _createUpload)[_createUpload](...arguments);\n  }\n\n  /**\n   * Add data to an upload's result object.\n   *\n   * @param {string} uploadID The ID of the upload.\n   * @param {object} data Data properties to add to the result object.\n   */\n  addResultData(uploadID, data) {\n    if (!_classPrivateFieldLooseBase(this, _getUpload)[_getUpload](uploadID)) {\n      this.log(`Not setting result for an upload that has been removed: ${uploadID}`);\n      return;\n    }\n\n    const {\n      currentUploads\n    } = this.getState();\n    const currentUpload = { ...currentUploads[uploadID],\n      result: { ...currentUploads[uploadID].result,\n        ...data\n      }\n    };\n    this.setState({\n      currentUploads: { ...currentUploads,\n        [uploadID]: currentUpload\n      }\n    });\n  }\n  /**\n   * Remove an upload, eg. if it has been canceled or completed.\n   *\n   * @param {string} uploadID The ID of the upload.\n   */\n\n\n  /**\n   * Start an upload for all the files that are not currently being uploaded.\n   *\n   * @returns {Promise}\n   */\n  upload() {\n    var _classPrivateFieldLoo;\n\n    if (!((_classPrivateFieldLoo = _classPrivateFieldLooseBase(this, _plugins)[_plugins].uploader) != null && _classPrivateFieldLoo.length)) {\n      this.log('No uploader type plugins are used', 'warning');\n    }\n\n    let {\n      files\n    } = this.getState();\n    const onBeforeUploadResult = this.opts.onBeforeUpload(files);\n\n    if (onBeforeUploadResult === false) {\n      return Promise.reject(new Error('Not starting the upload because onBeforeUpload returned false'));\n    }\n\n    if (onBeforeUploadResult && typeof onBeforeUploadResult === 'object') {\n      files = onBeforeUploadResult; // Updating files in state, because uploader plugins receive file IDs,\n      // and then fetch the actual file object from state\n\n      this.setState({\n        files\n      });\n    }\n\n    return Promise.resolve().then(() => _classPrivateFieldLooseBase(this, _restricter)[_restricter].validateMinNumberOfFiles(files)).catch(err => {\n      _classPrivateFieldLooseBase(this, _informAndEmit)[_informAndEmit](err);\n\n      throw err;\n    }).then(() => {\n      if (!_classPrivateFieldLooseBase(this, _checkRequiredMetaFields)[_checkRequiredMetaFields](files)) {\n        throw new RestrictionError(this.i18n('missingRequiredMetaField'));\n      }\n    }).catch(err => {\n      // Doing this in a separate catch because we already emited and logged\n      // all the errors in `checkRequiredMetaFields` so we only throw a generic\n      // missing fields error here.\n      throw err;\n    }).then(() => {\n      const {\n        currentUploads\n      } = this.getState(); // get a list of files that are currently assigned to uploads\n\n      const currentlyUploadingFiles = Object.values(currentUploads).flatMap(curr => curr.fileIDs);\n      const waitingFileIDs = [];\n      Object.keys(files).forEach(fileID => {\n        const file = this.getFile(fileID); // if the file hasn't started uploading and hasn't already been assigned to an upload..\n\n        if (!file.progress.uploadStarted && currentlyUploadingFiles.indexOf(fileID) === -1) {\n          waitingFileIDs.push(file.id);\n        }\n      });\n\n      const uploadID = _classPrivateFieldLooseBase(this, _createUpload)[_createUpload](waitingFileIDs);\n\n      return _classPrivateFieldLooseBase(this, _runUpload)[_runUpload](uploadID);\n    }).catch(err => {\n      this.emit('error', err);\n      this.log(err, 'error');\n      throw err;\n    });\n  }\n\n}\n\nfunction _informAndEmit2(error, file) {\n  const {\n    message,\n    details = ''\n  } = error;\n\n  if (error.isRestriction) {\n    this.emit('restriction-failed', file, error);\n  } else {\n    this.emit('error', error);\n  }\n\n  this.info({\n    message,\n    details\n  }, 'error', this.opts.infoTimeout);\n  this.log(`${message} ${details}`.trim(), 'error');\n}\n\nfunction _checkRequiredMetaFieldsOnFile2(file) {\n  const {\n    missingFields,\n    error\n  } = _classPrivateFieldLooseBase(this, _restricter)[_restricter].getMissingRequiredMetaFields(file);\n\n  if (missingFields.length > 0) {\n    this.setFileState(file.id, {\n      missingRequiredMetaFields: missingFields\n    });\n    this.log(error.message);\n    this.emit('restriction-failed', file, error);\n    return false;\n  }\n\n  return true;\n}\n\nfunction _checkRequiredMetaFields2(files) {\n  let success = true;\n\n  for (const file of Object.values(files)) {\n    if (!_classPrivateFieldLooseBase(this, _checkRequiredMetaFieldsOnFile)[_checkRequiredMetaFieldsOnFile](file)) {\n      success = false;\n    }\n  }\n\n  return success;\n}\n\nfunction _assertNewUploadAllowed2(file) {\n  const {\n    allowNewUpload\n  } = this.getState();\n\n  if (allowNewUpload === false) {\n    const error = new RestrictionError(this.i18n('noMoreFilesAllowed'));\n\n    _classPrivateFieldLooseBase(this, _informAndEmit)[_informAndEmit](error, file);\n\n    throw error;\n  }\n}\n\nfunction _checkAndCreateFileStateObject2(files, fileDescriptor) {\n  // Uppy expects files in { name, type, size, data } format.\n  // If the actual File object is passed from input[type=file] or drag-drop,\n  // we normalize it to match Uppy file object\n  if (fileDescriptor instanceof File) {\n    // eslint-disable-next-line no-param-reassign\n    fileDescriptor = {\n      name: fileDescriptor.name,\n      type: fileDescriptor.type,\n      size: fileDescriptor.size,\n      data: fileDescriptor\n    };\n  }\n\n  const fileType = getFileType(fileDescriptor);\n  const fileName = getFileName(fileType, fileDescriptor);\n  const fileExtension = getFileNameAndExtension(fileName).extension;\n  const isRemote = Boolean(fileDescriptor.isRemote);\n  const fileID = generateFileID({ ...fileDescriptor,\n    type: fileType\n  });\n\n  if (this.checkIfFileAlreadyExists(fileID)) {\n    const error = new RestrictionError(this.i18n('noDuplicates', {\n      fileName\n    }));\n\n    _classPrivateFieldLooseBase(this, _informAndEmit)[_informAndEmit](error, fileDescriptor);\n\n    throw error;\n  }\n\n  const meta = fileDescriptor.meta || {};\n  meta.name = fileName;\n  meta.type = fileType; // `null` means the size is unknown.\n\n  const size = Number.isFinite(fileDescriptor.data.size) ? fileDescriptor.data.size : null;\n  let newFile = {\n    source: fileDescriptor.source || '',\n    id: fileID,\n    name: fileName,\n    extension: fileExtension || '',\n    meta: { ...this.getState().meta,\n      ...meta\n    },\n    type: fileType,\n    data: fileDescriptor.data,\n    progress: {\n      percentage: 0,\n      bytesUploaded: 0,\n      bytesTotal: size,\n      uploadComplete: false,\n      uploadStarted: null\n    },\n    size,\n    isRemote,\n    remote: fileDescriptor.remote || '',\n    preview: fileDescriptor.preview\n  };\n  const onBeforeFileAddedResult = this.opts.onBeforeFileAdded(newFile, files);\n\n  if (onBeforeFileAddedResult === false) {\n    // Don’t show UI info for this error, as it should be done by the developer\n    const error = new RestrictionError('Cannot add the file because onBeforeFileAdded returned false.');\n    this.emit('restriction-failed', fileDescriptor, error);\n    throw error;\n  } else if (typeof onBeforeFileAddedResult === 'object' && onBeforeFileAddedResult !== null) {\n    newFile = onBeforeFileAddedResult;\n  }\n\n  try {\n    const filesArray = Object.keys(files).map(i => files[i]);\n\n    _classPrivateFieldLooseBase(this, _restricter)[_restricter].validate(newFile, filesArray);\n  } catch (err) {\n    _classPrivateFieldLooseBase(this, _informAndEmit)[_informAndEmit](err, newFile);\n\n    throw err;\n  }\n\n  return newFile;\n}\n\nfunction _startIfAutoProceed2() {\n  if (this.opts.autoProceed && !this.scheduledAutoProceed) {\n    this.scheduledAutoProceed = setTimeout(() => {\n      this.scheduledAutoProceed = null;\n      this.upload().catch(err => {\n        if (!err.isRestriction) {\n          this.log(err.stack || err.message || err);\n        }\n      });\n    }, 4);\n  }\n}\n\nfunction _addListeners2() {\n  /**\n   * @param {Error} error\n   * @param {object} [file]\n   * @param {object} [response]\n   */\n  const errorHandler = (error, file, response) => {\n    let errorMsg = error.message || 'Unknown error';\n\n    if (error.details) {\n      errorMsg += ` ${error.details}`;\n    }\n\n    this.setState({\n      error: errorMsg\n    });\n\n    if (file != null && file.id in this.getState().files) {\n      this.setFileState(file.id, {\n        error: errorMsg,\n        response\n      });\n    }\n  };\n\n  this.on('error', errorHandler);\n  this.on('upload-error', (file, error, response) => {\n    errorHandler(error, file, response);\n\n    if (typeof error === 'object' && error.message) {\n      const newError = new Error(error.message);\n      newError.details = error.message;\n\n      if (error.details) {\n        newError.details += ` ${error.details}`;\n      }\n\n      newError.message = this.i18n('failedToUpload', {\n        file: file == null ? void 0 : file.name\n      });\n\n      _classPrivateFieldLooseBase(this, _informAndEmit)[_informAndEmit](newError);\n    } else {\n      _classPrivateFieldLooseBase(this, _informAndEmit)[_informAndEmit](error);\n    }\n  });\n  this.on('upload', () => {\n    this.setState({\n      error: null\n    });\n  });\n  this.on('upload-started', file => {\n    if (file == null || !this.getFile(file.id)) {\n      this.log(`Not setting progress for a file that has been removed: ${file == null ? void 0 : file.id}`);\n      return;\n    }\n\n    this.setFileState(file.id, {\n      progress: {\n        uploadStarted: Date.now(),\n        uploadComplete: false,\n        percentage: 0,\n        bytesUploaded: 0,\n        bytesTotal: file.size\n      }\n    });\n  });\n  this.on('upload-progress', this.calculateProgress);\n  this.on('upload-success', (file, uploadResp) => {\n    if (file == null || !this.getFile(file.id)) {\n      this.log(`Not setting progress for a file that has been removed: ${file == null ? void 0 : file.id}`);\n      return;\n    }\n\n    const currentProgress = this.getFile(file.id).progress;\n    this.setFileState(file.id, {\n      progress: { ...currentProgress,\n        postprocess: _classPrivateFieldLooseBase(this, _postProcessors)[_postProcessors].size > 0 ? {\n          mode: 'indeterminate'\n        } : null,\n        uploadComplete: true,\n        percentage: 100,\n        bytesUploaded: currentProgress.bytesTotal\n      },\n      response: uploadResp,\n      uploadURL: uploadResp.uploadURL,\n      isPaused: false\n    }); // Remote providers sometimes don't tell us the file size,\n    // but we can know how many bytes we uploaded once the upload is complete.\n\n    if (file.size == null) {\n      this.setFileState(file.id, {\n        size: uploadResp.bytesUploaded || currentProgress.bytesTotal\n      });\n    }\n\n    this.calculateTotalProgress();\n  });\n  this.on('preprocess-progress', (file, progress) => {\n    if (file == null || !this.getFile(file.id)) {\n      this.log(`Not setting progress for a file that has been removed: ${file == null ? void 0 : file.id}`);\n      return;\n    }\n\n    this.setFileState(file.id, {\n      progress: { ...this.getFile(file.id).progress,\n        preprocess: progress\n      }\n    });\n  });\n  this.on('preprocess-complete', file => {\n    if (file == null || !this.getFile(file.id)) {\n      this.log(`Not setting progress for a file that has been removed: ${file == null ? void 0 : file.id}`);\n      return;\n    }\n\n    const files = { ...this.getState().files\n    };\n    files[file.id] = { ...files[file.id],\n      progress: { ...files[file.id].progress\n      }\n    };\n    delete files[file.id].progress.preprocess;\n    this.setState({\n      files\n    });\n  });\n  this.on('postprocess-progress', (file, progress) => {\n    if (file == null || !this.getFile(file.id)) {\n      this.log(`Not setting progress for a file that has been removed: ${file == null ? void 0 : file.id}`);\n      return;\n    }\n\n    this.setFileState(file.id, {\n      progress: { ...this.getState().files[file.id].progress,\n        postprocess: progress\n      }\n    });\n  });\n  this.on('postprocess-complete', file => {\n    if (file == null || !this.getFile(file.id)) {\n      this.log(`Not setting progress for a file that has been removed: ${file == null ? void 0 : file.id}`);\n      return;\n    }\n\n    const files = { ...this.getState().files\n    };\n    files[file.id] = { ...files[file.id],\n      progress: { ...files[file.id].progress\n      }\n    };\n    delete files[file.id].progress.postprocess;\n    this.setState({\n      files\n    });\n  });\n  this.on('restored', () => {\n    // Files may have changed--ensure progress is still accurate.\n    this.calculateTotalProgress();\n  });\n  this.on('dashboard:file-edit-complete', file => {\n    if (file) {\n      _classPrivateFieldLooseBase(this, _checkRequiredMetaFieldsOnFile)[_checkRequiredMetaFieldsOnFile](file);\n    }\n  }); // show informer if offline\n\n  if (typeof window !== 'undefined' && window.addEventListener) {\n    window.addEventListener('online', _classPrivateFieldLooseBase(this, _updateOnlineStatus)[_updateOnlineStatus]);\n    window.addEventListener('offline', _classPrivateFieldLooseBase(this, _updateOnlineStatus)[_updateOnlineStatus]);\n    setTimeout(_classPrivateFieldLooseBase(this, _updateOnlineStatus)[_updateOnlineStatus], 3000);\n  }\n}\n\nfunction _createUpload2(fileIDs, opts) {\n  if (opts === void 0) {\n    opts = {};\n  }\n\n  // uppy.retryAll sets this to true — when retrying we want to ignore `allowNewUpload: false`\n  const {\n    forceAllowNewUpload = false\n  } = opts;\n  const {\n    allowNewUpload,\n    currentUploads\n  } = this.getState();\n\n  if (!allowNewUpload && !forceAllowNewUpload) {\n    throw new Error('Cannot create a new upload: already uploading.');\n  }\n\n  const uploadID = nanoid();\n  this.emit('upload', {\n    id: uploadID,\n    fileIDs\n  });\n  this.setState({\n    allowNewUpload: this.opts.allowMultipleUploadBatches !== false && this.opts.allowMultipleUploads !== false,\n    currentUploads: { ...currentUploads,\n      [uploadID]: {\n        fileIDs,\n        step: 0,\n        result: {}\n      }\n    }\n  });\n  return uploadID;\n}\n\nfunction _getUpload2(uploadID) {\n  const {\n    currentUploads\n  } = this.getState();\n  return currentUploads[uploadID];\n}\n\nfunction _removeUpload2(uploadID) {\n  const currentUploads = { ...this.getState().currentUploads\n  };\n  delete currentUploads[uploadID];\n  this.setState({\n    currentUploads\n  });\n}\n\nasync function _runUpload2(uploadID) {\n  let {\n    currentUploads\n  } = this.getState();\n  let currentUpload = currentUploads[uploadID];\n  const restoreStep = currentUpload.step || 0;\n  const steps = [..._classPrivateFieldLooseBase(this, _preProcessors)[_preProcessors], ..._classPrivateFieldLooseBase(this, _uploaders)[_uploaders], ..._classPrivateFieldLooseBase(this, _postProcessors)[_postProcessors]];\n\n  try {\n    for (let step = restoreStep; step < steps.length; step++) {\n      if (!currentUpload) {\n        break;\n      }\n\n      const fn = steps[step];\n      const updatedUpload = { ...currentUpload,\n        step\n      };\n      this.setState({\n        currentUploads: { ...currentUploads,\n          [uploadID]: updatedUpload\n        }\n      }); // TODO give this the `updatedUpload` object as its only parameter maybe?\n      // Otherwise when more metadata may be added to the upload this would keep getting more parameters\n\n      await fn(updatedUpload.fileIDs, uploadID); // Update currentUpload value in case it was modified asynchronously.\n\n      currentUploads = this.getState().currentUploads;\n      currentUpload = currentUploads[uploadID];\n    }\n  } catch (err) {\n    _classPrivateFieldLooseBase(this, _removeUpload)[_removeUpload](uploadID);\n\n    throw err;\n  } // Set result data.\n\n\n  if (currentUpload) {\n    // Mark postprocessing step as complete if necessary; this addresses a case where we might get\n    // stuck in the postprocessing UI while the upload is fully complete.\n    // If the postprocessing steps do not do any work, they may not emit postprocessing events at\n    // all, and never mark the postprocessing as complete. This is fine on its own but we\n    // introduced code in the @uppy/core upload-success handler to prepare postprocessing progress\n    // state if any postprocessors are registered. That is to avoid a \"flash of completed state\"\n    // before the postprocessing plugins can emit events.\n    //\n    // So, just in case an upload with postprocessing plugins *has* completed *without* emitting\n    // postprocessing completion, we do it instead.\n    currentUpload.fileIDs.forEach(fileID => {\n      const file = this.getFile(fileID);\n\n      if (file && file.progress.postprocess) {\n        this.emit('postprocess-complete', file);\n      }\n    });\n    const files = currentUpload.fileIDs.map(fileID => this.getFile(fileID));\n    const successful = files.filter(file => !file.error);\n    const failed = files.filter(file => file.error);\n    await this.addResultData(uploadID, {\n      successful,\n      failed,\n      uploadID\n    }); // Update currentUpload value in case it was modified asynchronously.\n\n    currentUploads = this.getState().currentUploads;\n    currentUpload = currentUploads[uploadID];\n  } // Emit completion events.\n  // This is in a separate function so that the `currentUploads` variable\n  // always refers to the latest state. In the handler right above it refers\n  // to an outdated object without the `.result` property.\n\n\n  let result;\n\n  if (currentUpload) {\n    result = currentUpload.result;\n    this.emit('complete', result);\n\n    _classPrivateFieldLooseBase(this, _removeUpload)[_removeUpload](uploadID);\n  }\n\n  if (result == null) {\n    this.log(`Not setting result for an upload that has been removed: ${uploadID}`);\n  }\n\n  return result;\n}\n\nUppy.VERSION = packageJson.version;\nexport default Uppy;"],"mappings":"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"},"metadata":{},"sourceType":"module"}