{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nfunction _classPrivateFieldLooseBase(receiver, privateKey) {\n  if (!Object.prototype.hasOwnProperty.call(receiver, privateKey)) {\n    throw new TypeError(\"attempted to use private field on non-instance\");\n  }\n  return receiver;\n}\nvar id = 0;\nfunction _classPrivateFieldLooseKey(name) {\n  return \"__private_\" + id++ + \"_\" + name;\n}\nfunction createCancelError() {\n  return new Error('Cancelled');\n}\nvar _activeRequests = /*#__PURE__*/_classPrivateFieldLooseKey(\"activeRequests\");\nvar _queuedHandlers = /*#__PURE__*/_classPrivateFieldLooseKey(\"queuedHandlers\");\nvar _paused = /*#__PURE__*/_classPrivateFieldLooseKey(\"paused\");\nvar _pauseTimer = /*#__PURE__*/_classPrivateFieldLooseKey(\"pauseTimer\");\nvar _downLimit = /*#__PURE__*/_classPrivateFieldLooseKey(\"downLimit\");\nvar _upperLimit = /*#__PURE__*/_classPrivateFieldLooseKey(\"upperLimit\");\nvar _rateLimitingTimer = /*#__PURE__*/_classPrivateFieldLooseKey(\"rateLimitingTimer\");\nvar _call = /*#__PURE__*/_classPrivateFieldLooseKey(\"call\");\nvar _queueNext = /*#__PURE__*/_classPrivateFieldLooseKey(\"queueNext\");\nvar _next = /*#__PURE__*/_classPrivateFieldLooseKey(\"next\");\nvar _queue = /*#__PURE__*/_classPrivateFieldLooseKey(\"queue\");\nvar _dequeue = /*#__PURE__*/_classPrivateFieldLooseKey(\"dequeue\");\nvar _resume = /*#__PURE__*/_classPrivateFieldLooseKey(\"resume\");\nvar _increaseLimit = /*#__PURE__*/_classPrivateFieldLooseKey(\"increaseLimit\");\nexport class RateLimitedQueue {\n  constructor(limit) {\n    Object.defineProperty(this, _dequeue, {\n      value: _dequeue2\n    });\n    Object.defineProperty(this, _queue, {\n      value: _queue2\n    });\n    Object.defineProperty(this, _next, {\n      value: _next2\n    });\n    Object.defineProperty(this, _queueNext, {\n      value: _queueNext2\n    });\n    Object.defineProperty(this, _call, {\n      value: _call2\n    });\n    Object.defineProperty(this, _activeRequests, {\n      writable: true,\n      value: 0\n    });\n    Object.defineProperty(this, _queuedHandlers, {\n      writable: true,\n      value: []\n    });\n    Object.defineProperty(this, _paused, {\n      writable: true,\n      value: false\n    });\n    Object.defineProperty(this, _pauseTimer, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _downLimit, {\n      writable: true,\n      value: 1\n    });\n    Object.defineProperty(this, _upperLimit, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _rateLimitingTimer, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _resume, {\n      writable: true,\n      value: () => this.resume()\n    });\n    Object.defineProperty(this, _increaseLimit, {\n      writable: true,\n      value: () => {\n        if (_classPrivateFieldLooseBase(this, _paused)[_paused]) {\n          _classPrivateFieldLooseBase(this, _rateLimitingTimer)[_rateLimitingTimer] = setTimeout(_classPrivateFieldLooseBase(this, _increaseLimit)[_increaseLimit], 0);\n          return;\n        }\n        _classPrivateFieldLooseBase(this, _downLimit)[_downLimit] = this.limit;\n        this.limit = Math.ceil((_classPrivateFieldLooseBase(this, _upperLimit)[_upperLimit] + _classPrivateFieldLooseBase(this, _downLimit)[_downLimit]) / 2);\n        for (let i = _classPrivateFieldLooseBase(this, _downLimit)[_downLimit]; i <= this.limit; i++) {\n          _classPrivateFieldLooseBase(this, _queueNext)[_queueNext]();\n        }\n        if (_classPrivateFieldLooseBase(this, _upperLimit)[_upperLimit] - _classPrivateFieldLooseBase(this, _downLimit)[_downLimit] > 3) {\n          _classPrivateFieldLooseBase(this, _rateLimitingTimer)[_rateLimitingTimer] = setTimeout(_classPrivateFieldLooseBase(this, _increaseLimit)[_increaseLimit], 2000);\n        } else {\n          _classPrivateFieldLooseBase(this, _downLimit)[_downLimit] = Math.floor(_classPrivateFieldLooseBase(this, _downLimit)[_downLimit] / 2);\n        }\n      }\n    });\n    if (typeof limit !== 'number' || limit === 0) {\n      this.limit = Infinity;\n    } else {\n      this.limit = limit;\n    }\n  }\n  run(fn, queueOptions) {\n    if (!_classPrivateFieldLooseBase(this, _paused)[_paused] && _classPrivateFieldLooseBase(this, _activeRequests)[_activeRequests] < this.limit) {\n      return _classPrivateFieldLooseBase(this, _call)[_call](fn);\n    }\n    return _classPrivateFieldLooseBase(this, _queue)[_queue](fn, queueOptions);\n  }\n  wrapPromiseFunction(fn, queueOptions) {\n    var _this = this;\n    return function () {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n      let queuedRequest;\n      const outerPromise = new Promise((resolve, reject) => {\n        queuedRequest = _this.run(() => {\n          let cancelError;\n          let innerPromise;\n          try {\n            innerPromise = Promise.resolve(fn(...args));\n          } catch (err) {\n            innerPromise = Promise.reject(err);\n          }\n          innerPromise.then(result => {\n            if (cancelError) {\n              reject(cancelError);\n            } else {\n              queuedRequest.done();\n              resolve(result);\n            }\n          }, err => {\n            if (cancelError) {\n              reject(cancelError);\n            } else {\n              queuedRequest.done();\n              reject(err);\n            }\n          });\n          return () => {\n            cancelError = createCancelError();\n          };\n        }, queueOptions);\n      });\n      outerPromise.abort = () => {\n        queuedRequest.abort();\n      };\n      return outerPromise;\n    };\n  }\n  resume() {\n    _classPrivateFieldLooseBase(this, _paused)[_paused] = false;\n    clearTimeout(_classPrivateFieldLooseBase(this, _pauseTimer)[_pauseTimer]);\n    for (let i = 0; i < this.limit; i++) {\n      _classPrivateFieldLooseBase(this, _queueNext)[_queueNext]();\n    }\n  }\n\n  /**\n   * Freezes the queue for a while or indefinitely.\n   *\n   * @param {number | null } [duration] Duration for the pause to happen, in milliseconds.\n   *                                    If omitted, the queue won't resume automatically.\n   */\n  pause(duration) {\n    if (duration === void 0) {\n      duration = null;\n    }\n    _classPrivateFieldLooseBase(this, _paused)[_paused] = true;\n    clearTimeout(_classPrivateFieldLooseBase(this, _pauseTimer)[_pauseTimer]);\n    if (duration != null) {\n      _classPrivateFieldLooseBase(this, _pauseTimer)[_pauseTimer] = setTimeout(_classPrivateFieldLooseBase(this, _resume)[_resume], duration);\n    }\n  }\n  /**\n   * Pauses the queue for a duration, and lower the limit of concurrent requests\n   * when the queue resumes. When the queue resumes, it tries to progressively\n   * increase the limit in `this.#increaseLimit` until another call is made to\n   * `this.rateLimit`.\n   * Call this function when using the RateLimitedQueue for network requests and\n   * the remote server responds with 429 HTTP code.\n   *\n   * @param {number} duration in milliseconds.\n   */\n\n  rateLimit(duration) {\n    clearTimeout(_classPrivateFieldLooseBase(this, _rateLimitingTimer)[_rateLimitingTimer]);\n    this.pause(duration);\n    if (this.limit > 1 && Number.isFinite(this.limit)) {\n      _classPrivateFieldLooseBase(this, _upperLimit)[_upperLimit] = this.limit - 1;\n      this.limit = _classPrivateFieldLooseBase(this, _downLimit)[_downLimit];\n      _classPrivateFieldLooseBase(this, _rateLimitingTimer)[_rateLimitingTimer] = setTimeout(_classPrivateFieldLooseBase(this, _increaseLimit)[_increaseLimit], duration);\n    }\n  }\n  get isPaused() {\n    return _classPrivateFieldLooseBase(this, _paused)[_paused];\n  }\n}\nfunction _call2(fn) {\n  _classPrivateFieldLooseBase(this, _activeRequests)[_activeRequests] += 1;\n  let done = false;\n  let cancelActive;\n  try {\n    cancelActive = fn();\n  } catch (err) {\n    _classPrivateFieldLooseBase(this, _activeRequests)[_activeRequests] -= 1;\n    throw err;\n  }\n  return {\n    abort: () => {\n      if (done) return;\n      done = true;\n      _classPrivateFieldLooseBase(this, _activeRequests)[_activeRequests] -= 1;\n      cancelActive();\n      _classPrivateFieldLooseBase(this, _queueNext)[_queueNext]();\n    },\n    done: () => {\n      if (done) return;\n      done = true;\n      _classPrivateFieldLooseBase(this, _activeRequests)[_activeRequests] -= 1;\n      _classPrivateFieldLooseBase(this, _queueNext)[_queueNext]();\n    }\n  };\n}\nfunction _queueNext2() {\n  // Do it soon but not immediately, this allows clearing out the entire queue synchronously\n  // one by one without continuously _advancing_ it (and starting new tasks before immediately\n  // aborting them)\n  queueMicrotask(() => _classPrivateFieldLooseBase(this, _next)[_next]());\n}\nfunction _next2() {\n  if (_classPrivateFieldLooseBase(this, _paused)[_paused] || _classPrivateFieldLooseBase(this, _activeRequests)[_activeRequests] >= this.limit) {\n    return;\n  }\n  if (_classPrivateFieldLooseBase(this, _queuedHandlers)[_queuedHandlers].length === 0) {\n    return;\n  } // Dispatch the next request, and update the abort/done handlers\n  // so that cancelling it does the Right Thing (and doesn't just try\n  // to dequeue an already-running request).\n\n  const next = _classPrivateFieldLooseBase(this, _queuedHandlers)[_queuedHandlers].shift();\n  const handler = _classPrivateFieldLooseBase(this, _call)[_call](next.fn);\n  next.abort = handler.abort;\n  next.done = handler.done;\n}\nfunction _queue2(fn, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  const handler = {\n    fn,\n    priority: options.priority || 0,\n    abort: () => {\n      _classPrivateFieldLooseBase(this, _dequeue)[_dequeue](handler);\n    },\n    done: () => {\n      throw new Error('Cannot mark a queued request as done: this indicates a bug');\n    }\n  };\n  const index = _classPrivateFieldLooseBase(this, _queuedHandlers)[_queuedHandlers].findIndex(other => {\n    return handler.priority > other.priority;\n  });\n  if (index === -1) {\n    _classPrivateFieldLooseBase(this, _queuedHandlers)[_queuedHandlers].push(handler);\n  } else {\n    _classPrivateFieldLooseBase(this, _queuedHandlers)[_queuedHandlers].splice(index, 0, handler);\n  }\n  return handler;\n}\nfunction _dequeue2(handler) {\n  const index = _classPrivateFieldLooseBase(this, _queuedHandlers)[_queuedHandlers].indexOf(handler);\n  if (index !== -1) {\n    _classPrivateFieldLooseBase(this, _queuedHandlers)[_queuedHandlers].splice(index, 1);\n  }\n}\nexport const internalRateLimitedQueue = Symbol('__queue');","map":{"version":3,"names":["_classPrivateFieldLooseBase","receiver","privateKey","Object","prototype","hasOwnProperty","call","TypeError","id","_classPrivateFieldLooseKey","name","createCancelError","Error","_activeRequests","_queuedHandlers","_paused","_pauseTimer","_downLimit","_upperLimit","_rateLimitingTimer","_call","_queueNext","_next","_queue","_dequeue","_resume","_increaseLimit","RateLimitedQueue","constructor","limit","defineProperty","value","_dequeue2","_queue2","_next2","_queueNext2","_call2","writable","resume","setTimeout","Math","ceil","i","floor","Infinity","run","fn","queueOptions","wrapPromiseFunction","_this","_len","arguments","length","args","Array","_key","queuedRequest","outerPromise","Promise","resolve","reject","cancelError","innerPromise","err","then","result","done","abort","clearTimeout","pause","duration","rateLimit","Number","isFinite","isPaused","cancelActive","queueMicrotask","next","shift","handler","options","priority","index","findIndex","other","push","splice","indexOf","internalRateLimitedQueue","Symbol"],"sources":["/lab/node_modules/@uppy/utils/lib/RateLimitedQueue.js"],"sourcesContent":["function _classPrivateFieldLooseBase(receiver, privateKey) { if (!Object.prototype.hasOwnProperty.call(receiver, privateKey)) { throw new TypeError(\"attempted to use private field on non-instance\"); } return receiver; }\n\nvar id = 0;\n\nfunction _classPrivateFieldLooseKey(name) { return \"__private_\" + id++ + \"_\" + name; }\n\nfunction createCancelError() {\n  return new Error('Cancelled');\n}\n\nvar _activeRequests = /*#__PURE__*/_classPrivateFieldLooseKey(\"activeRequests\");\n\nvar _queuedHandlers = /*#__PURE__*/_classPrivateFieldLooseKey(\"queuedHandlers\");\n\nvar _paused = /*#__PURE__*/_classPrivateFieldLooseKey(\"paused\");\n\nvar _pauseTimer = /*#__PURE__*/_classPrivateFieldLooseKey(\"pauseTimer\");\n\nvar _downLimit = /*#__PURE__*/_classPrivateFieldLooseKey(\"downLimit\");\n\nvar _upperLimit = /*#__PURE__*/_classPrivateFieldLooseKey(\"upperLimit\");\n\nvar _rateLimitingTimer = /*#__PURE__*/_classPrivateFieldLooseKey(\"rateLimitingTimer\");\n\nvar _call = /*#__PURE__*/_classPrivateFieldLooseKey(\"call\");\n\nvar _queueNext = /*#__PURE__*/_classPrivateFieldLooseKey(\"queueNext\");\n\nvar _next = /*#__PURE__*/_classPrivateFieldLooseKey(\"next\");\n\nvar _queue = /*#__PURE__*/_classPrivateFieldLooseKey(\"queue\");\n\nvar _dequeue = /*#__PURE__*/_classPrivateFieldLooseKey(\"dequeue\");\n\nvar _resume = /*#__PURE__*/_classPrivateFieldLooseKey(\"resume\");\n\nvar _increaseLimit = /*#__PURE__*/_classPrivateFieldLooseKey(\"increaseLimit\");\n\nexport class RateLimitedQueue {\n  constructor(limit) {\n    Object.defineProperty(this, _dequeue, {\n      value: _dequeue2\n    });\n    Object.defineProperty(this, _queue, {\n      value: _queue2\n    });\n    Object.defineProperty(this, _next, {\n      value: _next2\n    });\n    Object.defineProperty(this, _queueNext, {\n      value: _queueNext2\n    });\n    Object.defineProperty(this, _call, {\n      value: _call2\n    });\n    Object.defineProperty(this, _activeRequests, {\n      writable: true,\n      value: 0\n    });\n    Object.defineProperty(this, _queuedHandlers, {\n      writable: true,\n      value: []\n    });\n    Object.defineProperty(this, _paused, {\n      writable: true,\n      value: false\n    });\n    Object.defineProperty(this, _pauseTimer, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _downLimit, {\n      writable: true,\n      value: 1\n    });\n    Object.defineProperty(this, _upperLimit, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _rateLimitingTimer, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _resume, {\n      writable: true,\n      value: () => this.resume()\n    });\n    Object.defineProperty(this, _increaseLimit, {\n      writable: true,\n      value: () => {\n        if (_classPrivateFieldLooseBase(this, _paused)[_paused]) {\n          _classPrivateFieldLooseBase(this, _rateLimitingTimer)[_rateLimitingTimer] = setTimeout(_classPrivateFieldLooseBase(this, _increaseLimit)[_increaseLimit], 0);\n          return;\n        }\n\n        _classPrivateFieldLooseBase(this, _downLimit)[_downLimit] = this.limit;\n        this.limit = Math.ceil((_classPrivateFieldLooseBase(this, _upperLimit)[_upperLimit] + _classPrivateFieldLooseBase(this, _downLimit)[_downLimit]) / 2);\n\n        for (let i = _classPrivateFieldLooseBase(this, _downLimit)[_downLimit]; i <= this.limit; i++) {\n          _classPrivateFieldLooseBase(this, _queueNext)[_queueNext]();\n        }\n\n        if (_classPrivateFieldLooseBase(this, _upperLimit)[_upperLimit] - _classPrivateFieldLooseBase(this, _downLimit)[_downLimit] > 3) {\n          _classPrivateFieldLooseBase(this, _rateLimitingTimer)[_rateLimitingTimer] = setTimeout(_classPrivateFieldLooseBase(this, _increaseLimit)[_increaseLimit], 2000);\n        } else {\n          _classPrivateFieldLooseBase(this, _downLimit)[_downLimit] = Math.floor(_classPrivateFieldLooseBase(this, _downLimit)[_downLimit] / 2);\n        }\n      }\n    });\n\n    if (typeof limit !== 'number' || limit === 0) {\n      this.limit = Infinity;\n    } else {\n      this.limit = limit;\n    }\n  }\n\n  run(fn, queueOptions) {\n    if (!_classPrivateFieldLooseBase(this, _paused)[_paused] && _classPrivateFieldLooseBase(this, _activeRequests)[_activeRequests] < this.limit) {\n      return _classPrivateFieldLooseBase(this, _call)[_call](fn);\n    }\n\n    return _classPrivateFieldLooseBase(this, _queue)[_queue](fn, queueOptions);\n  }\n\n  wrapPromiseFunction(fn, queueOptions) {\n    var _this = this;\n\n    return function () {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      let queuedRequest;\n      const outerPromise = new Promise((resolve, reject) => {\n        queuedRequest = _this.run(() => {\n          let cancelError;\n          let innerPromise;\n\n          try {\n            innerPromise = Promise.resolve(fn(...args));\n          } catch (err) {\n            innerPromise = Promise.reject(err);\n          }\n\n          innerPromise.then(result => {\n            if (cancelError) {\n              reject(cancelError);\n            } else {\n              queuedRequest.done();\n              resolve(result);\n            }\n          }, err => {\n            if (cancelError) {\n              reject(cancelError);\n            } else {\n              queuedRequest.done();\n              reject(err);\n            }\n          });\n          return () => {\n            cancelError = createCancelError();\n          };\n        }, queueOptions);\n      });\n\n      outerPromise.abort = () => {\n        queuedRequest.abort();\n      };\n\n      return outerPromise;\n    };\n  }\n\n  resume() {\n    _classPrivateFieldLooseBase(this, _paused)[_paused] = false;\n    clearTimeout(_classPrivateFieldLooseBase(this, _pauseTimer)[_pauseTimer]);\n\n    for (let i = 0; i < this.limit; i++) {\n      _classPrivateFieldLooseBase(this, _queueNext)[_queueNext]();\n    }\n  }\n\n  /**\n   * Freezes the queue for a while or indefinitely.\n   *\n   * @param {number | null } [duration] Duration for the pause to happen, in milliseconds.\n   *                                    If omitted, the queue won't resume automatically.\n   */\n  pause(duration) {\n    if (duration === void 0) {\n      duration = null;\n    }\n\n    _classPrivateFieldLooseBase(this, _paused)[_paused] = true;\n    clearTimeout(_classPrivateFieldLooseBase(this, _pauseTimer)[_pauseTimer]);\n\n    if (duration != null) {\n      _classPrivateFieldLooseBase(this, _pauseTimer)[_pauseTimer] = setTimeout(_classPrivateFieldLooseBase(this, _resume)[_resume], duration);\n    }\n  }\n  /**\n   * Pauses the queue for a duration, and lower the limit of concurrent requests\n   * when the queue resumes. When the queue resumes, it tries to progressively\n   * increase the limit in `this.#increaseLimit` until another call is made to\n   * `this.rateLimit`.\n   * Call this function when using the RateLimitedQueue for network requests and\n   * the remote server responds with 429 HTTP code.\n   *\n   * @param {number} duration in milliseconds.\n   */\n\n\n  rateLimit(duration) {\n    clearTimeout(_classPrivateFieldLooseBase(this, _rateLimitingTimer)[_rateLimitingTimer]);\n    this.pause(duration);\n\n    if (this.limit > 1 && Number.isFinite(this.limit)) {\n      _classPrivateFieldLooseBase(this, _upperLimit)[_upperLimit] = this.limit - 1;\n      this.limit = _classPrivateFieldLooseBase(this, _downLimit)[_downLimit];\n      _classPrivateFieldLooseBase(this, _rateLimitingTimer)[_rateLimitingTimer] = setTimeout(_classPrivateFieldLooseBase(this, _increaseLimit)[_increaseLimit], duration);\n    }\n  }\n\n  get isPaused() {\n    return _classPrivateFieldLooseBase(this, _paused)[_paused];\n  }\n\n}\n\nfunction _call2(fn) {\n  _classPrivateFieldLooseBase(this, _activeRequests)[_activeRequests] += 1;\n  let done = false;\n  let cancelActive;\n\n  try {\n    cancelActive = fn();\n  } catch (err) {\n    _classPrivateFieldLooseBase(this, _activeRequests)[_activeRequests] -= 1;\n    throw err;\n  }\n\n  return {\n    abort: () => {\n      if (done) return;\n      done = true;\n      _classPrivateFieldLooseBase(this, _activeRequests)[_activeRequests] -= 1;\n      cancelActive();\n\n      _classPrivateFieldLooseBase(this, _queueNext)[_queueNext]();\n    },\n    done: () => {\n      if (done) return;\n      done = true;\n      _classPrivateFieldLooseBase(this, _activeRequests)[_activeRequests] -= 1;\n\n      _classPrivateFieldLooseBase(this, _queueNext)[_queueNext]();\n    }\n  };\n}\n\nfunction _queueNext2() {\n  // Do it soon but not immediately, this allows clearing out the entire queue synchronously\n  // one by one without continuously _advancing_ it (and starting new tasks before immediately\n  // aborting them)\n  queueMicrotask(() => _classPrivateFieldLooseBase(this, _next)[_next]());\n}\n\nfunction _next2() {\n  if (_classPrivateFieldLooseBase(this, _paused)[_paused] || _classPrivateFieldLooseBase(this, _activeRequests)[_activeRequests] >= this.limit) {\n    return;\n  }\n\n  if (_classPrivateFieldLooseBase(this, _queuedHandlers)[_queuedHandlers].length === 0) {\n    return;\n  } // Dispatch the next request, and update the abort/done handlers\n  // so that cancelling it does the Right Thing (and doesn't just try\n  // to dequeue an already-running request).\n\n\n  const next = _classPrivateFieldLooseBase(this, _queuedHandlers)[_queuedHandlers].shift();\n\n  const handler = _classPrivateFieldLooseBase(this, _call)[_call](next.fn);\n\n  next.abort = handler.abort;\n  next.done = handler.done;\n}\n\nfunction _queue2(fn, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  const handler = {\n    fn,\n    priority: options.priority || 0,\n    abort: () => {\n      _classPrivateFieldLooseBase(this, _dequeue)[_dequeue](handler);\n    },\n    done: () => {\n      throw new Error('Cannot mark a queued request as done: this indicates a bug');\n    }\n  };\n\n  const index = _classPrivateFieldLooseBase(this, _queuedHandlers)[_queuedHandlers].findIndex(other => {\n    return handler.priority > other.priority;\n  });\n\n  if (index === -1) {\n    _classPrivateFieldLooseBase(this, _queuedHandlers)[_queuedHandlers].push(handler);\n  } else {\n    _classPrivateFieldLooseBase(this, _queuedHandlers)[_queuedHandlers].splice(index, 0, handler);\n  }\n\n  return handler;\n}\n\nfunction _dequeue2(handler) {\n  const index = _classPrivateFieldLooseBase(this, _queuedHandlers)[_queuedHandlers].indexOf(handler);\n\n  if (index !== -1) {\n    _classPrivateFieldLooseBase(this, _queuedHandlers)[_queuedHandlers].splice(index, 1);\n  }\n}\n\nexport const internalRateLimitedQueue = Symbol('__queue');"],"mappings":"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"},"metadata":{},"sourceType":"module"}