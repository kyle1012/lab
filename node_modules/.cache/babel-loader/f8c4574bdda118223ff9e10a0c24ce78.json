{"ast":null,"code":"import { mergeProps as _mergeProps, createVNode as _createVNode } from \"vue\";\n// Styles\nimport \"./VMenu.css\";\n\n// Components\nimport { VDialogTransition } from \"../transitions/index.mjs\";\nimport { VDefaultsProvider } from \"../VDefaultsProvider/index.mjs\";\nimport { VOverlay } from \"../VOverlay/index.mjs\"; // Composables\nimport { makeTransitionProps } from \"../../composables/transition.mjs\";\nimport { forwardRefs } from \"../../composables/forwardRefs.mjs\";\nimport { useProxiedModel } from \"../../composables/proxiedModel.mjs\";\nimport { useScopeId } from \"../../composables/scopeId.mjs\"; // Utilities\nimport { computed, inject, provide, ref, watch } from 'vue';\nimport { genericComponent, getUid, useRender } from \"../../util/index.mjs\";\nimport { VMenuSymbol } from \"./shared.mjs\";\nexport const VMenu = genericComponent()({\n  name: 'VMenu',\n  inheritAttrs: false,\n  props: {\n    // TODO\n    // disableKeys: Boolean,\n    modelValue: Boolean,\n    id: String,\n    ...makeTransitionProps({\n      transition: {\n        component: VDialogTransition\n      }\n    })\n  },\n  emits: {\n    'update:modelValue': value => true\n  },\n  setup(props, _ref) {\n    let {\n      attrs,\n      slots\n    } = _ref;\n    const isActive = useProxiedModel(props, 'modelValue');\n    const {\n      scopeId\n    } = useScopeId();\n    const uid = getUid();\n    const id = computed(() => props.id || `v-menu-${uid}`);\n    const overlay = ref();\n    const parent = inject(VMenuSymbol, null);\n    let openChildren = 0;\n    provide(VMenuSymbol, {\n      register() {\n        ++openChildren;\n      },\n      unregister() {\n        --openChildren;\n      },\n      closeParents() {\n        setTimeout(() => {\n          if (!openChildren) {\n            isActive.value = false;\n            parent == null ? void 0 : parent.closeParents();\n          }\n        }, 40);\n      }\n    });\n    watch(isActive, val => {\n      val ? parent == null ? void 0 : parent.register() : parent == null ? void 0 : parent.unregister();\n    });\n    function onClickOutside() {\n      parent == null ? void 0 : parent.closeParents();\n    }\n    useRender(() => _createVNode(VOverlay, _mergeProps({\n      \"ref\": overlay,\n      \"modelValue\": isActive.value,\n      \"onUpdate:modelValue\": $event => isActive.value = $event,\n      \"class\": ['v-menu'],\n      \"transition\": props.transition,\n      \"absolute\": true,\n      \"closeOnContentClick\": true,\n      \"locationStrategy\": \"connected\",\n      \"scrollStrategy\": \"reposition\",\n      \"scrim\": false,\n      \"openDelay\": \"300\",\n      \"closeDelay\": \"250\",\n      \"activatorProps\": {\n        'aria-haspopup': 'menu',\n        'aria-expanded': String(isActive.value),\n        'aria-owns': id.value\n      },\n      \"onClick:outside\": onClickOutside\n    }, scopeId, attrs), {\n      activator: slots.activator,\n      default: function () {\n        var _slots$default;\n        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n        return _createVNode(VDefaultsProvider, {\n          \"root\": true\n        }, {\n          default: () => [(_slots$default = slots.default) == null ? void 0 : _slots$default.call(slots, ...args)]\n        });\n      }\n    }));\n    return forwardRefs({\n      id\n    }, overlay);\n  }\n});","map":{"version":3,"mappings":";AAAA;AACA;;AAEA;AAAA,SACSA,iBAAiB;AAAA,SACjBC,iBAAiB;AAAA,SACjBC,QAAQ,iCAEjB;AAAA,SACSC,mBAAmB;AAAA,SACnBC,WAAW;AAAA,SACXC,eAAe;AAAA,SACfC,UAAU,yCAEnB;AACA,SAASC,QAAQ,EAAEC,MAAM,EAAEC,OAAO,EAAEC,GAAG,EAAEC,KAAK,QAAQ,KAAK;AAAA,SAClDC,gBAAgB,EAAEC,MAAM,EAAEC,SAAS;AAAA,SACnCC,WAAW;AAEpB,OAAO,MAAMC,KAAK,GAAGJ,gBAAgB,EAEjC,CAAC;EACHK,IAAI,EAAE,OAAO;EAEbC,YAAY,EAAE,KAAK;EAEnBC,KAAK,EAAE;IACL;IACA;IACAC,UAAU,EAAEC,OAAO;IACnBC,EAAE,EAAEC,MAAM;IAEV,GAAGpB,mBAAmB,CAAC;MACrBqB,UAAU,EAAE;QAAEC,SAAS,EAAEzB;MAAkB;IAC7C,CAAC;EACH,CAAC;EAED0B,KAAK,EAAE;IACL,mBAAmB,EAAGC,KAAc,IAAK;EAC3C,CAAC;EAEDC,KAAK,CAAET,KAAK,QAAoB;IAAA,IAAlB;MAAEU,KAAK;MAAEC;IAAM,CAAC;IAC5B,MAAMC,QAAQ,GAAG1B,eAAe,CAACc,KAAK,EAAE,YAAY,CAAC;IACrD,MAAM;MAAEa;IAAQ,CAAC,GAAG1B,UAAU,EAAE;IAEhC,MAAM2B,GAAG,GAAGpB,MAAM,EAAE;IACpB,MAAMS,EAAE,GAAGf,QAAQ,CAAC,MAAMY,KAAK,CAACG,EAAE,IAAK,UAASW,GAAI,EAAC,CAAC;IAEtD,MAAMC,OAAO,GAAGxB,GAAG,EAAY;IAE/B,MAAMyB,MAAM,GAAG3B,MAAM,CAACO,WAAW,EAAE,IAAI,CAAC;IACxC,IAAIqB,YAAY,GAAG,CAAC;IACpB3B,OAAO,CAACM,WAAW,EAAE;MACnBsB,QAAQ,GAAI;QACV,EAAED,YAAY;MAChB,CAAC;MACDE,UAAU,GAAI;QACZ,EAAEF,YAAY;MAChB,CAAC;MACDG,YAAY,GAAI;QACdC,UAAU,CAAC,MAAM;UACf,IAAI,CAACJ,YAAY,EAAE;YACjBL,QAAQ,CAACJ,KAAK,GAAG,KAAK;YACtBQ,MAAM,oBAANA,MAAM,CAAEI,YAAY,EAAE;UACxB;QACF,CAAC,EAAE,EAAE,CAAC;MACR;IACF,CAAC,CAAC;IAEF5B,KAAK,CAACoB,QAAQ,EAAEU,GAAG,IAAI;MACrBA,GAAG,GAAGN,MAAM,oBAANA,MAAM,CAAEE,QAAQ,EAAE,GAAGF,MAAM,oBAANA,MAAM,CAAEG,UAAU,EAAE;IACjD,CAAC,CAAC;IAEF,SAASI,cAAc,GAAI;MACzBP,MAAM,oBAANA,MAAM,CAAEI,YAAY,EAAE;IACxB;IAEAzB,SAAS,CAAC;MAAA,OAEAoB,OAAO;MAAA,cACHH,QAAQ,CAACJ,KAAK;MAAA,iCAAdI,QAAQ,CAACJ,KAAK;MAAA,SACjB,CACL,QAAQ,CACT;MAAA,cACYR,KAAK,CAACK,UAAU;MAAA;MAAA;MAAA,oBAGZ,WAAW;MAAA,kBACb,YAAY;MAAA,SACnB,KAAK;MAAA,aACH,KAAK;MAAA,cACJ,KAAK;MAAA,kBACA;QACd,eAAe,EAAE,MAAM;QACvB,eAAe,EAAED,MAAM,CAACQ,QAAQ,CAACJ,KAAK,CAAC;QACvC,WAAW,EAAEL,EAAE,CAACK;MAClB,CAAC;MAAA,mBACiBe;IAAc,GAC3BV,OAAO,EACPH,KAAK;MAGRc,SAAS,EAAEb,KAAK,CAACa,SAAS;MAC1BC,OAAO,EAAE;QAAA;QAAA,kCAAIC,IAAI;UAAJA,IAAI;QAAA;QAAA;UAAA;QAAA;UAAAD,kCAEXd,KAAK,CAACc,OAAO,qBAAbE,yBAAK,EAAW,GAAGD,IAAI,CAAC;QAAA;MAAA;IAE7B,EAGN,CAAC;IAEF,OAAOzC,WAAW,CAAC;MAAEkB;IAAG,CAAC,EAAEY,OAAO,CAAC;EACrC;AACF,CAAC,CAAC","names":["VDialogTransition","VDefaultsProvider","VOverlay","makeTransitionProps","forwardRefs","useProxiedModel","useScopeId","computed","inject","provide","ref","watch","genericComponent","getUid","useRender","VMenuSymbol","VMenu","name","inheritAttrs","props","modelValue","Boolean","id","String","transition","component","emits","value","setup","attrs","slots","isActive","scopeId","uid","overlay","parent","openChildren","register","unregister","closeParents","setTimeout","val","onClickOutside","activator","default","args","_slots$default"],"sources":["../../../src/components/VMenu/VMenu.tsx"],"sourcesContent":["// Styles\nimport './VMenu.sass'\n\n// Components\nimport { VDialogTransition } from '@/components/transitions'\nimport { VDefaultsProvider } from '@/components/VDefaultsProvider'\nimport { VOverlay } from '@/components/VOverlay'\n\n// Composables\nimport { makeTransitionProps } from '@/composables/transition'\nimport { forwardRefs } from '@/composables/forwardRefs'\nimport { useProxiedModel } from '@/composables/proxiedModel'\nimport { useScopeId } from '@/composables/scopeId'\n\n// Utilities\nimport { computed, inject, provide, ref, watch } from 'vue'\nimport { genericComponent, getUid, useRender } from '@/util'\nimport { VMenuSymbol } from './shared'\n\nexport const VMenu = genericComponent<new () => {\n  $props: VOverlay['$props']\n}>()({\n  name: 'VMenu',\n\n  inheritAttrs: false,\n\n  props: {\n    // TODO\n    // disableKeys: Boolean,\n    modelValue: Boolean,\n    id: String,\n\n    ...makeTransitionProps({\n      transition: { component: VDialogTransition },\n    } as const),\n  },\n\n  emits: {\n    'update:modelValue': (value: boolean) => true,\n  },\n\n  setup (props, { attrs, slots }) {\n    const isActive = useProxiedModel(props, 'modelValue')\n    const { scopeId } = useScopeId()\n\n    const uid = getUid()\n    const id = computed(() => props.id || `v-menu-${uid}`)\n\n    const overlay = ref<VOverlay>()\n\n    const parent = inject(VMenuSymbol, null)\n    let openChildren = 0\n    provide(VMenuSymbol, {\n      register () {\n        ++openChildren\n      },\n      unregister () {\n        --openChildren\n      },\n      closeParents () {\n        setTimeout(() => {\n          if (!openChildren) {\n            isActive.value = false\n            parent?.closeParents()\n          }\n        }, 40)\n      },\n    })\n\n    watch(isActive, val => {\n      val ? parent?.register() : parent?.unregister()\n    })\n\n    function onClickOutside () {\n      parent?.closeParents()\n    }\n\n    useRender(() => (\n      <VOverlay\n        ref={ overlay }\n        v-model={ isActive.value }\n        class={[\n          'v-menu',\n        ]}\n        transition={ props.transition }\n        absolute\n        closeOnContentClick\n        locationStrategy=\"connected\"\n        scrollStrategy=\"reposition\"\n        scrim={ false }\n        openDelay=\"300\"\n        closeDelay=\"250\"\n        activatorProps={{\n          'aria-haspopup': 'menu',\n          'aria-expanded': String(isActive.value),\n          'aria-owns': id.value,\n        }}\n        onClick:outside={ onClickOutside }\n        { ...scopeId }\n        { ...attrs }\n      >\n        {{\n          activator: slots.activator,\n          default: (...args) => (\n            <VDefaultsProvider root>\n              { slots.default?.(...args) }\n            </VDefaultsProvider>\n          ),\n        }}\n      </VOverlay>\n    ))\n\n    return forwardRefs({ id }, overlay)\n  },\n})\n\nexport type VMenu = InstanceType<typeof VMenu>\n"]},"metadata":{},"sourceType":"module"}