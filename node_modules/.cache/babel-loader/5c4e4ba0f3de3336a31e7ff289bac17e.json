{"ast":null,"code":"import { createElementVNode as _createElementVNode, toDisplayString as _toDisplayString, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, vModelText as _vModelText, resolveDirective as _resolveDirective, withDirectives as _withDirectives, withModifiers as _withModifiers, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-ef68022e\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"h2\", null, \"Log In\", -1 /* HOISTED */));\nconst _hoisted_2 = {\n  key: 0,\n  class: \"alert-danger\"\n};\nconst _hoisted_3 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"button\", {\n  type: \"submit\"\n}, \"Login\", -1 /* HOISTED */));\nconst _hoisted_4 = {\n  key: 0,\n  class: \"alert-danger\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _directive_validate = _resolveDirective(\"validate\");\n  return _openBlock(), _createElementBlock(\"div\", null, [_hoisted_1, _ctx.errorState ? (_openBlock(), _createElementBlock(\"div\", _hoisted_2, [_createElementVNode(\"p\", null, _toDisplayString(_ctx.errorState), 1 /* TEXT */)])) : _createCommentVNode(\"v-if\", true), _createElementVNode(\"form\", {\n    onSubmit: _cache[2] || (_cache[2] = _withModifiers((...args) => $options.onSubmit && $options.onSubmit(...args), [\"prevent\"]))\n  }, [_withDirectives(_createElementVNode(\"input\", {\n    name: \"uid\",\n    placeholder: \"Enter your ID\",\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => _ctx.uid = $event)\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, _ctx.uid], [_directive_validate, 'required']]), _withDirectives(_createElementVNode(\"input\", {\n    name: \"password\",\n    placeholder: \"Enter your password\",\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => _ctx.password = $event),\n    type: \"password\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, _ctx.password], [_directive_validate, 'required|min:6']]), _hoisted_3, _ctx.errors.has('password') ? (_openBlock(), _createElementBlock(\"div\", _hoisted_4, _toDisplayString(_ctx.errors.first('password')), 1 /* TEXT */)) : _createCommentVNode(\"v-if\", true)], 32 /* HYDRATE_EVENTS */)]);\n}","map":{"version":3,"mappings":";;gEAEMA,oBAAe,YAAX,QAAM;;;EACLC,KAAK,EAAC;;gEAMPD,oBAAoC;EAA5BE,IAAI,EAAC;AAAQ,GAAC,OAAK;;;EACtBD,KAAK,EAAC;;;;uBATnBE,oBAWM,cAVFC,UAAe,EACiBC,eAAU,kBAA1CF,oBAEM,OAFNG,UAEM,GADJN,oBAAuB,4BAAjBK,eAAU,yDAElBL,oBAKO;IALAO,QAAM,wDAAUC,+CAAQ;sBAC3BR,oBAAoF;IAA7ES,IAAI,EAAC,KAAK;IAACC,WAAW,EAAC,eAAe;+DAAUL,QAAG;iDAAHA,QAAG,yBAAc,UAAU,qBAClFL,oBAA0H;IAAnHS,IAAI,EAAC,UAAU;IAACC,WAAW,EAAC,qBAAqB;+DAAUL,aAAQ;IAAEH,IAAI,EAAC;iDAAfG,aAAQ,yBAA8B,gBAAgB,KACxHM,UAAoC,EACJN,WAAM,CAACO,GAAG,8BAA1CT,oBAA0F,OAA1FU,UAA0F,mBAAhCR,WAAM,CAACS,KAAK","names":["_createElementVNode","class","type","_createElementBlock","_hoisted_1","_ctx","_hoisted_2","onSubmit","$options","name","placeholder","_hoisted_3","has","_hoisted_4","first"],"sourceRoot":"","sources":["/lab/src/components/Login.vue"],"sourcesContent":["<template>\n  <div>\n      <h2>Log In</h2>\n      <div class=\"alert-danger\" v-if=\"errorState\">\n        <p>{{ errorState }}</p>\n      </div>\n      <form @submit.prevent=\"onSubmit\">\n          <input name=\"uid\" placeholder=\"Enter your ID\" v-model=\"uid\" v-validate=\"'required'\">\n          <input name=\"password\" placeholder=\"Enter your password\" v-model=\"password\" type=\"password\" v-validate=\"'required|min:6'\">\n          <button type=\"submit\">Login</button>\n          <div class=\"alert-danger\" v-if=\"errors.has('password')\">{{errors.first('password')}}</div>\n      </form>\n  </div>\n</template>\n\n<script>\nimport { mapActions, mapGetters } from 'vuex'\nexport default {\n  name: 'Login',\n  data: () => ({\n    uid: '',\n    password: ''\n  }),\n  methods: {\n    ...mapActions(['login']),\n    async onSubmit () {\n      this.$validator.validateAll()\n      if (!this.errors.any()) {\n        try {\n          let loginResult = await this.login({ uid: this.uid, password: this.password })\n          if (loginResult) this.goToPages()\n        } catch (err) {\n          console.error(err)\n        }\n      } else {\n        console.log('validate err')\n      }\n    },\n    goToPages () {\n      this.$router.push({\n        name: 'HelloWorld'\n      })\n    }\n  },\n  computed: {\n    ...mapGetters({\n      errorState: 'getErrorState'\n    })\n  }\n}\n</script>\n\n<style scoped>\n.alert-danger {\n  color: red;\n}\n</style>"]},"metadata":{},"sourceType":"module"}