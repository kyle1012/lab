{"ast":null,"code":"import { createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, withModifiers as _withModifiers, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-469af010\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  key: 0,\n  class: \"image-container mb-3\"\n};\nconst _hoisted_2 = [\"src\"];\nconst _hoisted_3 = {\n  class: \"form-group\"\n};\nconst _hoisted_4 = {\n  ref: \"dashboardContainer\"\n};\nconst _hoisted_5 = [\"disabled\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"form\", null, [$data.previewPath ? (_openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"img\", {\n    src: $data.previewPath,\n    alt: \"Uploaded Image Preview\"\n  }, null, 8 /* PROPS */, _hoisted_2)])) : _createCommentVNode(\"v-if\", true), _createElementVNode(\"div\", _hoisted_3, [_createElementVNode(\"div\", _hoisted_4, null, 512 /* NEED_PATCH */)]), _createElementVNode(\"button\", {\n    disabled: $data.disabled,\n    onClick: _cache[0] || (_cache[0] = _withModifiers((...args) => $options.confirmUpload && $options.confirmUpload(...args), [\"prevent\"])),\n    class: \"btn btn-primary btn-block mb-2\"\n  }, \"Confirm upload\", 8 /* PROPS */, _hoisted_5)]);\n}","map":{"version":3,"mappings":";;;;EAEWA,KAAK,EAAC;;;;EAGNA,KAAK,EAAC;AAAY;;EACdC,GAAG,EAAC;AAAoB;;;uBALrCC,oBAQO,eAPqCC,iBAAW,kBAAnDD,oBAEM,OAFNE,UAEM,GADFC,oBAAqD;IAA/CC,GAAG,EAAEH,iBAAW;IAAEI,GAAG,EAAC;8EAEhCF,oBAEM,OAFNG,UAEM,GADFH,oBAAoC,OAApCI,UAAoC,iCAExCJ,oBAA0H;IAAjHK,QAAQ,EAAEP,cAAQ;IAAGQ,OAAK,wDAAUC,yDAAa;IAAEZ,KAAK,EAAC;KAAiC,gBAAc","names":["class","ref","_createElementBlock","$data","_hoisted_1","_createElementVNode","src","alt","_hoisted_3","_hoisted_4","disabled","onClick","$options"],"sourceRoot":"","sources":["/lab/src/components/HelloWorld.vue"],"sourcesContent":["<template>\n  <form>\n      <div class=\"image-container mb-3\" v-if=\"previewPath\">\n          <img :src=\"previewPath\" alt=\"Uploaded Image Preview\">\n      </div>\n      <div class=\"form-group\">\n          <div ref=\"dashboardContainer\"></div>\n      </div>\n      <button :disabled=\"disabled\" @click.prevent=\"confirmUpload\" class=\"btn btn-primary btn-block mb-2\">Confirm upload</button>\n  </form>\n</template>\n\n<script>\n    import Uppy from '@uppy/core';\n    import XHRUpload from '@uppy/xhr-upload';\n    import Dashboard from '@uppy/dashboard';\n    import Form from '@uppy/form';\n\n    import notify from './mixins/noty';\n\n    import '@uppy/core/dist/style.css';\n    import '@uppy/dashboard/dist/style.css';\n\n    export default {\n        props: {\n            maxFileSizeInBytes: {\n                type: Number,\n                required: true\n            }\n        },\n        mixins: [notify],\n        data() {\n            return {\n                payload: null,\n                previewPath: null,\n                disabled: true\n            }\n        },\n        mounted() {\n            this.instantiateUppy()\n        },\n        methods: {\n            instantiateUppy() {\n                this.uppy = Uppy({\n                    debug: true,\n                    autoProceed: true,\n                    restrictions: {\n                        maxFileSize: this.maxFileSizeInBytes,\n                        minNumberOfFiles: 1,\n                        maxNumberOfFiles: 1,\n                        allowedFileTypes: ['image/*', 'video/*', 'application/msword', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document', 'application/pdf']\n                    }\n                })\n                    .use(Dashboard, {\n                        hideUploadButton: true,\n                        inline: true,\n                        height: 450,\n                        target: this.$refs.dashboardContainer,\n                        replaceTargetContent: true,\n                        showProgressDetails: true,\n                        browserBackButtonClose: true\n\n                    })\n                    .use(XHRUpload, {\n                        limit: 10,\n                        endpoint: 'http://10.1.30.202:5000/upload',\n                        formData: true,\n                        fieldName: 'file',\n                        }\n                    );\n\n                this.uppy.on('complete', (event) => {\n                    if(event.successful[0] !== undefined) {\n                        this.payload = event.successful[0].response.body.path;\n\n                        this.disabled = false;\n                    }\n                });\n            },\n            updatePreviewPath({path}) {\n                this.previewPath = path;\n\n                return this;\n            },\n            resetUploader() {\n                this.uppy.reset();\n                this.disabled = true;\n\n                return this;\n            },\n            confirmUpload() {\n                if(this.payload) {\n                    this.disabled = true;\n                    axios.post('/store', { file: this.payload })\n                        .then(({ data }) => {\n                            this.updatePreviewPath(data)\n                                .resetUploader()\n                                .notify('success', 'Upload Successful!');\n                        })\n                        .catch(err => {\n                            console.error(err);\n\n                            this.resetUploader();\n                        })\n                    ;\n                } else notify('warning', `You don't have any file in processing`);\n\n            }\n        }\n    };\n</script>\n\n<style scoped>\n    .image-container {\n        height: 150px;\n        width: 150px;\n        border-radius: 50%;\n        overflow: hidden;\n        margin-right: auto;\n        margin-left: auto;\n    }\n\n    .image-container > img {\n        width: inherit;\n        height: inherit;\n    }\n</style>"]},"metadata":{},"sourceType":"module"}