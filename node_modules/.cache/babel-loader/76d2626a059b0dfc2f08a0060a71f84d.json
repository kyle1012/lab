{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nfunction _classPrivateFieldLooseBase(receiver, privateKey) {\n  if (!Object.prototype.hasOwnProperty.call(receiver, privateKey)) {\n    throw new TypeError(\"attempted to use private field on non-instance\");\n  }\n  return receiver;\n}\nvar id = 0;\nfunction _classPrivateFieldLooseKey(name) {\n  return \"__private_\" + id++ + \"_\" + name;\n}\nimport has from './hasProperty.js';\nfunction insertReplacement(source, rx, replacement) {\n  const newParts = [];\n  source.forEach(chunk => {\n    // When the source contains multiple placeholders for interpolation,\n    // we should ignore chunks that are not strings, because those\n    // can be JSX objects and will be otherwise incorrectly turned into strings.\n    // Without this condition we’d get this: [object Object] hello [object Object] my <button>\n    if (typeof chunk !== 'string') {\n      return newParts.push(chunk);\n    }\n    return rx[Symbol.split](chunk).forEach((raw, i, list) => {\n      if (raw !== '') {\n        newParts.push(raw);\n      } // Interlace with the `replacement` value\n\n      if (i < list.length - 1) {\n        newParts.push(replacement);\n      }\n    });\n  });\n  return newParts;\n}\n/**\n * Takes a string with placeholder variables like `%{smart_count} file selected`\n * and replaces it with values from options `{smart_count: 5}`\n *\n * @license https://github.com/airbnb/polyglot.js/blob/master/LICENSE\n * taken from https://github.com/airbnb/polyglot.js/blob/master/lib/polyglot.js#L299\n *\n * @param {string} phrase that needs interpolation, with placeholders\n * @param {object} options with values that will be used to replace placeholders\n * @returns {any[]} interpolated\n */\n\nfunction interpolate(phrase, options) {\n  const dollarRegex = /\\$/g;\n  const dollarBillsYall = '$$$$';\n  let interpolated = [phrase];\n  if (options == null) return interpolated;\n  for (const arg of Object.keys(options)) {\n    if (arg !== '_') {\n      // Ensure replacement value is escaped to prevent special $-prefixed\n      // regex replace tokens. the \"$$$$\" is needed because each \"$\" needs to\n      // be escaped with \"$\" itself, and we need two in the resulting output.\n      let replacement = options[arg];\n      if (typeof replacement === 'string') {\n        replacement = dollarRegex[Symbol.replace](replacement, dollarBillsYall);\n      } // We create a new `RegExp` each time instead of using a more-efficient\n      // string replace so that the same argument can be replaced multiple times\n      // in the same phrase.\n\n      interpolated = insertReplacement(interpolated, new RegExp(`%\\\\{${arg}\\\\}`, 'g'), replacement);\n    }\n  }\n  return interpolated;\n}\n/**\n * Translates strings with interpolation & pluralization support.\n * Extensible with custom dictionaries and pluralization functions.\n *\n * Borrows heavily from and inspired by Polyglot https://github.com/airbnb/polyglot.js,\n * basically a stripped-down version of it. Differences: pluralization functions are not hardcoded\n * and can be easily added among with dictionaries, nested objects are used for pluralization\n * as opposed to `||||` delimeter\n *\n * Usage example: `translator.translate('files_chosen', {smart_count: 3})`\n */\n\nvar _apply = /*#__PURE__*/_classPrivateFieldLooseKey(\"apply\");\nexport default class Translator {\n  /**\n   * @param {object|Array<object>} locales - locale or list of locales.\n   */\n  constructor(locales) {\n    Object.defineProperty(this, _apply, {\n      value: _apply2\n    });\n    this.locale = {\n      strings: {},\n      pluralize(n) {\n        if (n === 1) {\n          return 0;\n        }\n        return 1;\n      }\n    };\n    if (Array.isArray(locales)) {\n      locales.forEach(_classPrivateFieldLooseBase(this, _apply)[_apply], this);\n    } else {\n      _classPrivateFieldLooseBase(this, _apply)[_apply](locales);\n    }\n  }\n\n  /**\n   * Public translate method\n   *\n   * @param {string} key\n   * @param {object} options with values that will be used later to replace placeholders in string\n   * @returns {string} translated (and interpolated)\n   */\n  translate(key, options) {\n    return this.translateArray(key, options).join('');\n  }\n  /**\n   * Get a translation and return the translated and interpolated parts as an array.\n   *\n   * @param {string} key\n   * @param {object} options with values that will be used to replace placeholders\n   * @returns {Array} The translated and interpolated parts, in order.\n   */\n\n  translateArray(key, options) {\n    if (!has(this.locale.strings, key)) {\n      throw new Error(`missing string: ${key}`);\n    }\n    const string = this.locale.strings[key];\n    const hasPluralForms = typeof string === 'object';\n    if (hasPluralForms) {\n      if (options && typeof options.smart_count !== 'undefined') {\n        const plural = this.locale.pluralize(options.smart_count);\n        return interpolate(string[plural], options);\n      }\n      throw new Error('Attempted to use a string with plural forms, but no value was given for %{smart_count}');\n    }\n    return interpolate(string, options);\n  }\n}\nfunction _apply2(locale) {\n  if (!(locale != null && locale.strings)) {\n    return;\n  }\n  const prevLocale = this.locale;\n  this.locale = {\n    ...prevLocale,\n    strings: {\n      ...prevLocale.strings,\n      ...locale.strings\n    }\n  };\n  this.locale.pluralize = locale.pluralize || prevLocale.pluralize;\n}","map":{"version":3,"names":["_classPrivateFieldLooseBase","receiver","privateKey","Object","prototype","hasOwnProperty","call","TypeError","id","_classPrivateFieldLooseKey","name","has","insertReplacement","source","rx","replacement","newParts","forEach","chunk","push","Symbol","split","raw","i","list","length","interpolate","phrase","options","dollarRegex","dollarBillsYall","interpolated","arg","keys","replace","RegExp","_apply","Translator","constructor","locales","defineProperty","value","_apply2","locale","strings","pluralize","n","Array","isArray","translate","key","translateArray","join","Error","string","hasPluralForms","smart_count","plural","prevLocale"],"sources":["/lab/node_modules/@uppy/utils/lib/Translator.js"],"sourcesContent":["function _classPrivateFieldLooseBase(receiver, privateKey) { if (!Object.prototype.hasOwnProperty.call(receiver, privateKey)) { throw new TypeError(\"attempted to use private field on non-instance\"); } return receiver; }\n\nvar id = 0;\n\nfunction _classPrivateFieldLooseKey(name) { return \"__private_\" + id++ + \"_\" + name; }\n\nimport has from './hasProperty.js';\n\nfunction insertReplacement(source, rx, replacement) {\n  const newParts = [];\n  source.forEach(chunk => {\n    // When the source contains multiple placeholders for interpolation,\n    // we should ignore chunks that are not strings, because those\n    // can be JSX objects and will be otherwise incorrectly turned into strings.\n    // Without this condition we’d get this: [object Object] hello [object Object] my <button>\n    if (typeof chunk !== 'string') {\n      return newParts.push(chunk);\n    }\n\n    return rx[Symbol.split](chunk).forEach((raw, i, list) => {\n      if (raw !== '') {\n        newParts.push(raw);\n      } // Interlace with the `replacement` value\n\n\n      if (i < list.length - 1) {\n        newParts.push(replacement);\n      }\n    });\n  });\n  return newParts;\n}\n/**\n * Takes a string with placeholder variables like `%{smart_count} file selected`\n * and replaces it with values from options `{smart_count: 5}`\n *\n * @license https://github.com/airbnb/polyglot.js/blob/master/LICENSE\n * taken from https://github.com/airbnb/polyglot.js/blob/master/lib/polyglot.js#L299\n *\n * @param {string} phrase that needs interpolation, with placeholders\n * @param {object} options with values that will be used to replace placeholders\n * @returns {any[]} interpolated\n */\n\n\nfunction interpolate(phrase, options) {\n  const dollarRegex = /\\$/g;\n  const dollarBillsYall = '$$$$';\n  let interpolated = [phrase];\n  if (options == null) return interpolated;\n\n  for (const arg of Object.keys(options)) {\n    if (arg !== '_') {\n      // Ensure replacement value is escaped to prevent special $-prefixed\n      // regex replace tokens. the \"$$$$\" is needed because each \"$\" needs to\n      // be escaped with \"$\" itself, and we need two in the resulting output.\n      let replacement = options[arg];\n\n      if (typeof replacement === 'string') {\n        replacement = dollarRegex[Symbol.replace](replacement, dollarBillsYall);\n      } // We create a new `RegExp` each time instead of using a more-efficient\n      // string replace so that the same argument can be replaced multiple times\n      // in the same phrase.\n\n\n      interpolated = insertReplacement(interpolated, new RegExp(`%\\\\{${arg}\\\\}`, 'g'), replacement);\n    }\n  }\n\n  return interpolated;\n}\n/**\n * Translates strings with interpolation & pluralization support.\n * Extensible with custom dictionaries and pluralization functions.\n *\n * Borrows heavily from and inspired by Polyglot https://github.com/airbnb/polyglot.js,\n * basically a stripped-down version of it. Differences: pluralization functions are not hardcoded\n * and can be easily added among with dictionaries, nested objects are used for pluralization\n * as opposed to `||||` delimeter\n *\n * Usage example: `translator.translate('files_chosen', {smart_count: 3})`\n */\n\n\nvar _apply = /*#__PURE__*/_classPrivateFieldLooseKey(\"apply\");\n\nexport default class Translator {\n  /**\n   * @param {object|Array<object>} locales - locale or list of locales.\n   */\n  constructor(locales) {\n    Object.defineProperty(this, _apply, {\n      value: _apply2\n    });\n    this.locale = {\n      strings: {},\n\n      pluralize(n) {\n        if (n === 1) {\n          return 0;\n        }\n\n        return 1;\n      }\n\n    };\n\n    if (Array.isArray(locales)) {\n      locales.forEach(_classPrivateFieldLooseBase(this, _apply)[_apply], this);\n    } else {\n      _classPrivateFieldLooseBase(this, _apply)[_apply](locales);\n    }\n  }\n\n  /**\n   * Public translate method\n   *\n   * @param {string} key\n   * @param {object} options with values that will be used later to replace placeholders in string\n   * @returns {string} translated (and interpolated)\n   */\n  translate(key, options) {\n    return this.translateArray(key, options).join('');\n  }\n  /**\n   * Get a translation and return the translated and interpolated parts as an array.\n   *\n   * @param {string} key\n   * @param {object} options with values that will be used to replace placeholders\n   * @returns {Array} The translated and interpolated parts, in order.\n   */\n\n\n  translateArray(key, options) {\n    if (!has(this.locale.strings, key)) {\n      throw new Error(`missing string: ${key}`);\n    }\n\n    const string = this.locale.strings[key];\n    const hasPluralForms = typeof string === 'object';\n\n    if (hasPluralForms) {\n      if (options && typeof options.smart_count !== 'undefined') {\n        const plural = this.locale.pluralize(options.smart_count);\n        return interpolate(string[plural], options);\n      }\n\n      throw new Error('Attempted to use a string with plural forms, but no value was given for %{smart_count}');\n    }\n\n    return interpolate(string, options);\n  }\n\n}\n\nfunction _apply2(locale) {\n  if (!(locale != null && locale.strings)) {\n    return;\n  }\n\n  const prevLocale = this.locale;\n  this.locale = { ...prevLocale,\n    strings: { ...prevLocale.strings,\n      ...locale.strings\n    }\n  };\n  this.locale.pluralize = locale.pluralize || prevLocale.pluralize;\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}